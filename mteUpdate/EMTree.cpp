/* Generated by Cython 0.28.3 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__EMTree
#define __PYX_HAVE_API__EMTree
/* Early includes */
#include "TObject.h"
#include "TBranch.h"
#include "TTree.h"
#include "TFile.h"
#include "TTreeFormula.h"
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "EMTree.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6EMTree_EMTree;
struct __pyx_obj_6EMTree___pyx_scope_struct____iter__;
struct __pyx_obj_6EMTree___pyx_scope_struct_1_where;

/* "EMTree.pyx":42
 * warnings.formatwarning = my_warning_format
 * 
 * cdef class EMTree:             # <<<<<<<<<<<<<<
 *     # Pointers to tree (may be a chain), current active tree, and current entry
 *     # localentry is the entry in the current tree of the chain
 */
struct __pyx_obj_6EMTree_EMTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_6EMTree_EMTree *__pyx_vtab;
  TTree *tree;
  TTree *currentTree;
  int currentTreeNumber;
  long ientry;
  long localentry;
  PyObject *complained;
  TBranch *run_branch;
  int run_value;
  TBranch *lumi_branch;
  int lumi_value;
  TBranch *evt_branch;
  int evt_value;
  TBranch *genpX_branch;
  float genpX_value;
  TBranch *genpY_branch;
  float genpY_value;
  TBranch *genM_branch;
  float genM_value;
  TBranch *genpT_branch;
  float genpT_value;
  TBranch *vispX_branch;
  float vispX_value;
  TBranch *vispY_branch;
  float vispY_value;
  TBranch *genpt_1_branch;
  float genpt_1_value;
  TBranch *geneta_1_branch;
  float geneta_1_value;
  TBranch *genpt_2_branch;
  float genpt_2_value;
  TBranch *geneta_2_branch;
  float geneta_2_value;
  TBranch *Rivet_VEta_branch;
  float Rivet_VEta_value;
  TBranch *Rivet_VPt_branch;
  float Rivet_VPt_value;
  TBranch *Rivet_errorCode_branch;
  float Rivet_errorCode_value;
  TBranch *Rivet_higgsEta_branch;
  float Rivet_higgsEta_value;
  TBranch *Rivet_higgsPt_branch;
  float Rivet_higgsPt_value;
  TBranch *Rivet_nJets25_branch;
  float Rivet_nJets25_value;
  TBranch *Rivet_nJets30_branch;
  float Rivet_nJets30_value;
  TBranch *Rivet_p4decay_VEta_branch;
  float Rivet_p4decay_VEta_value;
  TBranch *Rivet_p4decay_VPt_branch;
  float Rivet_p4decay_VPt_value;
  TBranch *Rivet_prodMode_branch;
  float Rivet_prodMode_value;
  TBranch *Rivet_stage0_cat_branch;
  float Rivet_stage0_cat_value;
  TBranch *Rivet_stage1_1_fine_cat_pTjet30GeV_branch;
  float Rivet_stage1_1_fine_cat_pTjet30GeV_value;
  TBranch *Rivet_stage1_1_cat_pTjet30GeV_branch;
  float Rivet_stage1_1_cat_pTjet30GeV_value;
  TBranch *npv_branch;
  float npv_value;
  TBranch *npu_branch;
  float npu_value;
  TBranch *pt_1_ScaleUp_branch;
  float pt_1_ScaleUp_value;
  TBranch *pt_1_ScaleDown_branch;
  float pt_1_ScaleDown_value;
  TBranch *pt_1_branch;
  float pt_1_value;
  TBranch *phi_1_branch;
  float phi_1_value;
  TBranch *eta_1_branch;
  float eta_1_value;
  TBranch *m_1_branch;
  float m_1_value;
  TBranch *e_1_branch;
  float e_1_value;
  TBranch *q_1_branch;
  float q_1_value;
  TBranch *iso_1_branch;
  float iso_1_value;
  TBranch *pt_2_branch;
  float pt_2_value;
  TBranch *phi_2_branch;
  float phi_2_value;
  TBranch *eta_2_branch;
  float eta_2_value;
  TBranch *m_2_branch;
  float m_2_value;
  TBranch *e_2_branch;
  float e_2_value;
  TBranch *q_2_branch;
  float q_2_value;
  TBranch *iso_2_branch;
  float iso_2_value;
  TBranch *numGenJets_branch;
  float numGenJets_value;
  TBranch *bweight_branch;
  float bweight_value;
  TBranch *Flag_ecalBadCalibReducedMINIAODFilter_branch;
  float Flag_ecalBadCalibReducedMINIAODFilter_value;
  TBranch *Flag_goodVertices_branch;
  float Flag_goodVertices_value;
  TBranch *Flag_globalSuperTightHalo2016Filter_branch;
  float Flag_globalSuperTightHalo2016Filter_value;
  TBranch *Flag_eeBadScFilter_branch;
  float Flag_eeBadScFilter_value;
  TBranch *Flag_ecalBadCalibFilter_branch;
  float Flag_ecalBadCalibFilter_value;
  TBranch *Flag_badMuons_branch;
  float Flag_badMuons_value;
  TBranch *Flag_duplicateMuons_branch;
  float Flag_duplicateMuons_value;
  TBranch *Flag_HBHENoiseIsoFilter_branch;
  float Flag_HBHENoiseIsoFilter_value;
  TBranch *Flag_HBHENoiseFilter_branch;
  float Flag_HBHENoiseFilter_value;
  TBranch *Flag_EcalDeadCellTriggerPrimitiveFilter_branch;
  float Flag_EcalDeadCellTriggerPrimitiveFilter_value;
  TBranch *Flag_BadPFMuonFilter_branch;
  float Flag_BadPFMuonFilter_value;
  TBranch *Flag_BadChargedCandidateFilter_branch;
  float Flag_BadChargedCandidateFilter_value;
  TBranch *met_branch;
  float met_value;
  TBranch *metSig_branch;
  float metSig_value;
  TBranch *metcov00_branch;
  float metcov00_value;
  TBranch *metcov10_branch;
  float metcov10_value;
  TBranch *metcov11_branch;
  float metcov11_value;
  TBranch *metcov01_branch;
  float metcov01_value;
  TBranch *metphi_branch;
  float metphi_value;
  TBranch *met_py_branch;
  float met_py_value;
  TBranch *met_px_branch;
  float met_px_value;
  TBranch *met_UESUp_branch;
  float met_UESUp_value;
  TBranch *metphi_UESUp_branch;
  float metphi_UESUp_value;
  TBranch *met_UESDown_branch;
  float met_UESDown_value;
  TBranch *metphi_UESDown_branch;
  float metphi_UESDown_value;
  TBranch *met_JetAbsoluteUp_branch;
  float met_JetAbsoluteUp_value;
  TBranch *metphi_JetAbsoluteUp_branch;
  float metphi_JetAbsoluteUp_value;
  TBranch *met_JetAbsoluteDown_branch;
  float met_JetAbsoluteDown_value;
  TBranch *metphi_JetAbsoluteDown_branch;
  float metphi_JetAbsoluteDown_value;
  TBranch *met_JetAbsoluteyearUp_branch;
  float met_JetAbsoluteyearUp_value;
  TBranch *metphi_JetAbsoluteyearUp_branch;
  float metphi_JetAbsoluteyearUp_value;
  TBranch *met_JetAbsoluteyearDown_branch;
  float met_JetAbsoluteyearDown_value;
  TBranch *metphi_JetAbsoluteyearDown_branch;
  float metphi_JetAbsoluteyearDown_value;
  TBranch *met_JetBBEC1Up_branch;
  float met_JetBBEC1Up_value;
  TBranch *metphi_JetBBEC1Up_branch;
  float metphi_JetBBEC1Up_value;
  TBranch *met_JetBBEC1Down_branch;
  float met_JetBBEC1Down_value;
  TBranch *metphi_JetBBEC1Down_branch;
  float metphi_JetBBEC1Down_value;
  TBranch *met_JetBBEC1yearUp_branch;
  float met_JetBBEC1yearUp_value;
  TBranch *metphi_JetBBEC1yearUp_branch;
  float metphi_JetBBEC1yearUp_value;
  TBranch *met_JetBBEC1yearDown_branch;
  float met_JetBBEC1yearDown_value;
  TBranch *metphi_JetBBEC1yearDown_branch;
  float metphi_JetBBEC1yearDown_value;
  TBranch *met_JetEC2Up_branch;
  float met_JetEC2Up_value;
  TBranch *metphi_JetEC2Up_branch;
  float metphi_JetEC2Up_value;
  TBranch *met_JetEC2Down_branch;
  float met_JetEC2Down_value;
  TBranch *metphi_JetEC2Down_branch;
  float metphi_JetEC2Down_value;
  TBranch *met_JetEC2yearUp_branch;
  float met_JetEC2yearUp_value;
  TBranch *metphi_JetEC2yearUp_branch;
  float metphi_JetEC2yearUp_value;
  TBranch *met_JetEC2yearDown_branch;
  float met_JetEC2yearDown_value;
  TBranch *metphi_JetEC2yearDown_branch;
  float metphi_JetEC2yearDown_value;
  TBranch *met_JetFlavorQCDUp_branch;
  float met_JetFlavorQCDUp_value;
  TBranch *metphi_JetFlavorQCDUp_branch;
  float metphi_JetFlavorQCDUp_value;
  TBranch *met_JetFlavorQCDDown_branch;
  float met_JetFlavorQCDDown_value;
  TBranch *metphi_JetFlavorQCDDown_branch;
  float metphi_JetFlavorQCDDown_value;
  TBranch *met_JetHFUp_branch;
  float met_JetHFUp_value;
  TBranch *metphi_JetHFUp_branch;
  float metphi_JetHFUp_value;
  TBranch *met_JetHFDown_branch;
  float met_JetHFDown_value;
  TBranch *metphi_JetHFDown_branch;
  float metphi_JetHFDown_value;
  TBranch *met_JetHFyearUp_branch;
  float met_JetHFyearUp_value;
  TBranch *metphi_JetHFyearUp_branch;
  float metphi_JetHFyearUp_value;
  TBranch *met_JetHFyearDown_branch;
  float met_JetHFyearDown_value;
  TBranch *metphi_JetHFyearDown_branch;
  float metphi_JetHFyearDown_value;
  TBranch *met_JetRelativeBalUp_branch;
  float met_JetRelativeBalUp_value;
  TBranch *metphi_JetRelativeBalUp_branch;
  float metphi_JetRelativeBalUp_value;
  TBranch *met_JetRelativeBalDown_branch;
  float met_JetRelativeBalDown_value;
  TBranch *metphi_JetRelativeBalDown_branch;
  float metphi_JetRelativeBalDown_value;
  TBranch *met_JetRelativeSampleUp_branch;
  float met_JetRelativeSampleUp_value;
  TBranch *metphi_JetRelativeSampleUp_branch;
  float metphi_JetRelativeSampleUp_value;
  TBranch *met_JetRelativeSampleDown_branch;
  float met_JetRelativeSampleDown_value;
  TBranch *metphi_JetRelativeSampleDown_branch;
  float metphi_JetRelativeSampleDown_value;
  TBranch *met_JERUp_branch;
  float met_JERUp_value;
  TBranch *metphi_JERUp_branch;
  float metphi_JERUp_value;
  TBranch *met_JERDown_branch;
  float met_JERDown_value;
  TBranch *metphi_JERDown_branch;
  float metphi_JERDown_value;
  TBranch *met_responseUp_branch;
  float met_responseUp_value;
  TBranch *met_responseDown_branch;
  float met_responseDown_value;
  TBranch *met_resolutionUp_branch;
  float met_resolutionUp_value;
  TBranch *met_resolutionDown_branch;
  float met_resolutionDown_value;
  TBranch *metphi_responseUp_branch;
  float metphi_responseUp_value;
  TBranch *metphi_responseDown_branch;
  float metphi_responseDown_value;
  TBranch *metphi_resolutionUp_branch;
  float metphi_resolutionUp_value;
  TBranch *metphi_resolutionDown_branch;
  float metphi_resolutionDown_value;
  TBranch *mjj_branch;
  float mjj_value;
  TBranch *mjj_JetAbsoluteUp_branch;
  float mjj_JetAbsoluteUp_value;
  TBranch *mjj_JetAbsoluteDown_branch;
  float mjj_JetAbsoluteDown_value;
  TBranch *mjj_JetAbsoluteyearUp_branch;
  float mjj_JetAbsoluteyearUp_value;
  TBranch *mjj_JetAbsoluteyearDown_branch;
  float mjj_JetAbsoluteyearDown_value;
  TBranch *mjj_JetBBEC1Up_branch;
  float mjj_JetBBEC1Up_value;
  TBranch *mjj_JetBBEC1Down_branch;
  float mjj_JetBBEC1Down_value;
  TBranch *mjj_JetBBEC1yearUp_branch;
  float mjj_JetBBEC1yearUp_value;
  TBranch *mjj_JetBBEC1yearDown_branch;
  float mjj_JetBBEC1yearDown_value;
  TBranch *mjj_JetEC2Up_branch;
  float mjj_JetEC2Up_value;
  TBranch *mjj_JetEC2Down_branch;
  float mjj_JetEC2Down_value;
  TBranch *mjj_JetEC2yearUp_branch;
  float mjj_JetEC2yearUp_value;
  TBranch *mjj_JetEC2yearDown_branch;
  float mjj_JetEC2yearDown_value;
  TBranch *mjj_JetFlavorQCDUp_branch;
  float mjj_JetFlavorQCDUp_value;
  TBranch *mjj_JetFlavorQCDDown_branch;
  float mjj_JetFlavorQCDDown_value;
  TBranch *mjj_JetHFUp_branch;
  float mjj_JetHFUp_value;
  TBranch *mjj_JetHFDown_branch;
  float mjj_JetHFDown_value;
  TBranch *mjj_JetHFyearUp_branch;
  float mjj_JetHFyearUp_value;
  TBranch *mjj_JetHFyearDown_branch;
  float mjj_JetHFyearDown_value;
  TBranch *mjj_JetRelativeBalUp_branch;
  float mjj_JetRelativeBalUp_value;
  TBranch *mjj_JetRelativeBalDown_branch;
  float mjj_JetRelativeBalDown_value;
  TBranch *mjj_JetRelativeSampleUp_branch;
  float mjj_JetRelativeSampleUp_value;
  TBranch *mjj_JetRelativeSampleDown_branch;
  float mjj_JetRelativeSampleDown_value;
  TBranch *mjj_JERUp_branch;
  float mjj_JERUp_value;
  TBranch *mjj_JERDown_branch;
  float mjj_JERDown_value;
  TBranch *gen_match_1_branch;
  int gen_match_1_value;
  TBranch *gen_match_2_branch;
  int gen_match_2_value;
  TBranch *nbtag_branch;
  int nbtag_value;
  TBranch *nbtagL_branch;
  int nbtagL_value;
  TBranch *njets_branch;
  int njets_value;
  TBranch *njets_JetAbsoluteUp_branch;
  int njets_JetAbsoluteUp_value;
  TBranch *njets_JetAbsoluteDown_branch;
  int njets_JetAbsoluteDown_value;
  TBranch *njets_JetAbsoluteyearUp_branch;
  int njets_JetAbsoluteyearUp_value;
  TBranch *njets_JetAbsoluteyearDown_branch;
  int njets_JetAbsoluteyearDown_value;
  TBranch *njets_JetBBEC1Up_branch;
  int njets_JetBBEC1Up_value;
  TBranch *njets_JetBBEC1Down_branch;
  int njets_JetBBEC1Down_value;
  TBranch *njets_JetBBEC1yearUp_branch;
  int njets_JetBBEC1yearUp_value;
  TBranch *njets_JetBBEC1yearDown_branch;
  int njets_JetBBEC1yearDown_value;
  TBranch *njets_JetEC2Up_branch;
  int njets_JetEC2Up_value;
  TBranch *njets_JetEC2Down_branch;
  int njets_JetEC2Down_value;
  TBranch *njets_JetEC2yearUp_branch;
  int njets_JetEC2yearUp_value;
  TBranch *njets_JetEC2yearDown_branch;
  int njets_JetEC2yearDown_value;
  TBranch *njets_JetFlavorQCDUp_branch;
  int njets_JetFlavorQCDUp_value;
  TBranch *njets_JetFlavorQCDDown_branch;
  int njets_JetFlavorQCDDown_value;
  TBranch *njets_JetHFUp_branch;
  int njets_JetHFUp_value;
  TBranch *njets_JetHFDown_branch;
  int njets_JetHFDown_value;
  TBranch *njets_JetHFyearUp_branch;
  int njets_JetHFyearUp_value;
  TBranch *njets_JetHFyearDown_branch;
  int njets_JetHFyearDown_value;
  TBranch *njets_JetRelativeBalUp_branch;
  int njets_JetRelativeBalUp_value;
  TBranch *njets_JetRelativeBalDown_branch;
  int njets_JetRelativeBalDown_value;
  TBranch *njets_JetRelativeSampleUp_branch;
  int njets_JetRelativeSampleUp_value;
  TBranch *njets_JetRelativeSampleDown_branch;
  int njets_JetRelativeSampleDown_value;
  TBranch *njets_JERUp_branch;
  int njets_JERUp_value;
  TBranch *njets_JERDown_branch;
  int njets_JERDown_value;
  TBranch *jpt_1_branch;
  float jpt_1_value;
  TBranch *jeta_1_branch;
  float jeta_1_value;
  TBranch *jcsv_1_branch;
  float jcsv_1_value;
  TBranch *jphi_1_branch;
  float jphi_1_value;
  TBranch *jpt_2_branch;
  float jpt_2_value;
  TBranch *jeta_2_branch;
  float jeta_2_value;
  TBranch *jcsv_2_branch;
  float jcsv_2_value;
  TBranch *jphi_2_branch;
  float jphi_2_value;
  TBranch *bpt_1_branch;
  float bpt_1_value;
  TBranch *bflavor_1_branch;
  float bflavor_1_value;
  TBranch *beta_1_branch;
  float beta_1_value;
  TBranch *bphi_1_branch;
  float bphi_1_value;
  TBranch *passMu23E12_branch;
  float passMu23E12_value;
  TBranch *passMu8E23_branch;
  float passMu8E23_value;
  TBranch *matchMu23E12_1_branch;
  float matchMu23E12_1_value;
  TBranch *matchMu8E23_1_branch;
  float matchMu8E23_1_value;
  TBranch *filterMu23E12_1_branch;
  float filterMu23E12_1_value;
  TBranch *filterMu8E23_1_branch;
  float filterMu8E23_1_value;
  TBranch *matchMu23E12_2_branch;
  float matchMu23E12_2_value;
  TBranch *matchMu8E23_2_branch;
  float matchMu8E23_2_value;
  TBranch *filterMu23E12_2_branch;
  float filterMu23E12_2_value;
  TBranch *filterMu8E23_2_branch;
  float filterMu8E23_2_value;
  TBranch *bpt_2_branch;
  float bpt_2_value;
  TBranch *bflavor_2_branch;
  float bflavor_2_value;
  TBranch *beta_2_branch;
  float beta_2_value;
  TBranch *bphi_2_branch;
  float bphi_2_value;
  TBranch *pt_top1_branch;
  float pt_top1_value;
  TBranch *pt_top2_branch;
  float pt_top2_value;
  TBranch *genweight_branch;
  float genweight_value;
  TBranch *gen_Higgs_pt_branch;
  float gen_Higgs_pt_value;
  TBranch *gen_Higgs_mass_branch;
  float gen_Higgs_mass_value;
};


/* "EMTree.pyx":2631
 * 
 *     # Iterating over the tree
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.ientry = 0
 *         while self.ientry < self.tree.GetEntries():
 */
struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_obj_6EMTree_EMTree *__pyx_v_self;
};


/* "EMTree.pyx":2639
 * 
 *     # Iterate over rows which pass the filter
 *     def where(self, filter):             # <<<<<<<<<<<<<<
 *         print "where"
 *         cdef TTreeFormula* formula = new TTreeFormula(
 */
struct __pyx_obj_6EMTree___pyx_scope_struct_1_where {
  PyObject_HEAD
  TTree *__pyx_v_currentTree;
  PyObject *__pyx_v_filter;
  TTreeFormula *__pyx_v_formula;
  struct __pyx_obj_6EMTree_EMTree *__pyx_v_self;
};



/* "EMTree.pyx":42
 * warnings.formatwarning = my_warning_format
 * 
 * cdef class EMTree:             # <<<<<<<<<<<<<<
 *     # Pointers to tree (may be a chain), current active tree, and current entry
 *     # localentry is the entry in the current tree of the chain
 */

struct __pyx_vtabstruct_6EMTree_EMTree {
  PyObject *(*load_entry)(struct __pyx_obj_6EMTree_EMTree *, long);
  PyObject *(*setup_branches)(struct __pyx_obj_6EMTree_EMTree *, TTree *);
};
static struct __pyx_vtabstruct_6EMTree_EMTree *__pyx_vtabptr_6EMTree_EMTree;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6EMTree_6EMTree_load_entry(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, long __pyx_v_i); /* proto*/
static PyObject *__pyx_f_6EMTree_6EMTree_setup_branches(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, TTree *__pyx_v_the_tree); /* proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'EMTree' */
static PyTypeObject *__pyx_ptype_6EMTree_EMTree = 0;
static PyTypeObject *__pyx_ptype_6EMTree___pyx_scope_struct____iter__ = 0;
static PyTypeObject *__pyx_ptype_6EMTree___pyx_scope_struct_1_where = 0;
#define __Pyx_MODULE_NAME "EMTree"
extern int __pyx_module_is_main_EMTree;
int __pyx_module_is_main_EMTree = 0;

/* Implementation of 'EMTree' */
static PyObject *__pyx_builtin_Warning;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_[] = "";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_s_s[] = "%s:%s\n";
static const char __pyx_k_ROOT[] = "ROOT";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_ttree[] = "ttree";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_EMTree[] = "EMTree";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_lineno[] = "lineno";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_Warning[] = "Warning";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_category[] = "category";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_AsCObject[] = "AsCObject";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_EMTree_pyx[] = "EMTree.pyx";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_EMTree_where[] = "EMTree.where";
static const char __pyx_k_EMTree___iter[] = "EMTree.__iter__";
static const char __pyx_k_formatwarning[] = "formatwarning";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_my_warning_format[] = "my_warning_format";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_EMTree_Expected_branch_e_1_does[] = "EMTree: Expected branch e_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_e_2_does[] = "EMTree: Expected branch e_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_evt_does[] = "EMTree: Expected branch evt does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_geneta_1[] = "EMTree: Expected branch geneta_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_geneta_2[] = "EMTree: Expected branch geneta_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_m_1_does[] = "EMTree: Expected branch m_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_m_2_does[] = "EMTree: Expected branch m_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_does[] = "EMTree: Expected branch met does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metcov00[] = "EMTree: Expected branch metcov00 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metcov01[] = "EMTree: Expected branch metcov01 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metcov10[] = "EMTree: Expected branch metcov10 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metcov11[] = "EMTree: Expected branch metcov11 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_does[] = "EMTree: Expected branch mjj does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_npu_does[] = "EMTree: Expected branch npu does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_npv_does[] = "EMTree: Expected branch npv does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_q_1_does[] = "EMTree: Expected branch q_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_q_2_does[] = "EMTree: Expected branch q_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_run_does[] = "EMTree: Expected branch run does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_BadC[] = "EMTree: Expected branch Flag_BadChargedCandidateFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_BadP[] = "EMTree: Expected branch Flag_BadPFMuonFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_Ecal[] = "EMTree: Expected branch Flag_EcalDeadCellTriggerPrimitiveFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_HBHE[] = "EMTree: Expected branch Flag_HBHENoiseIsoFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_badM[] = "EMTree: Expected branch Flag_badMuons does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_dupl[] = "EMTree: Expected branch Flag_duplicateMuons does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_ecal[] = "EMTree: Expected branch Flag_ecalBadCalibReducedMINIAODFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_eeBa[] = "EMTree: Expected branch Flag_eeBadScFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_glob[] = "EMTree: Expected branch Flag_globalSuperTightHalo2016Filter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_good[] = "EMTree: Expected branch Flag_goodVertices does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_VEt[] = "EMTree: Expected branch Rivet_VEta does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_VPt[] = "EMTree: Expected branch Rivet_VPt does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_err[] = "EMTree: Expected branch Rivet_errorCode does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_hig[] = "EMTree: Expected branch Rivet_higgsEta does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_nJe[] = "EMTree: Expected branch Rivet_nJets25 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_p4d[] = "EMTree: Expected branch Rivet_p4decay_VEta does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_pro[] = "EMTree: Expected branch Rivet_prodMode does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_sta[] = "EMTree: Expected branch Rivet_stage0_cat does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_beta_1_do[] = "EMTree: Expected branch beta_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_beta_2_do[] = "EMTree: Expected branch beta_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bflavor_1[] = "EMTree: Expected branch bflavor_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bflavor_2[] = "EMTree: Expected branch bflavor_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bphi_1_do[] = "EMTree: Expected branch bphi_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bphi_2_do[] = "EMTree: Expected branch bphi_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bpt_1_doe[] = "EMTree: Expected branch bpt_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bpt_2_doe[] = "EMTree: Expected branch bpt_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_bweight_d[] = "EMTree: Expected branch bweight does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_eta_1_doe[] = "EMTree: Expected branch eta_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_eta_2_doe[] = "EMTree: Expected branch eta_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_filterMu2[] = "EMTree: Expected branch filterMu23E12_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_filterMu8[] = "EMTree: Expected branch filterMu8E23_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genM_does[] = "EMTree: Expected branch genM does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_gen_Higgs[] = "EMTree: Expected branch gen_Higgs_pt does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_gen_match[] = "EMTree: Expected branch gen_match_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genpT_doe[] = "EMTree: Expected branch genpT does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genpX_doe[] = "EMTree: Expected branch genpX does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genpY_doe[] = "EMTree: Expected branch genpY does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genpt_1_d[] = "EMTree: Expected branch genpt_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genpt_2_d[] = "EMTree: Expected branch genpt_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_genweight[] = "EMTree: Expected branch genweight does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_iso_1_doe[] = "EMTree: Expected branch iso_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_iso_2_doe[] = "EMTree: Expected branch iso_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jcsv_1_do[] = "EMTree: Expected branch jcsv_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jcsv_2_do[] = "EMTree: Expected branch jcsv_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jeta_1_do[] = "EMTree: Expected branch jeta_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jeta_2_do[] = "EMTree: Expected branch jeta_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jphi_1_do[] = "EMTree: Expected branch jphi_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jphi_2_do[] = "EMTree: Expected branch jphi_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jpt_1_doe[] = "EMTree: Expected branch jpt_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_jpt_2_doe[] = "EMTree: Expected branch jpt_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_lumi_does[] = "EMTree: Expected branch lumi does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_matchMu23[] = "EMTree: Expected branch matchMu23E12_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_matchMu8E[] = "EMTree: Expected branch matchMu8E23_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metSig_do[] = "EMTree: Expected branch metSig does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JERDo[] = "EMTree: Expected branch met_JERDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JERUp[] = "EMTree: Expected branch met_JERUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetAb[] = "EMTree: Expected branch met_JetAbsoluteUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetBB[] = "EMTree: Expected branch met_JetBBEC1Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetEC[] = "EMTree: Expected branch met_JetEC2Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetFl[] = "EMTree: Expected branch met_JetFlavorQCDUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetHF[] = "EMTree: Expected branch met_JetHFUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetRe[] = "EMTree: Expected branch met_JetRelativeBalUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_UESDo[] = "EMTree: Expected branch met_UESDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_UESUp[] = "EMTree: Expected branch met_UESUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_px_do[] = "EMTree: Expected branch met_px does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_py_do[] = "EMTree: Expected branch met_py does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_resol[] = "EMTree: Expected branch met_resolutionUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_respo[] = "EMTree: Expected branch met_responseUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_JE[] = "EMTree: Expected branch metphi_JERUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je[] = "EMTree: Expected branch metphi_JetAbsoluteUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_UE[] = "EMTree: Expected branch metphi_UESUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_do[] = "EMTree: Expected branch metphi does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_re[] = "EMTree: Expected branch metphi_responseUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JERDo[] = "EMTree: Expected branch mjj_JERDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JERUp[] = "EMTree: Expected branch mjj_JERUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetAb[] = "EMTree: Expected branch mjj_JetAbsoluteUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetBB[] = "EMTree: Expected branch mjj_JetBBEC1Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetEC[] = "EMTree: Expected branch mjj_JetEC2Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetFl[] = "EMTree: Expected branch mjj_JetFlavorQCDUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetHF[] = "EMTree: Expected branch mjj_JetHFUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetRe[] = "EMTree: Expected branch mjj_JetRelativeBalUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_nbtagL_do[] = "EMTree: Expected branch nbtagL does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_nbtag_doe[] = "EMTree: Expected branch nbtag does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_JER[] = "EMTree: Expected branch njets_JERUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet[] = "EMTree: Expected branch njets_JetAbsoluteUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_doe[] = "EMTree: Expected branch njets does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_numGenJet[] = "EMTree: Expected branch numGenJets does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_passMu23E[] = "EMTree: Expected branch passMu23E12 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_passMu8E2[] = "EMTree: Expected branch passMu8E23 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_phi_1_doe[] = "EMTree: Expected branch phi_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_phi_2_doe[] = "EMTree: Expected branch phi_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_1_Scal[] = "EMTree: Expected branch pt_1_ScaleUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_1_does[] = "EMTree: Expected branch pt_1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_2_does[] = "EMTree: Expected branch pt_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_top1_d[] = "EMTree: Expected branch pt_top1 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_top2_d[] = "EMTree: Expected branch pt_top2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_vispX_doe[] = "EMTree: Expected branch vispX does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_vispY_doe[] = "EMTree: Expected branch vispY does not exist! It will crash if you try and use it!";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_EMTree_Expected_branch_Flag_HBHE_2[] = "EMTree: Expected branch Flag_HBHENoiseFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Flag_ecal_2[] = "EMTree: Expected branch Flag_ecalBadCalibFilter does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_hig_2[] = "EMTree: Expected branch Rivet_higgsPt does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_nJe_2[] = "EMTree: Expected branch Rivet_nJets30 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_p4d_2[] = "EMTree: Expected branch Rivet_p4decay_VPt does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_sta_2[] = "EMTree: Expected branch Rivet_stage1_1_fine_cat_pTjet30GeV does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_Rivet_sta_3[] = "EMTree: Expected branch Rivet_stage1_1_cat_pTjet30GeV does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_filterMu2_2[] = "EMTree: Expected branch filterMu23E12_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_filterMu8_2[] = "EMTree: Expected branch filterMu8E23_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_gen_Higgs_2[] = "EMTree: Expected branch gen_Higgs_mass does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_gen_match_2[] = "EMTree: Expected branch gen_match_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_matchMu23_2[] = "EMTree: Expected branch matchMu23E12_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_matchMu8E_2[] = "EMTree: Expected branch matchMu8E23_2 does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetAb_2[] = "EMTree: Expected branch met_JetAbsoluteDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetAb_3[] = "EMTree: Expected branch met_JetAbsoluteyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetAb_4[] = "EMTree: Expected branch met_JetAbsoluteyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetBB_2[] = "EMTree: Expected branch met_JetBBEC1Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetBB_3[] = "EMTree: Expected branch met_JetBBEC1yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetBB_4[] = "EMTree: Expected branch met_JetBBEC1yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetEC_2[] = "EMTree: Expected branch met_JetEC2Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetEC_3[] = "EMTree: Expected branch met_JetEC2yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetEC_4[] = "EMTree: Expected branch met_JetEC2yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetFl_2[] = "EMTree: Expected branch met_JetFlavorQCDDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetHF_2[] = "EMTree: Expected branch met_JetHFDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetHF_3[] = "EMTree: Expected branch met_JetHFyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetHF_4[] = "EMTree: Expected branch met_JetHFyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetRe_2[] = "EMTree: Expected branch met_JetRelativeBalDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetRe_3[] = "EMTree: Expected branch met_JetRelativeSampleUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_JetRe_4[] = "EMTree: Expected branch met_JetRelativeSampleDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_resol_2[] = "EMTree: Expected branch met_resolutionDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_met_respo_2[] = "EMTree: Expected branch met_responseDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_JE_2[] = "EMTree: Expected branch metphi_JERDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_2[] = "EMTree: Expected branch metphi_JetAbsoluteDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_3[] = "EMTree: Expected branch metphi_JetAbsoluteyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_4[] = "EMTree: Expected branch metphi_JetAbsoluteyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_5[] = "EMTree: Expected branch metphi_JetBBEC1Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_6[] = "EMTree: Expected branch metphi_JetBBEC1Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_7[] = "EMTree: Expected branch metphi_JetBBEC1yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_8[] = "EMTree: Expected branch metphi_JetBBEC1yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_9[] = "EMTree: Expected branch metphi_JetEC2Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_UE_2[] = "EMTree: Expected branch metphi_UESDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_re_2[] = "EMTree: Expected branch metphi_responseDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_re_3[] = "EMTree: Expected branch metphi_resolutionUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_re_4[] = "EMTree: Expected branch metphi_resolutionDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetAb_2[] = "EMTree: Expected branch mjj_JetAbsoluteDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetAb_3[] = "EMTree: Expected branch mjj_JetAbsoluteyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetAb_4[] = "EMTree: Expected branch mjj_JetAbsoluteyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetBB_2[] = "EMTree: Expected branch mjj_JetBBEC1Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetBB_3[] = "EMTree: Expected branch mjj_JetBBEC1yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetBB_4[] = "EMTree: Expected branch mjj_JetBBEC1yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetEC_2[] = "EMTree: Expected branch mjj_JetEC2Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetEC_3[] = "EMTree: Expected branch mjj_JetEC2yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetEC_4[] = "EMTree: Expected branch mjj_JetEC2yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetFl_2[] = "EMTree: Expected branch mjj_JetFlavorQCDDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetHF_2[] = "EMTree: Expected branch mjj_JetHFDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetHF_3[] = "EMTree: Expected branch mjj_JetHFyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetHF_4[] = "EMTree: Expected branch mjj_JetHFyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetRe_2[] = "EMTree: Expected branch mjj_JetRelativeBalDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetRe_3[] = "EMTree: Expected branch mjj_JetRelativeSampleUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_mjj_JetRe_4[] = "EMTree: Expected branch mjj_JetRelativeSampleDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_JER_2[] = "EMTree: Expected branch njets_JERDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_2[] = "EMTree: Expected branch njets_JetAbsoluteDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_3[] = "EMTree: Expected branch njets_JetAbsoluteyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_4[] = "EMTree: Expected branch njets_JetAbsoluteyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_5[] = "EMTree: Expected branch njets_JetBBEC1Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_6[] = "EMTree: Expected branch njets_JetBBEC1Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_7[] = "EMTree: Expected branch njets_JetBBEC1yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_8[] = "EMTree: Expected branch njets_JetBBEC1yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_9[] = "EMTree: Expected branch njets_JetEC2Up does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_pt_1_Scal_2[] = "EMTree: Expected branch pt_1_ScaleDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_10[] = "EMTree: Expected branch metphi_JetEC2Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_11[] = "EMTree: Expected branch metphi_JetEC2yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_12[] = "EMTree: Expected branch metphi_JetEC2yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_13[] = "EMTree: Expected branch metphi_JetFlavorQCDUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_14[] = "EMTree: Expected branch metphi_JetFlavorQCDDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_15[] = "EMTree: Expected branch metphi_JetHFUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_16[] = "EMTree: Expected branch metphi_JetHFDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_17[] = "EMTree: Expected branch metphi_JetHFyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_18[] = "EMTree: Expected branch metphi_JetHFyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_19[] = "EMTree: Expected branch metphi_JetRelativeBalUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_20[] = "EMTree: Expected branch metphi_JetRelativeBalDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_21[] = "EMTree: Expected branch metphi_JetRelativeSampleUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_metphi_Je_22[] = "EMTree: Expected branch metphi_JetRelativeSampleDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_10[] = "EMTree: Expected branch njets_JetEC2Down does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_11[] = "EMTree: Expected branch njets_JetEC2yearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_12[] = "EMTree: Expected branch njets_JetEC2yearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_13[] = "EMTree: Expected branch njets_JetFlavorQCDUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_14[] = "EMTree: Expected branch njets_JetFlavorQCDDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_15[] = "EMTree: Expected branch njets_JetHFUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_16[] = "EMTree: Expected branch njets_JetHFDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_17[] = "EMTree: Expected branch njets_JetHFyearUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_18[] = "EMTree: Expected branch njets_JetHFyearDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_19[] = "EMTree: Expected branch njets_JetRelativeBalUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_20[] = "EMTree: Expected branch njets_JetRelativeBalDown does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_21[] = "EMTree: Expected branch njets_JetRelativeSampleUp does not exist! It will crash if you try and use it!";
static const char __pyx_k_EMTree_Expected_branch_njets_Jet_22[] = "EMTree: Expected branch njets_JetRelativeSampleDown does not exist! It will crash if you try and use it!";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_AsCObject;
static PyObject *__pyx_n_s_EMTree;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_BadC;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_BadP;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_Ecal;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_HBHE;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_HBHE_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_badM;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_dupl;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_ecal;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_ecal_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_eeBa;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_glob;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Flag_good;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_VEt;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_VPt;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_err;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_hig;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_hig_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_nJe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_nJe_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_p4d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_p4d_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_pro;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_sta;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_sta_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_Rivet_sta_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_beta_1_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_beta_2_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bflavor_1;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bflavor_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bphi_1_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bphi_2_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bpt_1_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bpt_2_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_bweight_d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_e_1_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_e_2_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_eta_1_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_eta_2_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_evt_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_filterMu2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_filterMu2_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_filterMu8;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_filterMu8_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genM_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_gen_Higgs;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_gen_Higgs_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_gen_match;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_gen_match_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_geneta_1;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_geneta_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genpT_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genpX_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genpY_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genpt_1_d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genpt_2_d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_genweight;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_iso_1_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_iso_2_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jcsv_1_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jcsv_2_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jeta_1_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jeta_2_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jphi_1_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jphi_2_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jpt_1_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_jpt_2_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_lumi_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_m_1_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_m_2_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_matchMu23;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_matchMu23_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_matchMu8E;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_matchMu8E_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metSig_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JERDo;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JERUp;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetAb;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetAb_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetAb_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetAb_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetBB;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetBB_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetBB_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetBB_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetEC;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetEC_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetEC_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetEC_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetFl;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetFl_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetHF;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetHF_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetHF_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetHF_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetRe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetRe_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetRe_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_JetRe_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_UESDo;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_UESUp;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_px_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_py_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_resol;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_resol_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_respo;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_met_respo_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metcov00;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metcov01;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metcov10;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metcov11;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_JE;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_JE_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_10;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_11;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_12;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_13;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_14;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_15;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_16;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_17;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_18;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_19;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_20;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_21;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_22;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_5;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_6;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_7;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_8;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_Je_9;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_UE;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_UE_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_re;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_re_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_re_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_metphi_re_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JERDo;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JERUp;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetFl;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetFl_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_mjj_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_nbtagL_do;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_nbtag_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_JER;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_JER_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_10;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_11;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_12;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_13;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_14;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_15;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_16;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_17;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_18;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_19;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_20;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_21;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_22;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_3;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_4;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_5;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_6;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_7;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_8;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_Jet_9;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_njets_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_npu_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_npv_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_numGenJet;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_passMu23E;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_passMu8E2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_phi_1_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_phi_2_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_1_Scal;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_1_Scal_2;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_1_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_2_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_top1_d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_pt_top2_d;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_q_1_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_q_2_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_run_does;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_vispX_doe;
static PyObject *__pyx_kp_s_EMTree_Expected_branch_vispY_doe;
static PyObject *__pyx_n_s_EMTree___iter;
static PyObject *__pyx_kp_s_EMTree_pyx;
static PyObject *__pyx_n_s_EMTree_where;
static PyObject *__pyx_n_s_ROOT;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_Warning;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_category;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_formatwarning;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_lineno;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_n_s_my_warning_format;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_kp_s_s_s;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_ttree;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_where;
static PyObject *__pyx_pf_6EMTree_my_warning_format(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_message, PyObject *__pyx_v_category, CYTHON_UNUSED PyObject *__pyx_v_filename, CYTHON_UNUSED PyObject *__pyx_v_lineno, CYTHON_UNUSED PyObject *__pyx_v_line); /* proto */
static int __pyx_pf_6EMTree_6EMTree___cinit__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_ttree); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_2__iter__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5where(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_filter); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5entry___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static int __pyx_pf_6EMTree_6EMTree_5entry_2__set__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3run___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_4lumi___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3evt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5genpX___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5genpY___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_4genM___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5genpT___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5vispX___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5vispY___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_7genpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8geneta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_7genpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8geneta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_10Rivet_VEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9Rivet_VPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15Rivet_errorCode___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14Rivet_higgsEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_higgsPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_nJets25___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_nJets30___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18Rivet_p4decay_VEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17Rivet_p4decay_VPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14Rivet_prodMode___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16Rivet_stage0_cat___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3npv___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3npu___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12pt_1_ScaleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14pt_1_ScaleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_4pt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5phi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5eta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3m_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3e_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3q_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5iso_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_4pt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5phi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5eta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3m_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3e_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3q_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5iso_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_10numGenJets___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_7bweight___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17Flag_goodVertices___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18Flag_eeBadScFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23Flag_ecalBadCalibFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13Flag_badMuons___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19Flag_duplicateMuons___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20Flag_HBHENoiseFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20Flag_BadPFMuonFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3met___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6metSig___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov00___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov10___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov11___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov01___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6metphi___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6met_py___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6met_px___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9met_UESUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12metphi_UESUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11met_UESDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_UESDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17met_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20metphi_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19met_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22metphi_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21met_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23met_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14met_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16met_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12met_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15metphi_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14met_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16met_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11met_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13met_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16metphi_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15met_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18metphi_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17met_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20metphi_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22met_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_25metphi_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23met_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_26metphi_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_25met_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_28metphi_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9met_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12metphi_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11met_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14met_responseUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16met_responseDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16met_resolutionUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18met_resolutionDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_responseUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_responseDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_resolutionUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_resolutionDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_3mjj___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17mjj_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19mjj_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14mjj_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16mjj_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12mjj_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14mjj_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16mjj_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11mjj_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13mjj_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15mjj_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17mjj_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22mjj_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23mjj_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_25mjj_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9mjj_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11mjj_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11gen_match_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11gen_match_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5nbtag___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6nbtagL___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5njets___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19njets_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_21njets_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_23njets_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_25njets_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16njets_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18njets_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14njets_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_16njets_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_18njets_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13njets_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15njets_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_17njets_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_19njets_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_24njets_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_25njets_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_27njets_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11njets_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13njets_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5jpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jeta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jcsv_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jphi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5jpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jeta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jcsv_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6jphi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5bpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9bflavor_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6beta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6bphi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_11passMu23E12___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_10passMu8E23___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14matchMu23E12_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13matchMu8E23_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15filterMu23E12_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14filterMu8E23_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14matchMu23E12_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_13matchMu8E23_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_15filterMu23E12_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14filterMu8E23_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_5bpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9bflavor_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6beta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_6bphi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_7pt_top1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_7pt_top2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_9genweight___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_12gen_Higgs_pt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_14gen_Higgs_mass___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_10complained___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static int __pyx_pf_6EMTree_6EMTree_10complained_2__set__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6EMTree_6EMTree_10complained_4__del__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6EMTree_EMTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6EMTree_6EMTree_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6EMTree_EMTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6EMTree___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6EMTree___pyx_scope_struct_1_where(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__214;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__216;
static PyObject *__pyx_codeobj__217;
/* Late includes */

/* "EMTree.pyx":38
 * from cpython cimport PyCObject_AsVoidPtr
 * import warnings
 * def my_warning_format(message, category, filename, lineno, line=""):             # <<<<<<<<<<<<<<
 *     return "%s:%s\n" % (category.__name__, message)
 * warnings.formatwarning = my_warning_format
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_1my_warning_format(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6EMTree_1my_warning_format = {"my_warning_format", (PyCFunction)__pyx_pw_6EMTree_1my_warning_format, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6EMTree_1my_warning_format(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_message = 0;
  PyObject *__pyx_v_category = 0;
  CYTHON_UNUSED PyObject *__pyx_v_filename = 0;
  CYTHON_UNUSED PyObject *__pyx_v_lineno = 0;
  CYTHON_UNUSED PyObject *__pyx_v_line = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("my_warning_format (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_message,&__pyx_n_s_category,&__pyx_n_s_filename,&__pyx_n_s_lineno,&__pyx_n_s_line,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_kp_s_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_message)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("my_warning_format", 0, 4, 5, 1); __PYX_ERR(0, 38, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("my_warning_format", 0, 4, 5, 2); __PYX_ERR(0, 38, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lineno)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("my_warning_format", 0, 4, 5, 3); __PYX_ERR(0, 38, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "my_warning_format") < 0)) __PYX_ERR(0, 38, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_message = values[0];
    __pyx_v_category = values[1];
    __pyx_v_filename = values[2];
    __pyx_v_lineno = values[3];
    __pyx_v_line = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("my_warning_format", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 38, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EMTree.my_warning_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6EMTree_my_warning_format(__pyx_self, __pyx_v_message, __pyx_v_category, __pyx_v_filename, __pyx_v_lineno, __pyx_v_line);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_my_warning_format(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_message, PyObject *__pyx_v_category, CYTHON_UNUSED PyObject *__pyx_v_filename, CYTHON_UNUSED PyObject *__pyx_v_lineno, CYTHON_UNUSED PyObject *__pyx_v_line) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("my_warning_format", 0);

  /* "EMTree.pyx":39
 * import warnings
 * def my_warning_format(message, category, filename, lineno, line=""):
 *     return "%s:%s\n" % (category.__name__, message)             # <<<<<<<<<<<<<<
 * warnings.formatwarning = my_warning_format
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_category, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_message);
  __Pyx_GIVEREF(__pyx_v_message);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_message);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":38
 * from cpython cimport PyCObject_AsVoidPtr
 * import warnings
 * def my_warning_format(message, category, filename, lineno, line=""):             # <<<<<<<<<<<<<<
 *     return "%s:%s\n" % (category.__name__, message)
 * warnings.formatwarning = my_warning_format
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("EMTree.my_warning_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":692
 * 
 * 
 *     def __cinit__(self, ttree):             # <<<<<<<<<<<<<<
 *         #print "cinit"
 *         # Constructor from a ROOT.TTree
 */

/* Python wrapper */
static int __pyx_pw_6EMTree_6EMTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6EMTree_6EMTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ttree = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ttree,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ttree)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 692, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_ttree = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 692, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("EMTree.EMTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6EMTree_6EMTree___cinit__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self), __pyx_v_ttree);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6EMTree_6EMTree___cinit__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_ttree) {
  PyObject *__pyx_v_AsCObject = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  void *__pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "EMTree.pyx":695
 *         #print "cinit"
 *         # Constructor from a ROOT.TTree
 *         from ROOT import AsCObject             # <<<<<<<<<<<<<<
 *         self.tree = <TTree*>PyCObject_AsVoidPtr(AsCObject(ttree))
 *         self.ientry = 0
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_AsCObject);
  __Pyx_GIVEREF(__pyx_n_s_AsCObject);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_AsCObject);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_ROOT, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_AsCObject); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_AsCObject = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "EMTree.pyx":696
 *         # Constructor from a ROOT.TTree
 *         from ROOT import AsCObject
 *         self.tree = <TTree*>PyCObject_AsVoidPtr(AsCObject(ttree))             # <<<<<<<<<<<<<<
 *         self.ientry = 0
 *         self.currentTreeNumber = -1
 */
  __Pyx_INCREF(__pyx_v_AsCObject);
  __pyx_t_1 = __pyx_v_AsCObject; __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_ttree); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_ttree};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, __pyx_v_ttree};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_ttree);
      __Pyx_GIVEREF(__pyx_v_ttree);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_ttree);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = PyCObject_AsVoidPtr(__pyx_t_2); if (unlikely(__pyx_t_5 == ((void *)NULL) && PyErr_Occurred())) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->tree = ((TTree *)__pyx_t_5);

  /* "EMTree.pyx":697
 *         from ROOT import AsCObject
 *         self.tree = <TTree*>PyCObject_AsVoidPtr(AsCObject(ttree))
 *         self.ientry = 0             # <<<<<<<<<<<<<<
 *         self.currentTreeNumber = -1
 *         #print self.tree.GetEntries()
 */
  __pyx_v_self->ientry = 0;

  /* "EMTree.pyx":698
 *         self.tree = <TTree*>PyCObject_AsVoidPtr(AsCObject(ttree))
 *         self.ientry = 0
 *         self.currentTreeNumber = -1             # <<<<<<<<<<<<<<
 *         #print self.tree.GetEntries()
 *         #self.load_entry(0)
 */
  __pyx_v_self->currentTreeNumber = -1;

  /* "EMTree.pyx":701
 *         #print self.tree.GetEntries()
 *         #self.load_entry(0)
 *         self.complained = set([])             # <<<<<<<<<<<<<<
 * 
 *     cdef load_entry(self, long i):
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->complained);
  __Pyx_DECREF(__pyx_v_self->complained);
  __pyx_v_self->complained = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "EMTree.pyx":692
 * 
 * 
 *     def __cinit__(self, ttree):             # <<<<<<<<<<<<<<
 *         #print "cinit"
 *         # Constructor from a ROOT.TTree
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EMTree.EMTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_AsCObject);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":703
 *         self.complained = set([])
 * 
 *     cdef load_entry(self, long i):             # <<<<<<<<<<<<<<
 *         #print "load", i
 *         # Load the correct tree and setup the branches
 */

static PyObject *__pyx_f_6EMTree_6EMTree_load_entry(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, long __pyx_v_i) {
  TTree *__pyx_v_new_tree;
  int __pyx_v_treenum;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("load_entry", 0);

  /* "EMTree.pyx":706
 *         #print "load", i
 *         # Load the correct tree and setup the branches
 *         self.localentry = self.tree.LoadTree(i)             # <<<<<<<<<<<<<<
 *         #print "local", self.localentry
 *         new_tree = self.tree.GetTree()
 */
  __pyx_v_self->localentry = __pyx_v_self->tree->LoadTree(__pyx_v_i);

  /* "EMTree.pyx":708
 *         self.localentry = self.tree.LoadTree(i)
 *         #print "local", self.localentry
 *         new_tree = self.tree.GetTree()             # <<<<<<<<<<<<<<
 *         #print "tree", <long>(new_tree)
 *         treenum = self.tree.GetTreeNumber()
 */
  __pyx_v_new_tree = __pyx_v_self->tree->GetTree();

  /* "EMTree.pyx":710
 *         new_tree = self.tree.GetTree()
 *         #print "tree", <long>(new_tree)
 *         treenum = self.tree.GetTreeNumber()             # <<<<<<<<<<<<<<
 *         #print "num", treenum
 *         if treenum != self.currentTreeNumber or new_tree != self.currentTree:
 */
  __pyx_v_treenum = __pyx_v_self->tree->GetTreeNumber();

  /* "EMTree.pyx":712
 *         treenum = self.tree.GetTreeNumber()
 *         #print "num", treenum
 *         if treenum != self.currentTreeNumber or new_tree != self.currentTree:             # <<<<<<<<<<<<<<
 *             #print "New tree!"
 *             self.currentTree = new_tree
 */
  __pyx_t_2 = ((__pyx_v_treenum != __pyx_v_self->currentTreeNumber) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_new_tree != __pyx_v_self->currentTree) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":714
 *         if treenum != self.currentTreeNumber or new_tree != self.currentTree:
 *             #print "New tree!"
 *             self.currentTree = new_tree             # <<<<<<<<<<<<<<
 *             self.currentTreeNumber = treenum
 *             self.setup_branches(new_tree)
 */
    __pyx_v_self->currentTree = __pyx_v_new_tree;

    /* "EMTree.pyx":715
 *             #print "New tree!"
 *             self.currentTree = new_tree
 *             self.currentTreeNumber = treenum             # <<<<<<<<<<<<<<
 *             self.setup_branches(new_tree)
 * 
 */
    __pyx_v_self->currentTreeNumber = __pyx_v_treenum;

    /* "EMTree.pyx":716
 *             self.currentTree = new_tree
 *             self.currentTreeNumber = treenum
 *             self.setup_branches(new_tree)             # <<<<<<<<<<<<<<
 * 
 *     cdef setup_branches(self, TTree* the_tree):
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_6EMTree_EMTree *)__pyx_v_self->__pyx_vtab)->setup_branches(__pyx_v_self, __pyx_v_new_tree); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":712
 *         treenum = self.tree.GetTreeNumber()
 *         #print "num", treenum
 *         if treenum != self.currentTreeNumber or new_tree != self.currentTree:             # <<<<<<<<<<<<<<
 *             #print "New tree!"
 *             self.currentTree = new_tree
 */
  }

  /* "EMTree.pyx":703
 *         self.complained = set([])
 * 
 *     cdef load_entry(self, long i):             # <<<<<<<<<<<<<<
 *         #print "load", i
 *         # Load the correct tree and setup the branches
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("EMTree.EMTree.load_entry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":718
 *             self.setup_branches(new_tree)
 * 
 *     cdef setup_branches(self, TTree* the_tree):             # <<<<<<<<<<<<<<
 *         #print "setup"
 * 
 */

static PyObject *__pyx_f_6EMTree_6EMTree_setup_branches(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, TTree *__pyx_v_the_tree) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("setup_branches", 0);

  /* "EMTree.pyx":722
 * 
 *         #print "making run"
 *         self.run_branch = the_tree.GetBranch("run")             # <<<<<<<<<<<<<<
 *         #if not self.run_branch and "run" not in self.complained:
 *         if not self.run_branch and "run":
 */
  __pyx_v_self->run_branch = __pyx_v_the_tree->GetBranch(((char *)"run"));

  /* "EMTree.pyx":724
 *         self.run_branch = the_tree.GetBranch("run")
 *         #if not self.run_branch and "run" not in self.complained:
 *         if not self.run_branch and "run":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch run does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("run")
 */
  __pyx_t_2 = ((!(__pyx_v_self->run_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":725
 *         #if not self.run_branch and "run" not in self.complained:
 *         if not self.run_branch and "run":
 *             warnings.warn( "EMTree: Expected branch run does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("run")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":724
 *         self.run_branch = the_tree.GetBranch("run")
 *         #if not self.run_branch and "run" not in self.complained:
 *         if not self.run_branch and "run":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch run does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("run")
 */
    goto __pyx_L3;
  }

  /* "EMTree.pyx":728
 *             #self.complained.add("run")
 *         else:
 *             self.run_branch.SetAddress(<void*>&self.run_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making lumi"
 */
  /*else*/ {
    __pyx_v_self->run_branch->SetAddress(((void *)(&__pyx_v_self->run_value)));
  }
  __pyx_L3:;

  /* "EMTree.pyx":731
 * 
 *         #print "making lumi"
 *         self.lumi_branch = the_tree.GetBranch("lumi")             # <<<<<<<<<<<<<<
 *         #if not self.lumi_branch and "lumi" not in self.complained:
 *         if not self.lumi_branch and "lumi":
 */
  __pyx_v_self->lumi_branch = __pyx_v_the_tree->GetBranch(((char *)"lumi"));

  /* "EMTree.pyx":733
 *         self.lumi_branch = the_tree.GetBranch("lumi")
 *         #if not self.lumi_branch and "lumi" not in self.complained:
 *         if not self.lumi_branch and "lumi":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch lumi does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("lumi")
 */
  __pyx_t_2 = ((!(__pyx_v_self->lumi_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":734
 *         #if not self.lumi_branch and "lumi" not in self.complained:
 *         if not self.lumi_branch and "lumi":
 *             warnings.warn( "EMTree: Expected branch lumi does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("lumi")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":733
 *         self.lumi_branch = the_tree.GetBranch("lumi")
 *         #if not self.lumi_branch and "lumi" not in self.complained:
 *         if not self.lumi_branch and "lumi":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch lumi does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("lumi")
 */
    goto __pyx_L6;
  }

  /* "EMTree.pyx":737
 *             #self.complained.add("lumi")
 *         else:
 *             self.lumi_branch.SetAddress(<void*>&self.lumi_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making evt"
 */
  /*else*/ {
    __pyx_v_self->lumi_branch->SetAddress(((void *)(&__pyx_v_self->lumi_value)));
  }
  __pyx_L6:;

  /* "EMTree.pyx":740
 * 
 *         #print "making evt"
 *         self.evt_branch = the_tree.GetBranch("evt")             # <<<<<<<<<<<<<<
 *         #if not self.evt_branch and "evt" not in self.complained:
 *         if not self.evt_branch and "evt":
 */
  __pyx_v_self->evt_branch = __pyx_v_the_tree->GetBranch(((char *)"evt"));

  /* "EMTree.pyx":742
 *         self.evt_branch = the_tree.GetBranch("evt")
 *         #if not self.evt_branch and "evt" not in self.complained:
 *         if not self.evt_branch and "evt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch evt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("evt")
 */
  __pyx_t_2 = ((!(__pyx_v_self->evt_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":743
 *         #if not self.evt_branch and "evt" not in self.complained:
 *         if not self.evt_branch and "evt":
 *             warnings.warn( "EMTree: Expected branch evt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("evt")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":742
 *         self.evt_branch = the_tree.GetBranch("evt")
 *         #if not self.evt_branch and "evt" not in self.complained:
 *         if not self.evt_branch and "evt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch evt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("evt")
 */
    goto __pyx_L9;
  }

  /* "EMTree.pyx":746
 *             #self.complained.add("evt")
 *         else:
 *             self.evt_branch.SetAddress(<void*>&self.evt_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genpX"
 */
  /*else*/ {
    __pyx_v_self->evt_branch->SetAddress(((void *)(&__pyx_v_self->evt_value)));
  }
  __pyx_L9:;

  /* "EMTree.pyx":749
 * 
 *         #print "making genpX"
 *         self.genpX_branch = the_tree.GetBranch("genpX")             # <<<<<<<<<<<<<<
 *         #if not self.genpX_branch and "genpX" not in self.complained:
 *         if not self.genpX_branch and "genpX":
 */
  __pyx_v_self->genpX_branch = __pyx_v_the_tree->GetBranch(((char *)"genpX"));

  /* "EMTree.pyx":751
 *         self.genpX_branch = the_tree.GetBranch("genpX")
 *         #if not self.genpX_branch and "genpX" not in self.complained:
 *         if not self.genpX_branch and "genpX":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpX does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpX")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genpX_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L13_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L13_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":752
 *         #if not self.genpX_branch and "genpX" not in self.complained:
 *         if not self.genpX_branch and "genpX":
 *             warnings.warn( "EMTree: Expected branch genpX does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpX")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":751
 *         self.genpX_branch = the_tree.GetBranch("genpX")
 *         #if not self.genpX_branch and "genpX" not in self.complained:
 *         if not self.genpX_branch and "genpX":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpX does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpX")
 */
    goto __pyx_L12;
  }

  /* "EMTree.pyx":755
 *             #self.complained.add("genpX")
 *         else:
 *             self.genpX_branch.SetAddress(<void*>&self.genpX_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genpY"
 */
  /*else*/ {
    __pyx_v_self->genpX_branch->SetAddress(((void *)(&__pyx_v_self->genpX_value)));
  }
  __pyx_L12:;

  /* "EMTree.pyx":758
 * 
 *         #print "making genpY"
 *         self.genpY_branch = the_tree.GetBranch("genpY")             # <<<<<<<<<<<<<<
 *         #if not self.genpY_branch and "genpY" not in self.complained:
 *         if not self.genpY_branch and "genpY":
 */
  __pyx_v_self->genpY_branch = __pyx_v_the_tree->GetBranch(((char *)"genpY"));

  /* "EMTree.pyx":760
 *         self.genpY_branch = the_tree.GetBranch("genpY")
 *         #if not self.genpY_branch and "genpY" not in self.complained:
 *         if not self.genpY_branch and "genpY":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpY does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpY")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genpY_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":761
 *         #if not self.genpY_branch and "genpY" not in self.complained:
 *         if not self.genpY_branch and "genpY":
 *             warnings.warn( "EMTree: Expected branch genpY does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpY")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":760
 *         self.genpY_branch = the_tree.GetBranch("genpY")
 *         #if not self.genpY_branch and "genpY" not in self.complained:
 *         if not self.genpY_branch and "genpY":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpY does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpY")
 */
    goto __pyx_L15;
  }

  /* "EMTree.pyx":764
 *             #self.complained.add("genpY")
 *         else:
 *             self.genpY_branch.SetAddress(<void*>&self.genpY_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genM"
 */
  /*else*/ {
    __pyx_v_self->genpY_branch->SetAddress(((void *)(&__pyx_v_self->genpY_value)));
  }
  __pyx_L15:;

  /* "EMTree.pyx":767
 * 
 *         #print "making genM"
 *         self.genM_branch = the_tree.GetBranch("genM")             # <<<<<<<<<<<<<<
 *         #if not self.genM_branch and "genM" not in self.complained:
 *         if not self.genM_branch and "genM":
 */
  __pyx_v_self->genM_branch = __pyx_v_the_tree->GetBranch(((char *)"genM"));

  /* "EMTree.pyx":769
 *         self.genM_branch = the_tree.GetBranch("genM")
 *         #if not self.genM_branch and "genM" not in self.complained:
 *         if not self.genM_branch and "genM":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genM does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genM")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genM_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":770
 *         #if not self.genM_branch and "genM" not in self.complained:
 *         if not self.genM_branch and "genM":
 *             warnings.warn( "EMTree: Expected branch genM does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genM")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":769
 *         self.genM_branch = the_tree.GetBranch("genM")
 *         #if not self.genM_branch and "genM" not in self.complained:
 *         if not self.genM_branch and "genM":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genM does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genM")
 */
    goto __pyx_L18;
  }

  /* "EMTree.pyx":773
 *             #self.complained.add("genM")
 *         else:
 *             self.genM_branch.SetAddress(<void*>&self.genM_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genpT"
 */
  /*else*/ {
    __pyx_v_self->genM_branch->SetAddress(((void *)(&__pyx_v_self->genM_value)));
  }
  __pyx_L18:;

  /* "EMTree.pyx":776
 * 
 *         #print "making genpT"
 *         self.genpT_branch = the_tree.GetBranch("genpT")             # <<<<<<<<<<<<<<
 *         #if not self.genpT_branch and "genpT" not in self.complained:
 *         if not self.genpT_branch and "genpT":
 */
  __pyx_v_self->genpT_branch = __pyx_v_the_tree->GetBranch(((char *)"genpT"));

  /* "EMTree.pyx":778
 *         self.genpT_branch = the_tree.GetBranch("genpT")
 *         #if not self.genpT_branch and "genpT" not in self.complained:
 *         if not self.genpT_branch and "genpT":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpT does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpT")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genpT_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":779
 *         #if not self.genpT_branch and "genpT" not in self.complained:
 *         if not self.genpT_branch and "genpT":
 *             warnings.warn( "EMTree: Expected branch genpT does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpT")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":778
 *         self.genpT_branch = the_tree.GetBranch("genpT")
 *         #if not self.genpT_branch and "genpT" not in self.complained:
 *         if not self.genpT_branch and "genpT":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpT does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpT")
 */
    goto __pyx_L21;
  }

  /* "EMTree.pyx":782
 *             #self.complained.add("genpT")
 *         else:
 *             self.genpT_branch.SetAddress(<void*>&self.genpT_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making vispX"
 */
  /*else*/ {
    __pyx_v_self->genpT_branch->SetAddress(((void *)(&__pyx_v_self->genpT_value)));
  }
  __pyx_L21:;

  /* "EMTree.pyx":785
 * 
 *         #print "making vispX"
 *         self.vispX_branch = the_tree.GetBranch("vispX")             # <<<<<<<<<<<<<<
 *         #if not self.vispX_branch and "vispX" not in self.complained:
 *         if not self.vispX_branch and "vispX":
 */
  __pyx_v_self->vispX_branch = __pyx_v_the_tree->GetBranch(((char *)"vispX"));

  /* "EMTree.pyx":787
 *         self.vispX_branch = the_tree.GetBranch("vispX")
 *         #if not self.vispX_branch and "vispX" not in self.complained:
 *         if not self.vispX_branch and "vispX":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch vispX does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("vispX")
 */
  __pyx_t_2 = ((!(__pyx_v_self->vispX_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L25_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L25_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":788
 *         #if not self.vispX_branch and "vispX" not in self.complained:
 *         if not self.vispX_branch and "vispX":
 *             warnings.warn( "EMTree: Expected branch vispX does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("vispX")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":787
 *         self.vispX_branch = the_tree.GetBranch("vispX")
 *         #if not self.vispX_branch and "vispX" not in self.complained:
 *         if not self.vispX_branch and "vispX":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch vispX does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("vispX")
 */
    goto __pyx_L24;
  }

  /* "EMTree.pyx":791
 *             #self.complained.add("vispX")
 *         else:
 *             self.vispX_branch.SetAddress(<void*>&self.vispX_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making vispY"
 */
  /*else*/ {
    __pyx_v_self->vispX_branch->SetAddress(((void *)(&__pyx_v_self->vispX_value)));
  }
  __pyx_L24:;

  /* "EMTree.pyx":794
 * 
 *         #print "making vispY"
 *         self.vispY_branch = the_tree.GetBranch("vispY")             # <<<<<<<<<<<<<<
 *         #if not self.vispY_branch and "vispY" not in self.complained:
 *         if not self.vispY_branch and "vispY":
 */
  __pyx_v_self->vispY_branch = __pyx_v_the_tree->GetBranch(((char *)"vispY"));

  /* "EMTree.pyx":796
 *         self.vispY_branch = the_tree.GetBranch("vispY")
 *         #if not self.vispY_branch and "vispY" not in self.complained:
 *         if not self.vispY_branch and "vispY":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch vispY does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("vispY")
 */
  __pyx_t_2 = ((!(__pyx_v_self->vispY_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L28_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L28_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":797
 *         #if not self.vispY_branch and "vispY" not in self.complained:
 *         if not self.vispY_branch and "vispY":
 *             warnings.warn( "EMTree: Expected branch vispY does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("vispY")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":796
 *         self.vispY_branch = the_tree.GetBranch("vispY")
 *         #if not self.vispY_branch and "vispY" not in self.complained:
 *         if not self.vispY_branch and "vispY":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch vispY does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("vispY")
 */
    goto __pyx_L27;
  }

  /* "EMTree.pyx":800
 *             #self.complained.add("vispY")
 *         else:
 *             self.vispY_branch.SetAddress(<void*>&self.vispY_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genpt_1"
 */
  /*else*/ {
    __pyx_v_self->vispY_branch->SetAddress(((void *)(&__pyx_v_self->vispY_value)));
  }
  __pyx_L27:;

  /* "EMTree.pyx":803
 * 
 *         #print "making genpt_1"
 *         self.genpt_1_branch = the_tree.GetBranch("genpt_1")             # <<<<<<<<<<<<<<
 *         #if not self.genpt_1_branch and "genpt_1" not in self.complained:
 *         if not self.genpt_1_branch and "genpt_1":
 */
  __pyx_v_self->genpt_1_branch = __pyx_v_the_tree->GetBranch(((char *)"genpt_1"));

  /* "EMTree.pyx":805
 *         self.genpt_1_branch = the_tree.GetBranch("genpt_1")
 *         #if not self.genpt_1_branch and "genpt_1" not in self.complained:
 *         if not self.genpt_1_branch and "genpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpt_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genpt_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L31_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L31_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":806
 *         #if not self.genpt_1_branch and "genpt_1" not in self.complained:
 *         if not self.genpt_1_branch and "genpt_1":
 *             warnings.warn( "EMTree: Expected branch genpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpt_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":805
 *         self.genpt_1_branch = the_tree.GetBranch("genpt_1")
 *         #if not self.genpt_1_branch and "genpt_1" not in self.complained:
 *         if not self.genpt_1_branch and "genpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpt_1")
 */
    goto __pyx_L30;
  }

  /* "EMTree.pyx":809
 *             #self.complained.add("genpt_1")
 *         else:
 *             self.genpt_1_branch.SetAddress(<void*>&self.genpt_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making geneta_1"
 */
  /*else*/ {
    __pyx_v_self->genpt_1_branch->SetAddress(((void *)(&__pyx_v_self->genpt_1_value)));
  }
  __pyx_L30:;

  /* "EMTree.pyx":812
 * 
 *         #print "making geneta_1"
 *         self.geneta_1_branch = the_tree.GetBranch("geneta_1")             # <<<<<<<<<<<<<<
 *         #if not self.geneta_1_branch and "geneta_1" not in self.complained:
 *         if not self.geneta_1_branch and "geneta_1":
 */
  __pyx_v_self->geneta_1_branch = __pyx_v_the_tree->GetBranch(((char *)"geneta_1"));

  /* "EMTree.pyx":814
 *         self.geneta_1_branch = the_tree.GetBranch("geneta_1")
 *         #if not self.geneta_1_branch and "geneta_1" not in self.complained:
 *         if not self.geneta_1_branch and "geneta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch geneta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("geneta_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->geneta_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L34_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L34_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":815
 *         #if not self.geneta_1_branch and "geneta_1" not in self.complained:
 *         if not self.geneta_1_branch and "geneta_1":
 *             warnings.warn( "EMTree: Expected branch geneta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("geneta_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":814
 *         self.geneta_1_branch = the_tree.GetBranch("geneta_1")
 *         #if not self.geneta_1_branch and "geneta_1" not in self.complained:
 *         if not self.geneta_1_branch and "geneta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch geneta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("geneta_1")
 */
    goto __pyx_L33;
  }

  /* "EMTree.pyx":818
 *             #self.complained.add("geneta_1")
 *         else:
 *             self.geneta_1_branch.SetAddress(<void*>&self.geneta_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genpt_2"
 */
  /*else*/ {
    __pyx_v_self->geneta_1_branch->SetAddress(((void *)(&__pyx_v_self->geneta_1_value)));
  }
  __pyx_L33:;

  /* "EMTree.pyx":821
 * 
 *         #print "making genpt_2"
 *         self.genpt_2_branch = the_tree.GetBranch("genpt_2")             # <<<<<<<<<<<<<<
 *         #if not self.genpt_2_branch and "genpt_2" not in self.complained:
 *         if not self.genpt_2_branch and "genpt_2":
 */
  __pyx_v_self->genpt_2_branch = __pyx_v_the_tree->GetBranch(((char *)"genpt_2"));

  /* "EMTree.pyx":823
 *         self.genpt_2_branch = the_tree.GetBranch("genpt_2")
 *         #if not self.genpt_2_branch and "genpt_2" not in self.complained:
 *         if not self.genpt_2_branch and "genpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpt_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genpt_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L37_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L37_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":824
 *         #if not self.genpt_2_branch and "genpt_2" not in self.complained:
 *         if not self.genpt_2_branch and "genpt_2":
 *             warnings.warn( "EMTree: Expected branch genpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpt_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":823
 *         self.genpt_2_branch = the_tree.GetBranch("genpt_2")
 *         #if not self.genpt_2_branch and "genpt_2" not in self.complained:
 *         if not self.genpt_2_branch and "genpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genpt_2")
 */
    goto __pyx_L36;
  }

  /* "EMTree.pyx":827
 *             #self.complained.add("genpt_2")
 *         else:
 *             self.genpt_2_branch.SetAddress(<void*>&self.genpt_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making geneta_2"
 */
  /*else*/ {
    __pyx_v_self->genpt_2_branch->SetAddress(((void *)(&__pyx_v_self->genpt_2_value)));
  }
  __pyx_L36:;

  /* "EMTree.pyx":830
 * 
 *         #print "making geneta_2"
 *         self.geneta_2_branch = the_tree.GetBranch("geneta_2")             # <<<<<<<<<<<<<<
 *         #if not self.geneta_2_branch and "geneta_2" not in self.complained:
 *         if not self.geneta_2_branch and "geneta_2":
 */
  __pyx_v_self->geneta_2_branch = __pyx_v_the_tree->GetBranch(((char *)"geneta_2"));

  /* "EMTree.pyx":832
 *         self.geneta_2_branch = the_tree.GetBranch("geneta_2")
 *         #if not self.geneta_2_branch and "geneta_2" not in self.complained:
 *         if not self.geneta_2_branch and "geneta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch geneta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("geneta_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->geneta_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L40_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":833
 *         #if not self.geneta_2_branch and "geneta_2" not in self.complained:
 *         if not self.geneta_2_branch and "geneta_2":
 *             warnings.warn( "EMTree: Expected branch geneta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("geneta_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":832
 *         self.geneta_2_branch = the_tree.GetBranch("geneta_2")
 *         #if not self.geneta_2_branch and "geneta_2" not in self.complained:
 *         if not self.geneta_2_branch and "geneta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch geneta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("geneta_2")
 */
    goto __pyx_L39;
  }

  /* "EMTree.pyx":836
 *             #self.complained.add("geneta_2")
 *         else:
 *             self.geneta_2_branch.SetAddress(<void*>&self.geneta_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_VEta"
 */
  /*else*/ {
    __pyx_v_self->geneta_2_branch->SetAddress(((void *)(&__pyx_v_self->geneta_2_value)));
  }
  __pyx_L39:;

  /* "EMTree.pyx":839
 * 
 *         #print "making Rivet_VEta"
 *         self.Rivet_VEta_branch = the_tree.GetBranch("Rivet_VEta")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_VEta_branch and "Rivet_VEta" not in self.complained:
 *         if not self.Rivet_VEta_branch and "Rivet_VEta":
 */
  __pyx_v_self->Rivet_VEta_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_VEta"));

  /* "EMTree.pyx":841
 *         self.Rivet_VEta_branch = the_tree.GetBranch("Rivet_VEta")
 *         #if not self.Rivet_VEta_branch and "Rivet_VEta" not in self.complained:
 *         if not self.Rivet_VEta_branch and "Rivet_VEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_VEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_VEta")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_VEta_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L43_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L43_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":842
 *         #if not self.Rivet_VEta_branch and "Rivet_VEta" not in self.complained:
 *         if not self.Rivet_VEta_branch and "Rivet_VEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_VEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_VEta")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":841
 *         self.Rivet_VEta_branch = the_tree.GetBranch("Rivet_VEta")
 *         #if not self.Rivet_VEta_branch and "Rivet_VEta" not in self.complained:
 *         if not self.Rivet_VEta_branch and "Rivet_VEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_VEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_VEta")
 */
    goto __pyx_L42;
  }

  /* "EMTree.pyx":845
 *             #self.complained.add("Rivet_VEta")
 *         else:
 *             self.Rivet_VEta_branch.SetAddress(<void*>&self.Rivet_VEta_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_VPt"
 */
  /*else*/ {
    __pyx_v_self->Rivet_VEta_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_VEta_value)));
  }
  __pyx_L42:;

  /* "EMTree.pyx":848
 * 
 *         #print "making Rivet_VPt"
 *         self.Rivet_VPt_branch = the_tree.GetBranch("Rivet_VPt")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_VPt_branch and "Rivet_VPt" not in self.complained:
 *         if not self.Rivet_VPt_branch and "Rivet_VPt":
 */
  __pyx_v_self->Rivet_VPt_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_VPt"));

  /* "EMTree.pyx":850
 *         self.Rivet_VPt_branch = the_tree.GetBranch("Rivet_VPt")
 *         #if not self.Rivet_VPt_branch and "Rivet_VPt" not in self.complained:
 *         if not self.Rivet_VPt_branch and "Rivet_VPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_VPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_VPt")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_VPt_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L46_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L46_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":851
 *         #if not self.Rivet_VPt_branch and "Rivet_VPt" not in self.complained:
 *         if not self.Rivet_VPt_branch and "Rivet_VPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_VPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_VPt")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":850
 *         self.Rivet_VPt_branch = the_tree.GetBranch("Rivet_VPt")
 *         #if not self.Rivet_VPt_branch and "Rivet_VPt" not in self.complained:
 *         if not self.Rivet_VPt_branch and "Rivet_VPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_VPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_VPt")
 */
    goto __pyx_L45;
  }

  /* "EMTree.pyx":854
 *             #self.complained.add("Rivet_VPt")
 *         else:
 *             self.Rivet_VPt_branch.SetAddress(<void*>&self.Rivet_VPt_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_errorCode"
 */
  /*else*/ {
    __pyx_v_self->Rivet_VPt_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_VPt_value)));
  }
  __pyx_L45:;

  /* "EMTree.pyx":857
 * 
 *         #print "making Rivet_errorCode"
 *         self.Rivet_errorCode_branch = the_tree.GetBranch("Rivet_errorCode")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_errorCode_branch and "Rivet_errorCode" not in self.complained:
 *         if not self.Rivet_errorCode_branch and "Rivet_errorCode":
 */
  __pyx_v_self->Rivet_errorCode_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_errorCode"));

  /* "EMTree.pyx":859
 *         self.Rivet_errorCode_branch = the_tree.GetBranch("Rivet_errorCode")
 *         #if not self.Rivet_errorCode_branch and "Rivet_errorCode" not in self.complained:
 *         if not self.Rivet_errorCode_branch and "Rivet_errorCode":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_errorCode does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_errorCode")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_errorCode_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L49_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L49_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":860
 *         #if not self.Rivet_errorCode_branch and "Rivet_errorCode" not in self.complained:
 *         if not self.Rivet_errorCode_branch and "Rivet_errorCode":
 *             warnings.warn( "EMTree: Expected branch Rivet_errorCode does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_errorCode")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":859
 *         self.Rivet_errorCode_branch = the_tree.GetBranch("Rivet_errorCode")
 *         #if not self.Rivet_errorCode_branch and "Rivet_errorCode" not in self.complained:
 *         if not self.Rivet_errorCode_branch and "Rivet_errorCode":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_errorCode does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_errorCode")
 */
    goto __pyx_L48;
  }

  /* "EMTree.pyx":863
 *             #self.complained.add("Rivet_errorCode")
 *         else:
 *             self.Rivet_errorCode_branch.SetAddress(<void*>&self.Rivet_errorCode_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_higgsEta"
 */
  /*else*/ {
    __pyx_v_self->Rivet_errorCode_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_errorCode_value)));
  }
  __pyx_L48:;

  /* "EMTree.pyx":866
 * 
 *         #print "making Rivet_higgsEta"
 *         self.Rivet_higgsEta_branch = the_tree.GetBranch("Rivet_higgsEta")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_higgsEta_branch and "Rivet_higgsEta" not in self.complained:
 *         if not self.Rivet_higgsEta_branch and "Rivet_higgsEta":
 */
  __pyx_v_self->Rivet_higgsEta_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_higgsEta"));

  /* "EMTree.pyx":868
 *         self.Rivet_higgsEta_branch = the_tree.GetBranch("Rivet_higgsEta")
 *         #if not self.Rivet_higgsEta_branch and "Rivet_higgsEta" not in self.complained:
 *         if not self.Rivet_higgsEta_branch and "Rivet_higgsEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_higgsEta")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_higgsEta_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L52_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L52_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":869
 *         #if not self.Rivet_higgsEta_branch and "Rivet_higgsEta" not in self.complained:
 *         if not self.Rivet_higgsEta_branch and "Rivet_higgsEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_higgsEta")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 869, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":868
 *         self.Rivet_higgsEta_branch = the_tree.GetBranch("Rivet_higgsEta")
 *         #if not self.Rivet_higgsEta_branch and "Rivet_higgsEta" not in self.complained:
 *         if not self.Rivet_higgsEta_branch and "Rivet_higgsEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_higgsEta")
 */
    goto __pyx_L51;
  }

  /* "EMTree.pyx":872
 *             #self.complained.add("Rivet_higgsEta")
 *         else:
 *             self.Rivet_higgsEta_branch.SetAddress(<void*>&self.Rivet_higgsEta_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_higgsPt"
 */
  /*else*/ {
    __pyx_v_self->Rivet_higgsEta_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_higgsEta_value)));
  }
  __pyx_L51:;

  /* "EMTree.pyx":875
 * 
 *         #print "making Rivet_higgsPt"
 *         self.Rivet_higgsPt_branch = the_tree.GetBranch("Rivet_higgsPt")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_higgsPt_branch and "Rivet_higgsPt" not in self.complained:
 *         if not self.Rivet_higgsPt_branch and "Rivet_higgsPt":
 */
  __pyx_v_self->Rivet_higgsPt_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_higgsPt"));

  /* "EMTree.pyx":877
 *         self.Rivet_higgsPt_branch = the_tree.GetBranch("Rivet_higgsPt")
 *         #if not self.Rivet_higgsPt_branch and "Rivet_higgsPt" not in self.complained:
 *         if not self.Rivet_higgsPt_branch and "Rivet_higgsPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_higgsPt")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_higgsPt_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L55_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L55_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":878
 *         #if not self.Rivet_higgsPt_branch and "Rivet_higgsPt" not in self.complained:
 *         if not self.Rivet_higgsPt_branch and "Rivet_higgsPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_higgsPt")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":877
 *         self.Rivet_higgsPt_branch = the_tree.GetBranch("Rivet_higgsPt")
 *         #if not self.Rivet_higgsPt_branch and "Rivet_higgsPt" not in self.complained:
 *         if not self.Rivet_higgsPt_branch and "Rivet_higgsPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_higgsPt")
 */
    goto __pyx_L54;
  }

  /* "EMTree.pyx":881
 *             #self.complained.add("Rivet_higgsPt")
 *         else:
 *             self.Rivet_higgsPt_branch.SetAddress(<void*>&self.Rivet_higgsPt_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_nJets25"
 */
  /*else*/ {
    __pyx_v_self->Rivet_higgsPt_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_higgsPt_value)));
  }
  __pyx_L54:;

  /* "EMTree.pyx":884
 * 
 *         #print "making Rivet_nJets25"
 *         self.Rivet_nJets25_branch = the_tree.GetBranch("Rivet_nJets25")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_nJets25_branch and "Rivet_nJets25" not in self.complained:
 *         if not self.Rivet_nJets25_branch and "Rivet_nJets25":
 */
  __pyx_v_self->Rivet_nJets25_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_nJets25"));

  /* "EMTree.pyx":886
 *         self.Rivet_nJets25_branch = the_tree.GetBranch("Rivet_nJets25")
 *         #if not self.Rivet_nJets25_branch and "Rivet_nJets25" not in self.complained:
 *         if not self.Rivet_nJets25_branch and "Rivet_nJets25":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets25 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_nJets25")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_nJets25_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L58_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L58_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":887
 *         #if not self.Rivet_nJets25_branch and "Rivet_nJets25" not in self.complained:
 *         if not self.Rivet_nJets25_branch and "Rivet_nJets25":
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets25 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_nJets25")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":886
 *         self.Rivet_nJets25_branch = the_tree.GetBranch("Rivet_nJets25")
 *         #if not self.Rivet_nJets25_branch and "Rivet_nJets25" not in self.complained:
 *         if not self.Rivet_nJets25_branch and "Rivet_nJets25":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets25 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_nJets25")
 */
    goto __pyx_L57;
  }

  /* "EMTree.pyx":890
 *             #self.complained.add("Rivet_nJets25")
 *         else:
 *             self.Rivet_nJets25_branch.SetAddress(<void*>&self.Rivet_nJets25_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_nJets30"
 */
  /*else*/ {
    __pyx_v_self->Rivet_nJets25_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_nJets25_value)));
  }
  __pyx_L57:;

  /* "EMTree.pyx":893
 * 
 *         #print "making Rivet_nJets30"
 *         self.Rivet_nJets30_branch = the_tree.GetBranch("Rivet_nJets30")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_nJets30_branch and "Rivet_nJets30" not in self.complained:
 *         if not self.Rivet_nJets30_branch and "Rivet_nJets30":
 */
  __pyx_v_self->Rivet_nJets30_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_nJets30"));

  /* "EMTree.pyx":895
 *         self.Rivet_nJets30_branch = the_tree.GetBranch("Rivet_nJets30")
 *         #if not self.Rivet_nJets30_branch and "Rivet_nJets30" not in self.complained:
 *         if not self.Rivet_nJets30_branch and "Rivet_nJets30":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets30 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_nJets30")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_nJets30_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L61_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L61_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":896
 *         #if not self.Rivet_nJets30_branch and "Rivet_nJets30" not in self.complained:
 *         if not self.Rivet_nJets30_branch and "Rivet_nJets30":
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets30 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_nJets30")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 896, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":895
 *         self.Rivet_nJets30_branch = the_tree.GetBranch("Rivet_nJets30")
 *         #if not self.Rivet_nJets30_branch and "Rivet_nJets30" not in self.complained:
 *         if not self.Rivet_nJets30_branch and "Rivet_nJets30":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets30 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_nJets30")
 */
    goto __pyx_L60;
  }

  /* "EMTree.pyx":899
 *             #self.complained.add("Rivet_nJets30")
 *         else:
 *             self.Rivet_nJets30_branch.SetAddress(<void*>&self.Rivet_nJets30_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_p4decay_VEta"
 */
  /*else*/ {
    __pyx_v_self->Rivet_nJets30_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_nJets30_value)));
  }
  __pyx_L60:;

  /* "EMTree.pyx":902
 * 
 *         #print "making Rivet_p4decay_VEta"
 *         self.Rivet_p4decay_VEta_branch = the_tree.GetBranch("Rivet_p4decay_VEta")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta" not in self.complained:
 *         if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta":
 */
  __pyx_v_self->Rivet_p4decay_VEta_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_p4decay_VEta"));

  /* "EMTree.pyx":904
 *         self.Rivet_p4decay_VEta_branch = the_tree.GetBranch("Rivet_p4decay_VEta")
 *         #if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta" not in self.complained:
 *         if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_p4decay_VEta")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_p4decay_VEta_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L64_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L64_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":905
 *         #if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta" not in self.complained:
 *         if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_p4decay_VEta")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":904
 *         self.Rivet_p4decay_VEta_branch = the_tree.GetBranch("Rivet_p4decay_VEta")
 *         #if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta" not in self.complained:
 *         if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VEta does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_p4decay_VEta")
 */
    goto __pyx_L63;
  }

  /* "EMTree.pyx":908
 *             #self.complained.add("Rivet_p4decay_VEta")
 *         else:
 *             self.Rivet_p4decay_VEta_branch.SetAddress(<void*>&self.Rivet_p4decay_VEta_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_p4decay_VPt"
 */
  /*else*/ {
    __pyx_v_self->Rivet_p4decay_VEta_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_p4decay_VEta_value)));
  }
  __pyx_L63:;

  /* "EMTree.pyx":911
 * 
 *         #print "making Rivet_p4decay_VPt"
 *         self.Rivet_p4decay_VPt_branch = the_tree.GetBranch("Rivet_p4decay_VPt")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt" not in self.complained:
 *         if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt":
 */
  __pyx_v_self->Rivet_p4decay_VPt_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_p4decay_VPt"));

  /* "EMTree.pyx":913
 *         self.Rivet_p4decay_VPt_branch = the_tree.GetBranch("Rivet_p4decay_VPt")
 *         #if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt" not in self.complained:
 *         if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_p4decay_VPt")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_p4decay_VPt_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L67_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L67_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":914
 *         #if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt" not in self.complained:
 *         if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_p4decay_VPt")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":913
 *         self.Rivet_p4decay_VPt_branch = the_tree.GetBranch("Rivet_p4decay_VPt")
 *         #if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt" not in self.complained:
 *         if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VPt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_p4decay_VPt")
 */
    goto __pyx_L66;
  }

  /* "EMTree.pyx":917
 *             #self.complained.add("Rivet_p4decay_VPt")
 *         else:
 *             self.Rivet_p4decay_VPt_branch.SetAddress(<void*>&self.Rivet_p4decay_VPt_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_prodMode"
 */
  /*else*/ {
    __pyx_v_self->Rivet_p4decay_VPt_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_p4decay_VPt_value)));
  }
  __pyx_L66:;

  /* "EMTree.pyx":920
 * 
 *         #print "making Rivet_prodMode"
 *         self.Rivet_prodMode_branch = the_tree.GetBranch("Rivet_prodMode")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_prodMode_branch and "Rivet_prodMode" not in self.complained:
 *         if not self.Rivet_prodMode_branch and "Rivet_prodMode":
 */
  __pyx_v_self->Rivet_prodMode_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_prodMode"));

  /* "EMTree.pyx":922
 *         self.Rivet_prodMode_branch = the_tree.GetBranch("Rivet_prodMode")
 *         #if not self.Rivet_prodMode_branch and "Rivet_prodMode" not in self.complained:
 *         if not self.Rivet_prodMode_branch and "Rivet_prodMode":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_prodMode does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_prodMode")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_prodMode_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L70_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L70_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":923
 *         #if not self.Rivet_prodMode_branch and "Rivet_prodMode" not in self.complained:
 *         if not self.Rivet_prodMode_branch and "Rivet_prodMode":
 *             warnings.warn( "EMTree: Expected branch Rivet_prodMode does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_prodMode")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":922
 *         self.Rivet_prodMode_branch = the_tree.GetBranch("Rivet_prodMode")
 *         #if not self.Rivet_prodMode_branch and "Rivet_prodMode" not in self.complained:
 *         if not self.Rivet_prodMode_branch and "Rivet_prodMode":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_prodMode does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_prodMode")
 */
    goto __pyx_L69;
  }

  /* "EMTree.pyx":926
 *             #self.complained.add("Rivet_prodMode")
 *         else:
 *             self.Rivet_prodMode_branch.SetAddress(<void*>&self.Rivet_prodMode_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_stage0_cat"
 */
  /*else*/ {
    __pyx_v_self->Rivet_prodMode_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_prodMode_value)));
  }
  __pyx_L69:;

  /* "EMTree.pyx":929
 * 
 *         #print "making Rivet_stage0_cat"
 *         self.Rivet_stage0_cat_branch = the_tree.GetBranch("Rivet_stage0_cat")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat" not in self.complained:
 *         if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat":
 */
  __pyx_v_self->Rivet_stage0_cat_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_stage0_cat"));

  /* "EMTree.pyx":931
 *         self.Rivet_stage0_cat_branch = the_tree.GetBranch("Rivet_stage0_cat")
 *         #if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat" not in self.complained:
 *         if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage0_cat does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage0_cat")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_stage0_cat_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L73_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L73_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":932
 *         #if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat" not in self.complained:
 *         if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage0_cat does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage0_cat")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":931
 *         self.Rivet_stage0_cat_branch = the_tree.GetBranch("Rivet_stage0_cat")
 *         #if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat" not in self.complained:
 *         if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage0_cat does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage0_cat")
 */
    goto __pyx_L72;
  }

  /* "EMTree.pyx":935
 *             #self.complained.add("Rivet_stage0_cat")
 *         else:
 *             self.Rivet_stage0_cat_branch.SetAddress(<void*>&self.Rivet_stage0_cat_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_stage1_1_fine_cat_pTjet30GeV"
 */
  /*else*/ {
    __pyx_v_self->Rivet_stage0_cat_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_stage0_cat_value)));
  }
  __pyx_L72:;

  /* "EMTree.pyx":938
 * 
 *         #print "making Rivet_stage1_1_fine_cat_pTjet30GeV"
 *         self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_fine_cat_pTjet30GeV")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV":
 */
  __pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_stage1_1_fine_cat_pTjet30GeV"));

  /* "EMTree.pyx":940
 *         self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_fine_cat_pTjet30GeV")
 *         #if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_fine_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage1_1_fine_cat_pTjet30GeV")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L76_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L76_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":941
 *         #if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_fine_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage1_1_fine_cat_pTjet30GeV")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":940
 *         self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_fine_cat_pTjet30GeV")
 *         #if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_fine_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage1_1_fine_cat_pTjet30GeV")
 */
    goto __pyx_L75;
  }

  /* "EMTree.pyx":944
 *             #self.complained.add("Rivet_stage1_1_fine_cat_pTjet30GeV")
 *         else:
 *             self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch.SetAddress(<void*>&self.Rivet_stage1_1_fine_cat_pTjet30GeV_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Rivet_stage1_1_cat_pTjet30GeV"
 */
  /*else*/ {
    __pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_value)));
  }
  __pyx_L75:;

  /* "EMTree.pyx":947
 * 
 *         #print "making Rivet_stage1_1_cat_pTjet30GeV"
 *         self.Rivet_stage1_1_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_cat_pTjet30GeV")             # <<<<<<<<<<<<<<
 *         #if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV":
 */
  __pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_branch = __pyx_v_the_tree->GetBranch(((char *)"Rivet_stage1_1_cat_pTjet30GeV"));

  /* "EMTree.pyx":949
 *         self.Rivet_stage1_1_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_cat_pTjet30GeV")
 *         #if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage1_1_cat_pTjet30GeV")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L79_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L79_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":950
 *         #if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage1_1_cat_pTjet30GeV")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":949
 *         self.Rivet_stage1_1_cat_pTjet30GeV_branch = the_tree.GetBranch("Rivet_stage1_1_cat_pTjet30GeV")
 *         #if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Rivet_stage1_1_cat_pTjet30GeV")
 */
    goto __pyx_L78;
  }

  /* "EMTree.pyx":953
 *             #self.complained.add("Rivet_stage1_1_cat_pTjet30GeV")
 *         else:
 *             self.Rivet_stage1_1_cat_pTjet30GeV_branch.SetAddress(<void*>&self.Rivet_stage1_1_cat_pTjet30GeV_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making npv"
 */
  /*else*/ {
    __pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_branch->SetAddress(((void *)(&__pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_value)));
  }
  __pyx_L78:;

  /* "EMTree.pyx":956
 * 
 *         #print "making npv"
 *         self.npv_branch = the_tree.GetBranch("npv")             # <<<<<<<<<<<<<<
 *         #if not self.npv_branch and "npv" not in self.complained:
 *         if not self.npv_branch and "npv":
 */
  __pyx_v_self->npv_branch = __pyx_v_the_tree->GetBranch(((char *)"npv"));

  /* "EMTree.pyx":958
 *         self.npv_branch = the_tree.GetBranch("npv")
 *         #if not self.npv_branch and "npv" not in self.complained:
 *         if not self.npv_branch and "npv":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch npv does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("npv")
 */
  __pyx_t_2 = ((!(__pyx_v_self->npv_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L82_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L82_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":959
 *         #if not self.npv_branch and "npv" not in self.complained:
 *         if not self.npv_branch and "npv":
 *             warnings.warn( "EMTree: Expected branch npv does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("npv")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":958
 *         self.npv_branch = the_tree.GetBranch("npv")
 *         #if not self.npv_branch and "npv" not in self.complained:
 *         if not self.npv_branch and "npv":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch npv does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("npv")
 */
    goto __pyx_L81;
  }

  /* "EMTree.pyx":962
 *             #self.complained.add("npv")
 *         else:
 *             self.npv_branch.SetAddress(<void*>&self.npv_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making npu"
 */
  /*else*/ {
    __pyx_v_self->npv_branch->SetAddress(((void *)(&__pyx_v_self->npv_value)));
  }
  __pyx_L81:;

  /* "EMTree.pyx":965
 * 
 *         #print "making npu"
 *         self.npu_branch = the_tree.GetBranch("npu")             # <<<<<<<<<<<<<<
 *         #if not self.npu_branch and "npu" not in self.complained:
 *         if not self.npu_branch and "npu":
 */
  __pyx_v_self->npu_branch = __pyx_v_the_tree->GetBranch(((char *)"npu"));

  /* "EMTree.pyx":967
 *         self.npu_branch = the_tree.GetBranch("npu")
 *         #if not self.npu_branch and "npu" not in self.complained:
 *         if not self.npu_branch and "npu":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch npu does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("npu")
 */
  __pyx_t_2 = ((!(__pyx_v_self->npu_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L85_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L85_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":968
 *         #if not self.npu_branch and "npu" not in self.complained:
 *         if not self.npu_branch and "npu":
 *             warnings.warn( "EMTree: Expected branch npu does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("npu")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":967
 *         self.npu_branch = the_tree.GetBranch("npu")
 *         #if not self.npu_branch and "npu" not in self.complained:
 *         if not self.npu_branch and "npu":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch npu does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("npu")
 */
    goto __pyx_L84;
  }

  /* "EMTree.pyx":971
 *             #self.complained.add("npu")
 *         else:
 *             self.npu_branch.SetAddress(<void*>&self.npu_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_1_ScaleUp"
 */
  /*else*/ {
    __pyx_v_self->npu_branch->SetAddress(((void *)(&__pyx_v_self->npu_value)));
  }
  __pyx_L84:;

  /* "EMTree.pyx":974
 * 
 *         #print "making pt_1_ScaleUp"
 *         self.pt_1_ScaleUp_branch = the_tree.GetBranch("pt_1_ScaleUp")             # <<<<<<<<<<<<<<
 *         #if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp" not in self.complained:
 *         if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp":
 */
  __pyx_v_self->pt_1_ScaleUp_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_1_ScaleUp"));

  /* "EMTree.pyx":976
 *         self.pt_1_ScaleUp_branch = the_tree.GetBranch("pt_1_ScaleUp")
 *         #if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp" not in self.complained:
 *         if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1_ScaleUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_1_ScaleUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L88_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L88_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":977
 *         #if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp" not in self.complained:
 *         if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp":
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1_ScaleUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":976
 *         self.pt_1_ScaleUp_branch = the_tree.GetBranch("pt_1_ScaleUp")
 *         #if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp" not in self.complained:
 *         if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1_ScaleUp")
 */
    goto __pyx_L87;
  }

  /* "EMTree.pyx":980
 *             #self.complained.add("pt_1_ScaleUp")
 *         else:
 *             self.pt_1_ScaleUp_branch.SetAddress(<void*>&self.pt_1_ScaleUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_1_ScaleDown"
 */
  /*else*/ {
    __pyx_v_self->pt_1_ScaleUp_branch->SetAddress(((void *)(&__pyx_v_self->pt_1_ScaleUp_value)));
  }
  __pyx_L87:;

  /* "EMTree.pyx":983
 * 
 *         #print "making pt_1_ScaleDown"
 *         self.pt_1_ScaleDown_branch = the_tree.GetBranch("pt_1_ScaleDown")             # <<<<<<<<<<<<<<
 *         #if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown" not in self.complained:
 *         if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown":
 */
  __pyx_v_self->pt_1_ScaleDown_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_1_ScaleDown"));

  /* "EMTree.pyx":985
 *         self.pt_1_ScaleDown_branch = the_tree.GetBranch("pt_1_ScaleDown")
 *         #if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown" not in self.complained:
 *         if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1_ScaleDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_1_ScaleDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L91_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L91_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":986
 *         #if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown" not in self.complained:
 *         if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown":
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1_ScaleDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":985
 *         self.pt_1_ScaleDown_branch = the_tree.GetBranch("pt_1_ScaleDown")
 *         #if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown" not in self.complained:
 *         if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1_ScaleDown")
 */
    goto __pyx_L90;
  }

  /* "EMTree.pyx":989
 *             #self.complained.add("pt_1_ScaleDown")
 *         else:
 *             self.pt_1_ScaleDown_branch.SetAddress(<void*>&self.pt_1_ScaleDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_1"
 */
  /*else*/ {
    __pyx_v_self->pt_1_ScaleDown_branch->SetAddress(((void *)(&__pyx_v_self->pt_1_ScaleDown_value)));
  }
  __pyx_L90:;

  /* "EMTree.pyx":992
 * 
 *         #print "making pt_1"
 *         self.pt_1_branch = the_tree.GetBranch("pt_1")             # <<<<<<<<<<<<<<
 *         #if not self.pt_1_branch and "pt_1" not in self.complained:
 *         if not self.pt_1_branch and "pt_1":
 */
  __pyx_v_self->pt_1_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_1"));

  /* "EMTree.pyx":994
 *         self.pt_1_branch = the_tree.GetBranch("pt_1")
 *         #if not self.pt_1_branch and "pt_1" not in self.complained:
 *         if not self.pt_1_branch and "pt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L94_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L94_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":995
 *         #if not self.pt_1_branch and "pt_1" not in self.complained:
 *         if not self.pt_1_branch and "pt_1":
 *             warnings.warn( "EMTree: Expected branch pt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":994
 *         self.pt_1_branch = the_tree.GetBranch("pt_1")
 *         #if not self.pt_1_branch and "pt_1" not in self.complained:
 *         if not self.pt_1_branch and "pt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_1")
 */
    goto __pyx_L93;
  }

  /* "EMTree.pyx":998
 *             #self.complained.add("pt_1")
 *         else:
 *             self.pt_1_branch.SetAddress(<void*>&self.pt_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making phi_1"
 */
  /*else*/ {
    __pyx_v_self->pt_1_branch->SetAddress(((void *)(&__pyx_v_self->pt_1_value)));
  }
  __pyx_L93:;

  /* "EMTree.pyx":1001
 * 
 *         #print "making phi_1"
 *         self.phi_1_branch = the_tree.GetBranch("phi_1")             # <<<<<<<<<<<<<<
 *         #if not self.phi_1_branch and "phi_1" not in self.complained:
 *         if not self.phi_1_branch and "phi_1":
 */
  __pyx_v_self->phi_1_branch = __pyx_v_the_tree->GetBranch(((char *)"phi_1"));

  /* "EMTree.pyx":1003
 *         self.phi_1_branch = the_tree.GetBranch("phi_1")
 *         #if not self.phi_1_branch and "phi_1" not in self.complained:
 *         if not self.phi_1_branch and "phi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch phi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("phi_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->phi_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L97_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L97_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1004
 *         #if not self.phi_1_branch and "phi_1" not in self.complained:
 *         if not self.phi_1_branch and "phi_1":
 *             warnings.warn( "EMTree: Expected branch phi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("phi_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1004, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1003
 *         self.phi_1_branch = the_tree.GetBranch("phi_1")
 *         #if not self.phi_1_branch and "phi_1" not in self.complained:
 *         if not self.phi_1_branch and "phi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch phi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("phi_1")
 */
    goto __pyx_L96;
  }

  /* "EMTree.pyx":1007
 *             #self.complained.add("phi_1")
 *         else:
 *             self.phi_1_branch.SetAddress(<void*>&self.phi_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making eta_1"
 */
  /*else*/ {
    __pyx_v_self->phi_1_branch->SetAddress(((void *)(&__pyx_v_self->phi_1_value)));
  }
  __pyx_L96:;

  /* "EMTree.pyx":1010
 * 
 *         #print "making eta_1"
 *         self.eta_1_branch = the_tree.GetBranch("eta_1")             # <<<<<<<<<<<<<<
 *         #if not self.eta_1_branch and "eta_1" not in self.complained:
 *         if not self.eta_1_branch and "eta_1":
 */
  __pyx_v_self->eta_1_branch = __pyx_v_the_tree->GetBranch(((char *)"eta_1"));

  /* "EMTree.pyx":1012
 *         self.eta_1_branch = the_tree.GetBranch("eta_1")
 *         #if not self.eta_1_branch and "eta_1" not in self.complained:
 *         if not self.eta_1_branch and "eta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch eta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("eta_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->eta_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L100_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L100_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1013
 *         #if not self.eta_1_branch and "eta_1" not in self.complained:
 *         if not self.eta_1_branch and "eta_1":
 *             warnings.warn( "EMTree: Expected branch eta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("eta_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1012
 *         self.eta_1_branch = the_tree.GetBranch("eta_1")
 *         #if not self.eta_1_branch and "eta_1" not in self.complained:
 *         if not self.eta_1_branch and "eta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch eta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("eta_1")
 */
    goto __pyx_L99;
  }

  /* "EMTree.pyx":1016
 *             #self.complained.add("eta_1")
 *         else:
 *             self.eta_1_branch.SetAddress(<void*>&self.eta_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making m_1"
 */
  /*else*/ {
    __pyx_v_self->eta_1_branch->SetAddress(((void *)(&__pyx_v_self->eta_1_value)));
  }
  __pyx_L99:;

  /* "EMTree.pyx":1019
 * 
 *         #print "making m_1"
 *         self.m_1_branch = the_tree.GetBranch("m_1")             # <<<<<<<<<<<<<<
 *         #if not self.m_1_branch and "m_1" not in self.complained:
 *         if not self.m_1_branch and "m_1":
 */
  __pyx_v_self->m_1_branch = __pyx_v_the_tree->GetBranch(((char *)"m_1"));

  /* "EMTree.pyx":1021
 *         self.m_1_branch = the_tree.GetBranch("m_1")
 *         #if not self.m_1_branch and "m_1" not in self.complained:
 *         if not self.m_1_branch and "m_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch m_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("m_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->m_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L103_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L103_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1022
 *         #if not self.m_1_branch and "m_1" not in self.complained:
 *         if not self.m_1_branch and "m_1":
 *             warnings.warn( "EMTree: Expected branch m_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("m_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1021
 *         self.m_1_branch = the_tree.GetBranch("m_1")
 *         #if not self.m_1_branch and "m_1" not in self.complained:
 *         if not self.m_1_branch and "m_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch m_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("m_1")
 */
    goto __pyx_L102;
  }

  /* "EMTree.pyx":1025
 *             #self.complained.add("m_1")
 *         else:
 *             self.m_1_branch.SetAddress(<void*>&self.m_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making e_1"
 */
  /*else*/ {
    __pyx_v_self->m_1_branch->SetAddress(((void *)(&__pyx_v_self->m_1_value)));
  }
  __pyx_L102:;

  /* "EMTree.pyx":1028
 * 
 *         #print "making e_1"
 *         self.e_1_branch = the_tree.GetBranch("e_1")             # <<<<<<<<<<<<<<
 *         #if not self.e_1_branch and "e_1" not in self.complained:
 *         if not self.e_1_branch and "e_1":
 */
  __pyx_v_self->e_1_branch = __pyx_v_the_tree->GetBranch(((char *)"e_1"));

  /* "EMTree.pyx":1030
 *         self.e_1_branch = the_tree.GetBranch("e_1")
 *         #if not self.e_1_branch and "e_1" not in self.complained:
 *         if not self.e_1_branch and "e_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch e_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("e_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->e_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L106_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L106_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1031
 *         #if not self.e_1_branch and "e_1" not in self.complained:
 *         if not self.e_1_branch and "e_1":
 *             warnings.warn( "EMTree: Expected branch e_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("e_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1030
 *         self.e_1_branch = the_tree.GetBranch("e_1")
 *         #if not self.e_1_branch and "e_1" not in self.complained:
 *         if not self.e_1_branch and "e_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch e_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("e_1")
 */
    goto __pyx_L105;
  }

  /* "EMTree.pyx":1034
 *             #self.complained.add("e_1")
 *         else:
 *             self.e_1_branch.SetAddress(<void*>&self.e_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making q_1"
 */
  /*else*/ {
    __pyx_v_self->e_1_branch->SetAddress(((void *)(&__pyx_v_self->e_1_value)));
  }
  __pyx_L105:;

  /* "EMTree.pyx":1037
 * 
 *         #print "making q_1"
 *         self.q_1_branch = the_tree.GetBranch("q_1")             # <<<<<<<<<<<<<<
 *         #if not self.q_1_branch and "q_1" not in self.complained:
 *         if not self.q_1_branch and "q_1":
 */
  __pyx_v_self->q_1_branch = __pyx_v_the_tree->GetBranch(((char *)"q_1"));

  /* "EMTree.pyx":1039
 *         self.q_1_branch = the_tree.GetBranch("q_1")
 *         #if not self.q_1_branch and "q_1" not in self.complained:
 *         if not self.q_1_branch and "q_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch q_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("q_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->q_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L109_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L109_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1040
 *         #if not self.q_1_branch and "q_1" not in self.complained:
 *         if not self.q_1_branch and "q_1":
 *             warnings.warn( "EMTree: Expected branch q_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("q_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1039
 *         self.q_1_branch = the_tree.GetBranch("q_1")
 *         #if not self.q_1_branch and "q_1" not in self.complained:
 *         if not self.q_1_branch and "q_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch q_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("q_1")
 */
    goto __pyx_L108;
  }

  /* "EMTree.pyx":1043
 *             #self.complained.add("q_1")
 *         else:
 *             self.q_1_branch.SetAddress(<void*>&self.q_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making iso_1"
 */
  /*else*/ {
    __pyx_v_self->q_1_branch->SetAddress(((void *)(&__pyx_v_self->q_1_value)));
  }
  __pyx_L108:;

  /* "EMTree.pyx":1046
 * 
 *         #print "making iso_1"
 *         self.iso_1_branch = the_tree.GetBranch("iso_1")             # <<<<<<<<<<<<<<
 *         #if not self.iso_1_branch and "iso_1" not in self.complained:
 *         if not self.iso_1_branch and "iso_1":
 */
  __pyx_v_self->iso_1_branch = __pyx_v_the_tree->GetBranch(((char *)"iso_1"));

  /* "EMTree.pyx":1048
 *         self.iso_1_branch = the_tree.GetBranch("iso_1")
 *         #if not self.iso_1_branch and "iso_1" not in self.complained:
 *         if not self.iso_1_branch and "iso_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch iso_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("iso_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->iso_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L112_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L112_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1049
 *         #if not self.iso_1_branch and "iso_1" not in self.complained:
 *         if not self.iso_1_branch and "iso_1":
 *             warnings.warn( "EMTree: Expected branch iso_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("iso_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1048
 *         self.iso_1_branch = the_tree.GetBranch("iso_1")
 *         #if not self.iso_1_branch and "iso_1" not in self.complained:
 *         if not self.iso_1_branch and "iso_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch iso_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("iso_1")
 */
    goto __pyx_L111;
  }

  /* "EMTree.pyx":1052
 *             #self.complained.add("iso_1")
 *         else:
 *             self.iso_1_branch.SetAddress(<void*>&self.iso_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_2"
 */
  /*else*/ {
    __pyx_v_self->iso_1_branch->SetAddress(((void *)(&__pyx_v_self->iso_1_value)));
  }
  __pyx_L111:;

  /* "EMTree.pyx":1055
 * 
 *         #print "making pt_2"
 *         self.pt_2_branch = the_tree.GetBranch("pt_2")             # <<<<<<<<<<<<<<
 *         #if not self.pt_2_branch and "pt_2" not in self.complained:
 *         if not self.pt_2_branch and "pt_2":
 */
  __pyx_v_self->pt_2_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_2"));

  /* "EMTree.pyx":1057
 *         self.pt_2_branch = the_tree.GetBranch("pt_2")
 *         #if not self.pt_2_branch and "pt_2" not in self.complained:
 *         if not self.pt_2_branch and "pt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L115_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L115_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1058
 *         #if not self.pt_2_branch and "pt_2" not in self.complained:
 *         if not self.pt_2_branch and "pt_2":
 *             warnings.warn( "EMTree: Expected branch pt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1057
 *         self.pt_2_branch = the_tree.GetBranch("pt_2")
 *         #if not self.pt_2_branch and "pt_2" not in self.complained:
 *         if not self.pt_2_branch and "pt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_2")
 */
    goto __pyx_L114;
  }

  /* "EMTree.pyx":1061
 *             #self.complained.add("pt_2")
 *         else:
 *             self.pt_2_branch.SetAddress(<void*>&self.pt_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making phi_2"
 */
  /*else*/ {
    __pyx_v_self->pt_2_branch->SetAddress(((void *)(&__pyx_v_self->pt_2_value)));
  }
  __pyx_L114:;

  /* "EMTree.pyx":1064
 * 
 *         #print "making phi_2"
 *         self.phi_2_branch = the_tree.GetBranch("phi_2")             # <<<<<<<<<<<<<<
 *         #if not self.phi_2_branch and "phi_2" not in self.complained:
 *         if not self.phi_2_branch and "phi_2":
 */
  __pyx_v_self->phi_2_branch = __pyx_v_the_tree->GetBranch(((char *)"phi_2"));

  /* "EMTree.pyx":1066
 *         self.phi_2_branch = the_tree.GetBranch("phi_2")
 *         #if not self.phi_2_branch and "phi_2" not in self.complained:
 *         if not self.phi_2_branch and "phi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch phi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("phi_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->phi_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L118_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L118_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1067
 *         #if not self.phi_2_branch and "phi_2" not in self.complained:
 *         if not self.phi_2_branch and "phi_2":
 *             warnings.warn( "EMTree: Expected branch phi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("phi_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1066
 *         self.phi_2_branch = the_tree.GetBranch("phi_2")
 *         #if not self.phi_2_branch and "phi_2" not in self.complained:
 *         if not self.phi_2_branch and "phi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch phi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("phi_2")
 */
    goto __pyx_L117;
  }

  /* "EMTree.pyx":1070
 *             #self.complained.add("phi_2")
 *         else:
 *             self.phi_2_branch.SetAddress(<void*>&self.phi_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making eta_2"
 */
  /*else*/ {
    __pyx_v_self->phi_2_branch->SetAddress(((void *)(&__pyx_v_self->phi_2_value)));
  }
  __pyx_L117:;

  /* "EMTree.pyx":1073
 * 
 *         #print "making eta_2"
 *         self.eta_2_branch = the_tree.GetBranch("eta_2")             # <<<<<<<<<<<<<<
 *         #if not self.eta_2_branch and "eta_2" not in self.complained:
 *         if not self.eta_2_branch and "eta_2":
 */
  __pyx_v_self->eta_2_branch = __pyx_v_the_tree->GetBranch(((char *)"eta_2"));

  /* "EMTree.pyx":1075
 *         self.eta_2_branch = the_tree.GetBranch("eta_2")
 *         #if not self.eta_2_branch and "eta_2" not in self.complained:
 *         if not self.eta_2_branch and "eta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch eta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("eta_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->eta_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L121_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L121_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1076
 *         #if not self.eta_2_branch and "eta_2" not in self.complained:
 *         if not self.eta_2_branch and "eta_2":
 *             warnings.warn( "EMTree: Expected branch eta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("eta_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1075
 *         self.eta_2_branch = the_tree.GetBranch("eta_2")
 *         #if not self.eta_2_branch and "eta_2" not in self.complained:
 *         if not self.eta_2_branch and "eta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch eta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("eta_2")
 */
    goto __pyx_L120;
  }

  /* "EMTree.pyx":1079
 *             #self.complained.add("eta_2")
 *         else:
 *             self.eta_2_branch.SetAddress(<void*>&self.eta_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making m_2"
 */
  /*else*/ {
    __pyx_v_self->eta_2_branch->SetAddress(((void *)(&__pyx_v_self->eta_2_value)));
  }
  __pyx_L120:;

  /* "EMTree.pyx":1082
 * 
 *         #print "making m_2"
 *         self.m_2_branch = the_tree.GetBranch("m_2")             # <<<<<<<<<<<<<<
 *         #if not self.m_2_branch and "m_2" not in self.complained:
 *         if not self.m_2_branch and "m_2":
 */
  __pyx_v_self->m_2_branch = __pyx_v_the_tree->GetBranch(((char *)"m_2"));

  /* "EMTree.pyx":1084
 *         self.m_2_branch = the_tree.GetBranch("m_2")
 *         #if not self.m_2_branch and "m_2" not in self.complained:
 *         if not self.m_2_branch and "m_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch m_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("m_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->m_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L124_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L124_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1085
 *         #if not self.m_2_branch and "m_2" not in self.complained:
 *         if not self.m_2_branch and "m_2":
 *             warnings.warn( "EMTree: Expected branch m_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("m_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1084
 *         self.m_2_branch = the_tree.GetBranch("m_2")
 *         #if not self.m_2_branch and "m_2" not in self.complained:
 *         if not self.m_2_branch and "m_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch m_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("m_2")
 */
    goto __pyx_L123;
  }

  /* "EMTree.pyx":1088
 *             #self.complained.add("m_2")
 *         else:
 *             self.m_2_branch.SetAddress(<void*>&self.m_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making e_2"
 */
  /*else*/ {
    __pyx_v_self->m_2_branch->SetAddress(((void *)(&__pyx_v_self->m_2_value)));
  }
  __pyx_L123:;

  /* "EMTree.pyx":1091
 * 
 *         #print "making e_2"
 *         self.e_2_branch = the_tree.GetBranch("e_2")             # <<<<<<<<<<<<<<
 *         #if not self.e_2_branch and "e_2" not in self.complained:
 *         if not self.e_2_branch and "e_2":
 */
  __pyx_v_self->e_2_branch = __pyx_v_the_tree->GetBranch(((char *)"e_2"));

  /* "EMTree.pyx":1093
 *         self.e_2_branch = the_tree.GetBranch("e_2")
 *         #if not self.e_2_branch and "e_2" not in self.complained:
 *         if not self.e_2_branch and "e_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch e_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("e_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->e_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L127_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L127_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1094
 *         #if not self.e_2_branch and "e_2" not in self.complained:
 *         if not self.e_2_branch and "e_2":
 *             warnings.warn( "EMTree: Expected branch e_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("e_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1094, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1093
 *         self.e_2_branch = the_tree.GetBranch("e_2")
 *         #if not self.e_2_branch and "e_2" not in self.complained:
 *         if not self.e_2_branch and "e_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch e_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("e_2")
 */
    goto __pyx_L126;
  }

  /* "EMTree.pyx":1097
 *             #self.complained.add("e_2")
 *         else:
 *             self.e_2_branch.SetAddress(<void*>&self.e_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making q_2"
 */
  /*else*/ {
    __pyx_v_self->e_2_branch->SetAddress(((void *)(&__pyx_v_self->e_2_value)));
  }
  __pyx_L126:;

  /* "EMTree.pyx":1100
 * 
 *         #print "making q_2"
 *         self.q_2_branch = the_tree.GetBranch("q_2")             # <<<<<<<<<<<<<<
 *         #if not self.q_2_branch and "q_2" not in self.complained:
 *         if not self.q_2_branch and "q_2":
 */
  __pyx_v_self->q_2_branch = __pyx_v_the_tree->GetBranch(((char *)"q_2"));

  /* "EMTree.pyx":1102
 *         self.q_2_branch = the_tree.GetBranch("q_2")
 *         #if not self.q_2_branch and "q_2" not in self.complained:
 *         if not self.q_2_branch and "q_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch q_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("q_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->q_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L130_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L130_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1103
 *         #if not self.q_2_branch and "q_2" not in self.complained:
 *         if not self.q_2_branch and "q_2":
 *             warnings.warn( "EMTree: Expected branch q_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("q_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1102
 *         self.q_2_branch = the_tree.GetBranch("q_2")
 *         #if not self.q_2_branch and "q_2" not in self.complained:
 *         if not self.q_2_branch and "q_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch q_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("q_2")
 */
    goto __pyx_L129;
  }

  /* "EMTree.pyx":1106
 *             #self.complained.add("q_2")
 *         else:
 *             self.q_2_branch.SetAddress(<void*>&self.q_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making iso_2"
 */
  /*else*/ {
    __pyx_v_self->q_2_branch->SetAddress(((void *)(&__pyx_v_self->q_2_value)));
  }
  __pyx_L129:;

  /* "EMTree.pyx":1109
 * 
 *         #print "making iso_2"
 *         self.iso_2_branch = the_tree.GetBranch("iso_2")             # <<<<<<<<<<<<<<
 *         #if not self.iso_2_branch and "iso_2" not in self.complained:
 *         if not self.iso_2_branch and "iso_2":
 */
  __pyx_v_self->iso_2_branch = __pyx_v_the_tree->GetBranch(((char *)"iso_2"));

  /* "EMTree.pyx":1111
 *         self.iso_2_branch = the_tree.GetBranch("iso_2")
 *         #if not self.iso_2_branch and "iso_2" not in self.complained:
 *         if not self.iso_2_branch and "iso_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch iso_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("iso_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->iso_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L133_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L133_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1112
 *         #if not self.iso_2_branch and "iso_2" not in self.complained:
 *         if not self.iso_2_branch and "iso_2":
 *             warnings.warn( "EMTree: Expected branch iso_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("iso_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1111
 *         self.iso_2_branch = the_tree.GetBranch("iso_2")
 *         #if not self.iso_2_branch and "iso_2" not in self.complained:
 *         if not self.iso_2_branch and "iso_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch iso_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("iso_2")
 */
    goto __pyx_L132;
  }

  /* "EMTree.pyx":1115
 *             #self.complained.add("iso_2")
 *         else:
 *             self.iso_2_branch.SetAddress(<void*>&self.iso_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making numGenJets"
 */
  /*else*/ {
    __pyx_v_self->iso_2_branch->SetAddress(((void *)(&__pyx_v_self->iso_2_value)));
  }
  __pyx_L132:;

  /* "EMTree.pyx":1118
 * 
 *         #print "making numGenJets"
 *         self.numGenJets_branch = the_tree.GetBranch("numGenJets")             # <<<<<<<<<<<<<<
 *         #if not self.numGenJets_branch and "numGenJets" not in self.complained:
 *         if not self.numGenJets_branch and "numGenJets":
 */
  __pyx_v_self->numGenJets_branch = __pyx_v_the_tree->GetBranch(((char *)"numGenJets"));

  /* "EMTree.pyx":1120
 *         self.numGenJets_branch = the_tree.GetBranch("numGenJets")
 *         #if not self.numGenJets_branch and "numGenJets" not in self.complained:
 *         if not self.numGenJets_branch and "numGenJets":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch numGenJets does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("numGenJets")
 */
  __pyx_t_2 = ((!(__pyx_v_self->numGenJets_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L136_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L136_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1121
 *         #if not self.numGenJets_branch and "numGenJets" not in self.complained:
 *         if not self.numGenJets_branch and "numGenJets":
 *             warnings.warn( "EMTree: Expected branch numGenJets does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("numGenJets")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1120
 *         self.numGenJets_branch = the_tree.GetBranch("numGenJets")
 *         #if not self.numGenJets_branch and "numGenJets" not in self.complained:
 *         if not self.numGenJets_branch and "numGenJets":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch numGenJets does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("numGenJets")
 */
    goto __pyx_L135;
  }

  /* "EMTree.pyx":1124
 *             #self.complained.add("numGenJets")
 *         else:
 *             self.numGenJets_branch.SetAddress(<void*>&self.numGenJets_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bweight"
 */
  /*else*/ {
    __pyx_v_self->numGenJets_branch->SetAddress(((void *)(&__pyx_v_self->numGenJets_value)));
  }
  __pyx_L135:;

  /* "EMTree.pyx":1127
 * 
 *         #print "making bweight"
 *         self.bweight_branch = the_tree.GetBranch("bweight")             # <<<<<<<<<<<<<<
 *         #if not self.bweight_branch and "bweight" not in self.complained:
 *         if not self.bweight_branch and "bweight":
 */
  __pyx_v_self->bweight_branch = __pyx_v_the_tree->GetBranch(((char *)"bweight"));

  /* "EMTree.pyx":1129
 *         self.bweight_branch = the_tree.GetBranch("bweight")
 *         #if not self.bweight_branch and "bweight" not in self.complained:
 *         if not self.bweight_branch and "bweight":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bweight does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bweight")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bweight_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L139_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L139_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1130
 *         #if not self.bweight_branch and "bweight" not in self.complained:
 *         if not self.bweight_branch and "bweight":
 *             warnings.warn( "EMTree: Expected branch bweight does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bweight")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1129
 *         self.bweight_branch = the_tree.GetBranch("bweight")
 *         #if not self.bweight_branch and "bweight" not in self.complained:
 *         if not self.bweight_branch and "bweight":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bweight does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bweight")
 */
    goto __pyx_L138;
  }

  /* "EMTree.pyx":1133
 *             #self.complained.add("bweight")
 *         else:
 *             self.bweight_branch.SetAddress(<void*>&self.bweight_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_ecalBadCalibReducedMINIAODFilter"
 */
  /*else*/ {
    __pyx_v_self->bweight_branch->SetAddress(((void *)(&__pyx_v_self->bweight_value)));
  }
  __pyx_L138:;

  /* "EMTree.pyx":1136
 * 
 *         #print "making Flag_ecalBadCalibReducedMINIAODFilter"
 *         self.Flag_ecalBadCalibReducedMINIAODFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibReducedMINIAODFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter":
 */
  __pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_ecalBadCalibReducedMINIAODFilter"));

  /* "EMTree.pyx":1138
 *         self.Flag_ecalBadCalibReducedMINIAODFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibReducedMINIAODFilter")
 *         #if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibReducedMINIAODFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_ecalBadCalibReducedMINIAODFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L142_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L142_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1139
 *         #if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibReducedMINIAODFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_ecalBadCalibReducedMINIAODFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1138
 *         self.Flag_ecalBadCalibReducedMINIAODFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibReducedMINIAODFilter")
 *         #if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibReducedMINIAODFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_ecalBadCalibReducedMINIAODFilter")
 */
    goto __pyx_L141;
  }

  /* "EMTree.pyx":1142
 *             #self.complained.add("Flag_ecalBadCalibReducedMINIAODFilter")
 *         else:
 *             self.Flag_ecalBadCalibReducedMINIAODFilter_branch.SetAddress(<void*>&self.Flag_ecalBadCalibReducedMINIAODFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_goodVertices"
 */
  /*else*/ {
    __pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_value)));
  }
  __pyx_L141:;

  /* "EMTree.pyx":1145
 * 
 *         #print "making Flag_goodVertices"
 *         self.Flag_goodVertices_branch = the_tree.GetBranch("Flag_goodVertices")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_goodVertices_branch and "Flag_goodVertices" not in self.complained:
 *         if not self.Flag_goodVertices_branch and "Flag_goodVertices":
 */
  __pyx_v_self->Flag_goodVertices_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_goodVertices"));

  /* "EMTree.pyx":1147
 *         self.Flag_goodVertices_branch = the_tree.GetBranch("Flag_goodVertices")
 *         #if not self.Flag_goodVertices_branch and "Flag_goodVertices" not in self.complained:
 *         if not self.Flag_goodVertices_branch and "Flag_goodVertices":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_goodVertices does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_goodVertices")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_goodVertices_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L145_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L145_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1148
 *         #if not self.Flag_goodVertices_branch and "Flag_goodVertices" not in self.complained:
 *         if not self.Flag_goodVertices_branch and "Flag_goodVertices":
 *             warnings.warn( "EMTree: Expected branch Flag_goodVertices does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_goodVertices")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1147
 *         self.Flag_goodVertices_branch = the_tree.GetBranch("Flag_goodVertices")
 *         #if not self.Flag_goodVertices_branch and "Flag_goodVertices" not in self.complained:
 *         if not self.Flag_goodVertices_branch and "Flag_goodVertices":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_goodVertices does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_goodVertices")
 */
    goto __pyx_L144;
  }

  /* "EMTree.pyx":1151
 *             #self.complained.add("Flag_goodVertices")
 *         else:
 *             self.Flag_goodVertices_branch.SetAddress(<void*>&self.Flag_goodVertices_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_globalSuperTightHalo2016Filter"
 */
  /*else*/ {
    __pyx_v_self->Flag_goodVertices_branch->SetAddress(((void *)(&__pyx_v_self->Flag_goodVertices_value)));
  }
  __pyx_L144:;

  /* "EMTree.pyx":1154
 * 
 *         #print "making Flag_globalSuperTightHalo2016Filter"
 *         self.Flag_globalSuperTightHalo2016Filter_branch = the_tree.GetBranch("Flag_globalSuperTightHalo2016Filter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter" not in self.complained:
 *         if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter":
 */
  __pyx_v_self->Flag_globalSuperTightHalo2016Filter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_globalSuperTightHalo2016Filter"));

  /* "EMTree.pyx":1156
 *         self.Flag_globalSuperTightHalo2016Filter_branch = the_tree.GetBranch("Flag_globalSuperTightHalo2016Filter")
 *         #if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter" not in self.complained:
 *         if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_globalSuperTightHalo2016Filter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_globalSuperTightHalo2016Filter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_globalSuperTightHalo2016Filter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L148_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L148_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1157
 *         #if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter" not in self.complained:
 *         if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter":
 *             warnings.warn( "EMTree: Expected branch Flag_globalSuperTightHalo2016Filter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_globalSuperTightHalo2016Filter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1156
 *         self.Flag_globalSuperTightHalo2016Filter_branch = the_tree.GetBranch("Flag_globalSuperTightHalo2016Filter")
 *         #if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter" not in self.complained:
 *         if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_globalSuperTightHalo2016Filter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_globalSuperTightHalo2016Filter")
 */
    goto __pyx_L147;
  }

  /* "EMTree.pyx":1160
 *             #self.complained.add("Flag_globalSuperTightHalo2016Filter")
 *         else:
 *             self.Flag_globalSuperTightHalo2016Filter_branch.SetAddress(<void*>&self.Flag_globalSuperTightHalo2016Filter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_eeBadScFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_globalSuperTightHalo2016Filter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_globalSuperTightHalo2016Filter_value)));
  }
  __pyx_L147:;

  /* "EMTree.pyx":1163
 * 
 *         #print "making Flag_eeBadScFilter"
 *         self.Flag_eeBadScFilter_branch = the_tree.GetBranch("Flag_eeBadScFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter" not in self.complained:
 *         if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter":
 */
  __pyx_v_self->Flag_eeBadScFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_eeBadScFilter"));

  /* "EMTree.pyx":1165
 *         self.Flag_eeBadScFilter_branch = the_tree.GetBranch("Flag_eeBadScFilter")
 *         #if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter" not in self.complained:
 *         if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_eeBadScFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_eeBadScFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_eeBadScFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L151_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L151_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1166
 *         #if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter" not in self.complained:
 *         if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_eeBadScFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_eeBadScFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1165
 *         self.Flag_eeBadScFilter_branch = the_tree.GetBranch("Flag_eeBadScFilter")
 *         #if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter" not in self.complained:
 *         if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_eeBadScFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_eeBadScFilter")
 */
    goto __pyx_L150;
  }

  /* "EMTree.pyx":1169
 *             #self.complained.add("Flag_eeBadScFilter")
 *         else:
 *             self.Flag_eeBadScFilter_branch.SetAddress(<void*>&self.Flag_eeBadScFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_ecalBadCalibFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_eeBadScFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_eeBadScFilter_value)));
  }
  __pyx_L150:;

  /* "EMTree.pyx":1172
 * 
 *         #print "making Flag_ecalBadCalibFilter"
 *         self.Flag_ecalBadCalibFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter":
 */
  __pyx_v_self->Flag_ecalBadCalibFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_ecalBadCalibFilter"));

  /* "EMTree.pyx":1174
 *         self.Flag_ecalBadCalibFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibFilter")
 *         #if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_ecalBadCalibFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_ecalBadCalibFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L154_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L154_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1175
 *         #if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_ecalBadCalibFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1174
 *         self.Flag_ecalBadCalibFilter_branch = the_tree.GetBranch("Flag_ecalBadCalibFilter")
 *         #if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_ecalBadCalibFilter")
 */
    goto __pyx_L153;
  }

  /* "EMTree.pyx":1178
 *             #self.complained.add("Flag_ecalBadCalibFilter")
 *         else:
 *             self.Flag_ecalBadCalibFilter_branch.SetAddress(<void*>&self.Flag_ecalBadCalibFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_badMuons"
 */
  /*else*/ {
    __pyx_v_self->Flag_ecalBadCalibFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_ecalBadCalibFilter_value)));
  }
  __pyx_L153:;

  /* "EMTree.pyx":1181
 * 
 *         #print "making Flag_badMuons"
 *         self.Flag_badMuons_branch = the_tree.GetBranch("Flag_badMuons")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_badMuons_branch and "Flag_badMuons" not in self.complained:
 *         if not self.Flag_badMuons_branch and "Flag_badMuons":
 */
  __pyx_v_self->Flag_badMuons_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_badMuons"));

  /* "EMTree.pyx":1183
 *         self.Flag_badMuons_branch = the_tree.GetBranch("Flag_badMuons")
 *         #if not self.Flag_badMuons_branch and "Flag_badMuons" not in self.complained:
 *         if not self.Flag_badMuons_branch and "Flag_badMuons":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_badMuons does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_badMuons")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_badMuons_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L157_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L157_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1184
 *         #if not self.Flag_badMuons_branch and "Flag_badMuons" not in self.complained:
 *         if not self.Flag_badMuons_branch and "Flag_badMuons":
 *             warnings.warn( "EMTree: Expected branch Flag_badMuons does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_badMuons")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1183
 *         self.Flag_badMuons_branch = the_tree.GetBranch("Flag_badMuons")
 *         #if not self.Flag_badMuons_branch and "Flag_badMuons" not in self.complained:
 *         if not self.Flag_badMuons_branch and "Flag_badMuons":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_badMuons does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_badMuons")
 */
    goto __pyx_L156;
  }

  /* "EMTree.pyx":1187
 *             #self.complained.add("Flag_badMuons")
 *         else:
 *             self.Flag_badMuons_branch.SetAddress(<void*>&self.Flag_badMuons_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_duplicateMuons"
 */
  /*else*/ {
    __pyx_v_self->Flag_badMuons_branch->SetAddress(((void *)(&__pyx_v_self->Flag_badMuons_value)));
  }
  __pyx_L156:;

  /* "EMTree.pyx":1190
 * 
 *         #print "making Flag_duplicateMuons"
 *         self.Flag_duplicateMuons_branch = the_tree.GetBranch("Flag_duplicateMuons")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons" not in self.complained:
 *         if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons":
 */
  __pyx_v_self->Flag_duplicateMuons_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_duplicateMuons"));

  /* "EMTree.pyx":1192
 *         self.Flag_duplicateMuons_branch = the_tree.GetBranch("Flag_duplicateMuons")
 *         #if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons" not in self.complained:
 *         if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_duplicateMuons does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_duplicateMuons")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_duplicateMuons_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L160_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L160_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1193
 *         #if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons" not in self.complained:
 *         if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons":
 *             warnings.warn( "EMTree: Expected branch Flag_duplicateMuons does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_duplicateMuons")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1192
 *         self.Flag_duplicateMuons_branch = the_tree.GetBranch("Flag_duplicateMuons")
 *         #if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons" not in self.complained:
 *         if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_duplicateMuons does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_duplicateMuons")
 */
    goto __pyx_L159;
  }

  /* "EMTree.pyx":1196
 *             #self.complained.add("Flag_duplicateMuons")
 *         else:
 *             self.Flag_duplicateMuons_branch.SetAddress(<void*>&self.Flag_duplicateMuons_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_HBHENoiseIsoFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_duplicateMuons_branch->SetAddress(((void *)(&__pyx_v_self->Flag_duplicateMuons_value)));
  }
  __pyx_L159:;

  /* "EMTree.pyx":1199
 * 
 *         #print "making Flag_HBHENoiseIsoFilter"
 *         self.Flag_HBHENoiseIsoFilter_branch = the_tree.GetBranch("Flag_HBHENoiseIsoFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter":
 */
  __pyx_v_self->Flag_HBHENoiseIsoFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_HBHENoiseIsoFilter"));

  /* "EMTree.pyx":1201
 *         self.Flag_HBHENoiseIsoFilter_branch = the_tree.GetBranch("Flag_HBHENoiseIsoFilter")
 *         #if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseIsoFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_HBHENoiseIsoFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_HBHENoiseIsoFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L163_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L163_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1202
 *         #if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseIsoFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_HBHENoiseIsoFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1201
 *         self.Flag_HBHENoiseIsoFilter_branch = the_tree.GetBranch("Flag_HBHENoiseIsoFilter")
 *         #if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseIsoFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_HBHENoiseIsoFilter")
 */
    goto __pyx_L162;
  }

  /* "EMTree.pyx":1205
 *             #self.complained.add("Flag_HBHENoiseIsoFilter")
 *         else:
 *             self.Flag_HBHENoiseIsoFilter_branch.SetAddress(<void*>&self.Flag_HBHENoiseIsoFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_HBHENoiseFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_HBHENoiseIsoFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_HBHENoiseIsoFilter_value)));
  }
  __pyx_L162:;

  /* "EMTree.pyx":1208
 * 
 *         #print "making Flag_HBHENoiseFilter"
 *         self.Flag_HBHENoiseFilter_branch = the_tree.GetBranch("Flag_HBHENoiseFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter":
 */
  __pyx_v_self->Flag_HBHENoiseFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_HBHENoiseFilter"));

  /* "EMTree.pyx":1210
 *         self.Flag_HBHENoiseFilter_branch = the_tree.GetBranch("Flag_HBHENoiseFilter")
 *         #if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_HBHENoiseFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_HBHENoiseFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L166_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L166_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1211
 *         #if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_HBHENoiseFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1210
 *         self.Flag_HBHENoiseFilter_branch = the_tree.GetBranch("Flag_HBHENoiseFilter")
 *         #if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_HBHENoiseFilter")
 */
    goto __pyx_L165;
  }

  /* "EMTree.pyx":1214
 *             #self.complained.add("Flag_HBHENoiseFilter")
 *         else:
 *             self.Flag_HBHENoiseFilter_branch.SetAddress(<void*>&self.Flag_HBHENoiseFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_EcalDeadCellTriggerPrimitiveFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_HBHENoiseFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_HBHENoiseFilter_value)));
  }
  __pyx_L165:;

  /* "EMTree.pyx":1217
 * 
 *         #print "making Flag_EcalDeadCellTriggerPrimitiveFilter"
 *         self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch = the_tree.GetBranch("Flag_EcalDeadCellTriggerPrimitiveFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter" not in self.complained:
 *         if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter":
 */
  __pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_EcalDeadCellTriggerPrimitiveFilter"));

  /* "EMTree.pyx":1219
 *         self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch = the_tree.GetBranch("Flag_EcalDeadCellTriggerPrimitiveFilter")
 *         #if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter" not in self.complained:
 *         if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_EcalDeadCellTriggerPrimitiveFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_EcalDeadCellTriggerPrimitiveFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L169_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L169_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1220
 *         #if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter" not in self.complained:
 *         if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_EcalDeadCellTriggerPrimitiveFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_EcalDeadCellTriggerPrimitiveFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1219
 *         self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch = the_tree.GetBranch("Flag_EcalDeadCellTriggerPrimitiveFilter")
 *         #if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter" not in self.complained:
 *         if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_EcalDeadCellTriggerPrimitiveFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_EcalDeadCellTriggerPrimitiveFilter")
 */
    goto __pyx_L168;
  }

  /* "EMTree.pyx":1223
 *             #self.complained.add("Flag_EcalDeadCellTriggerPrimitiveFilter")
 *         else:
 *             self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch.SetAddress(<void*>&self.Flag_EcalDeadCellTriggerPrimitiveFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_BadPFMuonFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_value)));
  }
  __pyx_L168:;

  /* "EMTree.pyx":1226
 * 
 *         #print "making Flag_BadPFMuonFilter"
 *         self.Flag_BadPFMuonFilter_branch = the_tree.GetBranch("Flag_BadPFMuonFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter" not in self.complained:
 *         if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter":
 */
  __pyx_v_self->Flag_BadPFMuonFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_BadPFMuonFilter"));

  /* "EMTree.pyx":1228
 *         self.Flag_BadPFMuonFilter_branch = the_tree.GetBranch("Flag_BadPFMuonFilter")
 *         #if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter" not in self.complained:
 *         if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_BadPFMuonFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_BadPFMuonFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_BadPFMuonFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L172_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L172_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1229
 *         #if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter" not in self.complained:
 *         if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_BadPFMuonFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_BadPFMuonFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1228
 *         self.Flag_BadPFMuonFilter_branch = the_tree.GetBranch("Flag_BadPFMuonFilter")
 *         #if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter" not in self.complained:
 *         if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_BadPFMuonFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_BadPFMuonFilter")
 */
    goto __pyx_L171;
  }

  /* "EMTree.pyx":1232
 *             #self.complained.add("Flag_BadPFMuonFilter")
 *         else:
 *             self.Flag_BadPFMuonFilter_branch.SetAddress(<void*>&self.Flag_BadPFMuonFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making Flag_BadChargedCandidateFilter"
 */
  /*else*/ {
    __pyx_v_self->Flag_BadPFMuonFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_BadPFMuonFilter_value)));
  }
  __pyx_L171:;

  /* "EMTree.pyx":1235
 * 
 *         #print "making Flag_BadChargedCandidateFilter"
 *         self.Flag_BadChargedCandidateFilter_branch = the_tree.GetBranch("Flag_BadChargedCandidateFilter")             # <<<<<<<<<<<<<<
 *         #if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter" not in self.complained:
 *         if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter":
 */
  __pyx_v_self->Flag_BadChargedCandidateFilter_branch = __pyx_v_the_tree->GetBranch(((char *)"Flag_BadChargedCandidateFilter"));

  /* "EMTree.pyx":1237
 *         self.Flag_BadChargedCandidateFilter_branch = the_tree.GetBranch("Flag_BadChargedCandidateFilter")
 *         #if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter" not in self.complained:
 *         if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_BadChargedCandidateFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_BadChargedCandidateFilter")
 */
  __pyx_t_2 = ((!(__pyx_v_self->Flag_BadChargedCandidateFilter_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L175_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L175_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1238
 *         #if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter" not in self.complained:
 *         if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_BadChargedCandidateFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_BadChargedCandidateFilter")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1237
 *         self.Flag_BadChargedCandidateFilter_branch = the_tree.GetBranch("Flag_BadChargedCandidateFilter")
 *         #if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter" not in self.complained:
 *         if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch Flag_BadChargedCandidateFilter does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("Flag_BadChargedCandidateFilter")
 */
    goto __pyx_L174;
  }

  /* "EMTree.pyx":1241
 *             #self.complained.add("Flag_BadChargedCandidateFilter")
 *         else:
 *             self.Flag_BadChargedCandidateFilter_branch.SetAddress(<void*>&self.Flag_BadChargedCandidateFilter_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met"
 */
  /*else*/ {
    __pyx_v_self->Flag_BadChargedCandidateFilter_branch->SetAddress(((void *)(&__pyx_v_self->Flag_BadChargedCandidateFilter_value)));
  }
  __pyx_L174:;

  /* "EMTree.pyx":1244
 * 
 *         #print "making met"
 *         self.met_branch = the_tree.GetBranch("met")             # <<<<<<<<<<<<<<
 *         #if not self.met_branch and "met" not in self.complained:
 *         if not self.met_branch and "met":
 */
  __pyx_v_self->met_branch = __pyx_v_the_tree->GetBranch(((char *)"met"));

  /* "EMTree.pyx":1246
 *         self.met_branch = the_tree.GetBranch("met")
 *         #if not self.met_branch and "met" not in self.complained:
 *         if not self.met_branch and "met":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L178_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L178_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1247
 *         #if not self.met_branch and "met" not in self.complained:
 *         if not self.met_branch and "met":
 *             warnings.warn( "EMTree: Expected branch met does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1246
 *         self.met_branch = the_tree.GetBranch("met")
 *         #if not self.met_branch and "met" not in self.complained:
 *         if not self.met_branch and "met":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met")
 */
    goto __pyx_L177;
  }

  /* "EMTree.pyx":1250
 *             #self.complained.add("met")
 *         else:
 *             self.met_branch.SetAddress(<void*>&self.met_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metSig"
 */
  /*else*/ {
    __pyx_v_self->met_branch->SetAddress(((void *)(&__pyx_v_self->met_value)));
  }
  __pyx_L177:;

  /* "EMTree.pyx":1253
 * 
 *         #print "making metSig"
 *         self.metSig_branch = the_tree.GetBranch("metSig")             # <<<<<<<<<<<<<<
 *         #if not self.metSig_branch and "metSig" not in self.complained:
 *         if not self.metSig_branch and "metSig":
 */
  __pyx_v_self->metSig_branch = __pyx_v_the_tree->GetBranch(((char *)"metSig"));

  /* "EMTree.pyx":1255
 *         self.metSig_branch = the_tree.GetBranch("metSig")
 *         #if not self.metSig_branch and "metSig" not in self.complained:
 *         if not self.metSig_branch and "metSig":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metSig does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metSig")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metSig_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L181_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L181_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1256
 *         #if not self.metSig_branch and "metSig" not in self.complained:
 *         if not self.metSig_branch and "metSig":
 *             warnings.warn( "EMTree: Expected branch metSig does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metSig")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1255
 *         self.metSig_branch = the_tree.GetBranch("metSig")
 *         #if not self.metSig_branch and "metSig" not in self.complained:
 *         if not self.metSig_branch and "metSig":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metSig does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metSig")
 */
    goto __pyx_L180;
  }

  /* "EMTree.pyx":1259
 *             #self.complained.add("metSig")
 *         else:
 *             self.metSig_branch.SetAddress(<void*>&self.metSig_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metcov00"
 */
  /*else*/ {
    __pyx_v_self->metSig_branch->SetAddress(((void *)(&__pyx_v_self->metSig_value)));
  }
  __pyx_L180:;

  /* "EMTree.pyx":1262
 * 
 *         #print "making metcov00"
 *         self.metcov00_branch = the_tree.GetBranch("metcov00")             # <<<<<<<<<<<<<<
 *         #if not self.metcov00_branch and "metcov00" not in self.complained:
 *         if not self.metcov00_branch and "metcov00":
 */
  __pyx_v_self->metcov00_branch = __pyx_v_the_tree->GetBranch(((char *)"metcov00"));

  /* "EMTree.pyx":1264
 *         self.metcov00_branch = the_tree.GetBranch("metcov00")
 *         #if not self.metcov00_branch and "metcov00" not in self.complained:
 *         if not self.metcov00_branch and "metcov00":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov00 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov00")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metcov00_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L184_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L184_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1265
 *         #if not self.metcov00_branch and "metcov00" not in self.complained:
 *         if not self.metcov00_branch and "metcov00":
 *             warnings.warn( "EMTree: Expected branch metcov00 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov00")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1264
 *         self.metcov00_branch = the_tree.GetBranch("metcov00")
 *         #if not self.metcov00_branch and "metcov00" not in self.complained:
 *         if not self.metcov00_branch and "metcov00":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov00 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov00")
 */
    goto __pyx_L183;
  }

  /* "EMTree.pyx":1268
 *             #self.complained.add("metcov00")
 *         else:
 *             self.metcov00_branch.SetAddress(<void*>&self.metcov00_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metcov10"
 */
  /*else*/ {
    __pyx_v_self->metcov00_branch->SetAddress(((void *)(&__pyx_v_self->metcov00_value)));
  }
  __pyx_L183:;

  /* "EMTree.pyx":1271
 * 
 *         #print "making metcov10"
 *         self.metcov10_branch = the_tree.GetBranch("metcov10")             # <<<<<<<<<<<<<<
 *         #if not self.metcov10_branch and "metcov10" not in self.complained:
 *         if not self.metcov10_branch and "metcov10":
 */
  __pyx_v_self->metcov10_branch = __pyx_v_the_tree->GetBranch(((char *)"metcov10"));

  /* "EMTree.pyx":1273
 *         self.metcov10_branch = the_tree.GetBranch("metcov10")
 *         #if not self.metcov10_branch and "metcov10" not in self.complained:
 *         if not self.metcov10_branch and "metcov10":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov10 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov10")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metcov10_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L187_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L187_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1274
 *         #if not self.metcov10_branch and "metcov10" not in self.complained:
 *         if not self.metcov10_branch and "metcov10":
 *             warnings.warn( "EMTree: Expected branch metcov10 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov10")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1273
 *         self.metcov10_branch = the_tree.GetBranch("metcov10")
 *         #if not self.metcov10_branch and "metcov10" not in self.complained:
 *         if not self.metcov10_branch and "metcov10":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov10 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov10")
 */
    goto __pyx_L186;
  }

  /* "EMTree.pyx":1277
 *             #self.complained.add("metcov10")
 *         else:
 *             self.metcov10_branch.SetAddress(<void*>&self.metcov10_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metcov11"
 */
  /*else*/ {
    __pyx_v_self->metcov10_branch->SetAddress(((void *)(&__pyx_v_self->metcov10_value)));
  }
  __pyx_L186:;

  /* "EMTree.pyx":1280
 * 
 *         #print "making metcov11"
 *         self.metcov11_branch = the_tree.GetBranch("metcov11")             # <<<<<<<<<<<<<<
 *         #if not self.metcov11_branch and "metcov11" not in self.complained:
 *         if not self.metcov11_branch and "metcov11":
 */
  __pyx_v_self->metcov11_branch = __pyx_v_the_tree->GetBranch(((char *)"metcov11"));

  /* "EMTree.pyx":1282
 *         self.metcov11_branch = the_tree.GetBranch("metcov11")
 *         #if not self.metcov11_branch and "metcov11" not in self.complained:
 *         if not self.metcov11_branch and "metcov11":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov11 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov11")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metcov11_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L190_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L190_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1283
 *         #if not self.metcov11_branch and "metcov11" not in self.complained:
 *         if not self.metcov11_branch and "metcov11":
 *             warnings.warn( "EMTree: Expected branch metcov11 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov11")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1282
 *         self.metcov11_branch = the_tree.GetBranch("metcov11")
 *         #if not self.metcov11_branch and "metcov11" not in self.complained:
 *         if not self.metcov11_branch and "metcov11":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov11 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov11")
 */
    goto __pyx_L189;
  }

  /* "EMTree.pyx":1286
 *             #self.complained.add("metcov11")
 *         else:
 *             self.metcov11_branch.SetAddress(<void*>&self.metcov11_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metcov01"
 */
  /*else*/ {
    __pyx_v_self->metcov11_branch->SetAddress(((void *)(&__pyx_v_self->metcov11_value)));
  }
  __pyx_L189:;

  /* "EMTree.pyx":1289
 * 
 *         #print "making metcov01"
 *         self.metcov01_branch = the_tree.GetBranch("metcov01")             # <<<<<<<<<<<<<<
 *         #if not self.metcov01_branch and "metcov01" not in self.complained:
 *         if not self.metcov01_branch and "metcov01":
 */
  __pyx_v_self->metcov01_branch = __pyx_v_the_tree->GetBranch(((char *)"metcov01"));

  /* "EMTree.pyx":1291
 *         self.metcov01_branch = the_tree.GetBranch("metcov01")
 *         #if not self.metcov01_branch and "metcov01" not in self.complained:
 *         if not self.metcov01_branch and "metcov01":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov01 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov01")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metcov01_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L193_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L193_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1292
 *         #if not self.metcov01_branch and "metcov01" not in self.complained:
 *         if not self.metcov01_branch and "metcov01":
 *             warnings.warn( "EMTree: Expected branch metcov01 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov01")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1291
 *         self.metcov01_branch = the_tree.GetBranch("metcov01")
 *         #if not self.metcov01_branch and "metcov01" not in self.complained:
 *         if not self.metcov01_branch and "metcov01":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metcov01 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metcov01")
 */
    goto __pyx_L192;
  }

  /* "EMTree.pyx":1295
 *             #self.complained.add("metcov01")
 *         else:
 *             self.metcov01_branch.SetAddress(<void*>&self.metcov01_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi"
 */
  /*else*/ {
    __pyx_v_self->metcov01_branch->SetAddress(((void *)(&__pyx_v_self->metcov01_value)));
  }
  __pyx_L192:;

  /* "EMTree.pyx":1298
 * 
 *         #print "making metphi"
 *         self.metphi_branch = the_tree.GetBranch("metphi")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_branch and "metphi" not in self.complained:
 *         if not self.metphi_branch and "metphi":
 */
  __pyx_v_self->metphi_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi"));

  /* "EMTree.pyx":1300
 *         self.metphi_branch = the_tree.GetBranch("metphi")
 *         #if not self.metphi_branch and "metphi" not in self.complained:
 *         if not self.metphi_branch and "metphi":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L196_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L196_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1301
 *         #if not self.metphi_branch and "metphi" not in self.complained:
 *         if not self.metphi_branch and "metphi":
 *             warnings.warn( "EMTree: Expected branch metphi does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1300
 *         self.metphi_branch = the_tree.GetBranch("metphi")
 *         #if not self.metphi_branch and "metphi" not in self.complained:
 *         if not self.metphi_branch and "metphi":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi")
 */
    goto __pyx_L195;
  }

  /* "EMTree.pyx":1304
 *             #self.complained.add("metphi")
 *         else:
 *             self.metphi_branch.SetAddress(<void*>&self.metphi_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_py"
 */
  /*else*/ {
    __pyx_v_self->metphi_branch->SetAddress(((void *)(&__pyx_v_self->metphi_value)));
  }
  __pyx_L195:;

  /* "EMTree.pyx":1307
 * 
 *         #print "making met_py"
 *         self.met_py_branch = the_tree.GetBranch("met_py")             # <<<<<<<<<<<<<<
 *         #if not self.met_py_branch and "met_py" not in self.complained:
 *         if not self.met_py_branch and "met_py":
 */
  __pyx_v_self->met_py_branch = __pyx_v_the_tree->GetBranch(((char *)"met_py"));

  /* "EMTree.pyx":1309
 *         self.met_py_branch = the_tree.GetBranch("met_py")
 *         #if not self.met_py_branch and "met_py" not in self.complained:
 *         if not self.met_py_branch and "met_py":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_py does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_py")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_py_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L199_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L199_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1310
 *         #if not self.met_py_branch and "met_py" not in self.complained:
 *         if not self.met_py_branch and "met_py":
 *             warnings.warn( "EMTree: Expected branch met_py does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_py")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1309
 *         self.met_py_branch = the_tree.GetBranch("met_py")
 *         #if not self.met_py_branch and "met_py" not in self.complained:
 *         if not self.met_py_branch and "met_py":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_py does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_py")
 */
    goto __pyx_L198;
  }

  /* "EMTree.pyx":1313
 *             #self.complained.add("met_py")
 *         else:
 *             self.met_py_branch.SetAddress(<void*>&self.met_py_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_px"
 */
  /*else*/ {
    __pyx_v_self->met_py_branch->SetAddress(((void *)(&__pyx_v_self->met_py_value)));
  }
  __pyx_L198:;

  /* "EMTree.pyx":1316
 * 
 *         #print "making met_px"
 *         self.met_px_branch = the_tree.GetBranch("met_px")             # <<<<<<<<<<<<<<
 *         #if not self.met_px_branch and "met_px" not in self.complained:
 *         if not self.met_px_branch and "met_px":
 */
  __pyx_v_self->met_px_branch = __pyx_v_the_tree->GetBranch(((char *)"met_px"));

  /* "EMTree.pyx":1318
 *         self.met_px_branch = the_tree.GetBranch("met_px")
 *         #if not self.met_px_branch and "met_px" not in self.complained:
 *         if not self.met_px_branch and "met_px":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_px does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_px")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_px_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L202_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L202_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1319
 *         #if not self.met_px_branch and "met_px" not in self.complained:
 *         if not self.met_px_branch and "met_px":
 *             warnings.warn( "EMTree: Expected branch met_px does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_px")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1318
 *         self.met_px_branch = the_tree.GetBranch("met_px")
 *         #if not self.met_px_branch and "met_px" not in self.complained:
 *         if not self.met_px_branch and "met_px":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_px does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_px")
 */
    goto __pyx_L201;
  }

  /* "EMTree.pyx":1322
 *             #self.complained.add("met_px")
 *         else:
 *             self.met_px_branch.SetAddress(<void*>&self.met_px_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_UESUp"
 */
  /*else*/ {
    __pyx_v_self->met_px_branch->SetAddress(((void *)(&__pyx_v_self->met_px_value)));
  }
  __pyx_L201:;

  /* "EMTree.pyx":1325
 * 
 *         #print "making met_UESUp"
 *         self.met_UESUp_branch = the_tree.GetBranch("met_UESUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_UESUp_branch and "met_UESUp" not in self.complained:
 *         if not self.met_UESUp_branch and "met_UESUp":
 */
  __pyx_v_self->met_UESUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_UESUp"));

  /* "EMTree.pyx":1327
 *         self.met_UESUp_branch = the_tree.GetBranch("met_UESUp")
 *         #if not self.met_UESUp_branch and "met_UESUp" not in self.complained:
 *         if not self.met_UESUp_branch and "met_UESUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_UESUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_UESUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_UESUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L205_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L205_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1328
 *         #if not self.met_UESUp_branch and "met_UESUp" not in self.complained:
 *         if not self.met_UESUp_branch and "met_UESUp":
 *             warnings.warn( "EMTree: Expected branch met_UESUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_UESUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1327
 *         self.met_UESUp_branch = the_tree.GetBranch("met_UESUp")
 *         #if not self.met_UESUp_branch and "met_UESUp" not in self.complained:
 *         if not self.met_UESUp_branch and "met_UESUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_UESUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_UESUp")
 */
    goto __pyx_L204;
  }

  /* "EMTree.pyx":1331
 *             #self.complained.add("met_UESUp")
 *         else:
 *             self.met_UESUp_branch.SetAddress(<void*>&self.met_UESUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_UESUp"
 */
  /*else*/ {
    __pyx_v_self->met_UESUp_branch->SetAddress(((void *)(&__pyx_v_self->met_UESUp_value)));
  }
  __pyx_L204:;

  /* "EMTree.pyx":1334
 * 
 *         #print "making metphi_UESUp"
 *         self.metphi_UESUp_branch = the_tree.GetBranch("metphi_UESUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_UESUp_branch and "metphi_UESUp" not in self.complained:
 *         if not self.metphi_UESUp_branch and "metphi_UESUp":
 */
  __pyx_v_self->metphi_UESUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_UESUp"));

  /* "EMTree.pyx":1336
 *         self.metphi_UESUp_branch = the_tree.GetBranch("metphi_UESUp")
 *         #if not self.metphi_UESUp_branch and "metphi_UESUp" not in self.complained:
 *         if not self.metphi_UESUp_branch and "metphi_UESUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_UESUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_UESUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_UESUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L208_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L208_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1337
 *         #if not self.metphi_UESUp_branch and "metphi_UESUp" not in self.complained:
 *         if not self.metphi_UESUp_branch and "metphi_UESUp":
 *             warnings.warn( "EMTree: Expected branch metphi_UESUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_UESUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1336
 *         self.metphi_UESUp_branch = the_tree.GetBranch("metphi_UESUp")
 *         #if not self.metphi_UESUp_branch and "metphi_UESUp" not in self.complained:
 *         if not self.metphi_UESUp_branch and "metphi_UESUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_UESUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_UESUp")
 */
    goto __pyx_L207;
  }

  /* "EMTree.pyx":1340
 *             #self.complained.add("metphi_UESUp")
 *         else:
 *             self.metphi_UESUp_branch.SetAddress(<void*>&self.metphi_UESUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_UESDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_UESUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_UESUp_value)));
  }
  __pyx_L207:;

  /* "EMTree.pyx":1343
 * 
 *         #print "making met_UESDown"
 *         self.met_UESDown_branch = the_tree.GetBranch("met_UESDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_UESDown_branch and "met_UESDown" not in self.complained:
 *         if not self.met_UESDown_branch and "met_UESDown":
 */
  __pyx_v_self->met_UESDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_UESDown"));

  /* "EMTree.pyx":1345
 *         self.met_UESDown_branch = the_tree.GetBranch("met_UESDown")
 *         #if not self.met_UESDown_branch and "met_UESDown" not in self.complained:
 *         if not self.met_UESDown_branch and "met_UESDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_UESDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_UESDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_UESDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L211_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L211_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1346
 *         #if not self.met_UESDown_branch and "met_UESDown" not in self.complained:
 *         if not self.met_UESDown_branch and "met_UESDown":
 *             warnings.warn( "EMTree: Expected branch met_UESDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_UESDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1345
 *         self.met_UESDown_branch = the_tree.GetBranch("met_UESDown")
 *         #if not self.met_UESDown_branch and "met_UESDown" not in self.complained:
 *         if not self.met_UESDown_branch and "met_UESDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_UESDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_UESDown")
 */
    goto __pyx_L210;
  }

  /* "EMTree.pyx":1349
 *             #self.complained.add("met_UESDown")
 *         else:
 *             self.met_UESDown_branch.SetAddress(<void*>&self.met_UESDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_UESDown"
 */
  /*else*/ {
    __pyx_v_self->met_UESDown_branch->SetAddress(((void *)(&__pyx_v_self->met_UESDown_value)));
  }
  __pyx_L210:;

  /* "EMTree.pyx":1352
 * 
 *         #print "making metphi_UESDown"
 *         self.metphi_UESDown_branch = the_tree.GetBranch("metphi_UESDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_UESDown_branch and "metphi_UESDown" not in self.complained:
 *         if not self.metphi_UESDown_branch and "metphi_UESDown":
 */
  __pyx_v_self->metphi_UESDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_UESDown"));

  /* "EMTree.pyx":1354
 *         self.metphi_UESDown_branch = the_tree.GetBranch("metphi_UESDown")
 *         #if not self.metphi_UESDown_branch and "metphi_UESDown" not in self.complained:
 *         if not self.metphi_UESDown_branch and "metphi_UESDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_UESDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_UESDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_UESDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L214_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L214_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1355
 *         #if not self.metphi_UESDown_branch and "metphi_UESDown" not in self.complained:
 *         if not self.metphi_UESDown_branch and "metphi_UESDown":
 *             warnings.warn( "EMTree: Expected branch metphi_UESDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_UESDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1354
 *         self.metphi_UESDown_branch = the_tree.GetBranch("metphi_UESDown")
 *         #if not self.metphi_UESDown_branch and "metphi_UESDown" not in self.complained:
 *         if not self.metphi_UESDown_branch and "metphi_UESDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_UESDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_UESDown")
 */
    goto __pyx_L213;
  }

  /* "EMTree.pyx":1358
 *             #self.complained.add("metphi_UESDown")
 *         else:
 *             self.metphi_UESDown_branch.SetAddress(<void*>&self.metphi_UESDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetAbsoluteUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_UESDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_UESDown_value)));
  }
  __pyx_L213:;

  /* "EMTree.pyx":1361
 * 
 *         #print "making met_JetAbsoluteUp"
 *         self.met_JetAbsoluteUp_branch = the_tree.GetBranch("met_JetAbsoluteUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp" not in self.complained:
 *         if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp":
 */
  __pyx_v_self->met_JetAbsoluteUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetAbsoluteUp"));

  /* "EMTree.pyx":1363
 *         self.met_JetAbsoluteUp_branch = the_tree.GetBranch("met_JetAbsoluteUp")
 *         #if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp" not in self.complained:
 *         if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetAbsoluteUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L217_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L217_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1364
 *         #if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp" not in self.complained:
 *         if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1363
 *         self.met_JetAbsoluteUp_branch = the_tree.GetBranch("met_JetAbsoluteUp")
 *         #if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp" not in self.complained:
 *         if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteUp")
 */
    goto __pyx_L216;
  }

  /* "EMTree.pyx":1367
 *             #self.complained.add("met_JetAbsoluteUp")
 *         else:
 *             self.met_JetAbsoluteUp_branch.SetAddress(<void*>&self.met_JetAbsoluteUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetAbsoluteUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetAbsoluteUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetAbsoluteUp_value)));
  }
  __pyx_L216:;

  /* "EMTree.pyx":1370
 * 
 *         #print "making metphi_JetAbsoluteUp"
 *         self.metphi_JetAbsoluteUp_branch = the_tree.GetBranch("metphi_JetAbsoluteUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp":
 */
  __pyx_v_self->metphi_JetAbsoluteUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetAbsoluteUp"));

  /* "EMTree.pyx":1372
 *         self.metphi_JetAbsoluteUp_branch = the_tree.GetBranch("metphi_JetAbsoluteUp")
 *         #if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetAbsoluteUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L220_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L220_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1373
 *         #if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1372
 *         self.metphi_JetAbsoluteUp_branch = the_tree.GetBranch("metphi_JetAbsoluteUp")
 *         #if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteUp")
 */
    goto __pyx_L219;
  }

  /* "EMTree.pyx":1376
 *             #self.complained.add("metphi_JetAbsoluteUp")
 *         else:
 *             self.metphi_JetAbsoluteUp_branch.SetAddress(<void*>&self.metphi_JetAbsoluteUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetAbsoluteDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetAbsoluteUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetAbsoluteUp_value)));
  }
  __pyx_L219:;

  /* "EMTree.pyx":1379
 * 
 *         #print "making met_JetAbsoluteDown"
 *         self.met_JetAbsoluteDown_branch = the_tree.GetBranch("met_JetAbsoluteDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown" not in self.complained:
 *         if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown":
 */
  __pyx_v_self->met_JetAbsoluteDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetAbsoluteDown"));

  /* "EMTree.pyx":1381
 *         self.met_JetAbsoluteDown_branch = the_tree.GetBranch("met_JetAbsoluteDown")
 *         #if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown" not in self.complained:
 *         if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetAbsoluteDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L223_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L223_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1382
 *         #if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown" not in self.complained:
 *         if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1381
 *         self.met_JetAbsoluteDown_branch = the_tree.GetBranch("met_JetAbsoluteDown")
 *         #if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown" not in self.complained:
 *         if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteDown")
 */
    goto __pyx_L222;
  }

  /* "EMTree.pyx":1385
 *             #self.complained.add("met_JetAbsoluteDown")
 *         else:
 *             self.met_JetAbsoluteDown_branch.SetAddress(<void*>&self.met_JetAbsoluteDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetAbsoluteDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetAbsoluteDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetAbsoluteDown_value)));
  }
  __pyx_L222:;

  /* "EMTree.pyx":1388
 * 
 *         #print "making metphi_JetAbsoluteDown"
 *         self.metphi_JetAbsoluteDown_branch = the_tree.GetBranch("metphi_JetAbsoluteDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown":
 */
  __pyx_v_self->metphi_JetAbsoluteDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetAbsoluteDown"));

  /* "EMTree.pyx":1390
 *         self.metphi_JetAbsoluteDown_branch = the_tree.GetBranch("metphi_JetAbsoluteDown")
 *         #if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetAbsoluteDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L226_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L226_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1391
 *         #if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1390
 *         self.metphi_JetAbsoluteDown_branch = the_tree.GetBranch("metphi_JetAbsoluteDown")
 *         #if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteDown")
 */
    goto __pyx_L225;
  }

  /* "EMTree.pyx":1394
 *             #self.complained.add("metphi_JetAbsoluteDown")
 *         else:
 *             self.metphi_JetAbsoluteDown_branch.SetAddress(<void*>&self.metphi_JetAbsoluteDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetAbsoluteyearUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetAbsoluteDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetAbsoluteDown_value)));
  }
  __pyx_L225:;

  /* "EMTree.pyx":1397
 * 
 *         #print "making met_JetAbsoluteyearUp"
 *         self.met_JetAbsoluteyearUp_branch = the_tree.GetBranch("met_JetAbsoluteyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp" not in self.complained:
 *         if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp":
 */
  __pyx_v_self->met_JetAbsoluteyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetAbsoluteyearUp"));

  /* "EMTree.pyx":1399
 *         self.met_JetAbsoluteyearUp_branch = the_tree.GetBranch("met_JetAbsoluteyearUp")
 *         #if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp" not in self.complained:
 *         if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetAbsoluteyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L229_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L229_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1400
 *         #if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp" not in self.complained:
 *         if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1399
 *         self.met_JetAbsoluteyearUp_branch = the_tree.GetBranch("met_JetAbsoluteyearUp")
 *         #if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp" not in self.complained:
 *         if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteyearUp")
 */
    goto __pyx_L228;
  }

  /* "EMTree.pyx":1403
 *             #self.complained.add("met_JetAbsoluteyearUp")
 *         else:
 *             self.met_JetAbsoluteyearUp_branch.SetAddress(<void*>&self.met_JetAbsoluteyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetAbsoluteyearUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetAbsoluteyearUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetAbsoluteyearUp_value)));
  }
  __pyx_L228:;

  /* "EMTree.pyx":1406
 * 
 *         #print "making metphi_JetAbsoluteyearUp"
 *         self.metphi_JetAbsoluteyearUp_branch = the_tree.GetBranch("metphi_JetAbsoluteyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp":
 */
  __pyx_v_self->metphi_JetAbsoluteyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetAbsoluteyearUp"));

  /* "EMTree.pyx":1408
 *         self.metphi_JetAbsoluteyearUp_branch = the_tree.GetBranch("metphi_JetAbsoluteyearUp")
 *         #if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetAbsoluteyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L232_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L232_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1409
 *         #if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1408
 *         self.metphi_JetAbsoluteyearUp_branch = the_tree.GetBranch("metphi_JetAbsoluteyearUp")
 *         #if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteyearUp")
 */
    goto __pyx_L231;
  }

  /* "EMTree.pyx":1412
 *             #self.complained.add("metphi_JetAbsoluteyearUp")
 *         else:
 *             self.metphi_JetAbsoluteyearUp_branch.SetAddress(<void*>&self.metphi_JetAbsoluteyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetAbsoluteyearDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetAbsoluteyearUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetAbsoluteyearUp_value)));
  }
  __pyx_L231:;

  /* "EMTree.pyx":1415
 * 
 *         #print "making met_JetAbsoluteyearDown"
 *         self.met_JetAbsoluteyearDown_branch = the_tree.GetBranch("met_JetAbsoluteyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown" not in self.complained:
 *         if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown":
 */
  __pyx_v_self->met_JetAbsoluteyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetAbsoluteyearDown"));

  /* "EMTree.pyx":1417
 *         self.met_JetAbsoluteyearDown_branch = the_tree.GetBranch("met_JetAbsoluteyearDown")
 *         #if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown" not in self.complained:
 *         if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetAbsoluteyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L235_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L235_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1418
 *         #if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown" not in self.complained:
 *         if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1417
 *         self.met_JetAbsoluteyearDown_branch = the_tree.GetBranch("met_JetAbsoluteyearDown")
 *         #if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown" not in self.complained:
 *         if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetAbsoluteyearDown")
 */
    goto __pyx_L234;
  }

  /* "EMTree.pyx":1421
 *             #self.complained.add("met_JetAbsoluteyearDown")
 *         else:
 *             self.met_JetAbsoluteyearDown_branch.SetAddress(<void*>&self.met_JetAbsoluteyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetAbsoluteyearDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetAbsoluteyearDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetAbsoluteyearDown_value)));
  }
  __pyx_L234:;

  /* "EMTree.pyx":1424
 * 
 *         #print "making metphi_JetAbsoluteyearDown"
 *         self.metphi_JetAbsoluteyearDown_branch = the_tree.GetBranch("metphi_JetAbsoluteyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown":
 */
  __pyx_v_self->metphi_JetAbsoluteyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetAbsoluteyearDown"));

  /* "EMTree.pyx":1426
 *         self.metphi_JetAbsoluteyearDown_branch = the_tree.GetBranch("metphi_JetAbsoluteyearDown")
 *         #if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetAbsoluteyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L238_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L238_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1427
 *         #if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1426
 *         self.metphi_JetAbsoluteyearDown_branch = the_tree.GetBranch("metphi_JetAbsoluteyearDown")
 *         #if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetAbsoluteyearDown")
 */
    goto __pyx_L237;
  }

  /* "EMTree.pyx":1430
 *             #self.complained.add("metphi_JetAbsoluteyearDown")
 *         else:
 *             self.metphi_JetAbsoluteyearDown_branch.SetAddress(<void*>&self.metphi_JetAbsoluteyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetBBEC1Up"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetAbsoluteyearDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetAbsoluteyearDown_value)));
  }
  __pyx_L237:;

  /* "EMTree.pyx":1433
 * 
 *         #print "making met_JetBBEC1Up"
 *         self.met_JetBBEC1Up_branch = the_tree.GetBranch("met_JetBBEC1Up")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up" not in self.complained:
 *         if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up":
 */
  __pyx_v_self->met_JetBBEC1Up_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetBBEC1Up"));

  /* "EMTree.pyx":1435
 *         self.met_JetBBEC1Up_branch = the_tree.GetBranch("met_JetBBEC1Up")
 *         #if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up" not in self.complained:
 *         if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetBBEC1Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L241_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L241_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1436
 *         #if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up" not in self.complained:
 *         if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1436, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1435
 *         self.met_JetBBEC1Up_branch = the_tree.GetBranch("met_JetBBEC1Up")
 *         #if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up" not in self.complained:
 *         if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1Up")
 */
    goto __pyx_L240;
  }

  /* "EMTree.pyx":1439
 *             #self.complained.add("met_JetBBEC1Up")
 *         else:
 *             self.met_JetBBEC1Up_branch.SetAddress(<void*>&self.met_JetBBEC1Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetBBEC1Up"
 */
  /*else*/ {
    __pyx_v_self->met_JetBBEC1Up_branch->SetAddress(((void *)(&__pyx_v_self->met_JetBBEC1Up_value)));
  }
  __pyx_L240:;

  /* "EMTree.pyx":1442
 * 
 *         #print "making metphi_JetBBEC1Up"
 *         self.metphi_JetBBEC1Up_branch = the_tree.GetBranch("metphi_JetBBEC1Up")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up" not in self.complained:
 *         if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up":
 */
  __pyx_v_self->metphi_JetBBEC1Up_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetBBEC1Up"));

  /* "EMTree.pyx":1444
 *         self.metphi_JetBBEC1Up_branch = the_tree.GetBranch("metphi_JetBBEC1Up")
 *         #if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up" not in self.complained:
 *         if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetBBEC1Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L244_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L244_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1445
 *         #if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up" not in self.complained:
 *         if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1444
 *         self.metphi_JetBBEC1Up_branch = the_tree.GetBranch("metphi_JetBBEC1Up")
 *         #if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up" not in self.complained:
 *         if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1Up")
 */
    goto __pyx_L243;
  }

  /* "EMTree.pyx":1448
 *             #self.complained.add("metphi_JetBBEC1Up")
 *         else:
 *             self.metphi_JetBBEC1Up_branch.SetAddress(<void*>&self.metphi_JetBBEC1Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetBBEC1Down"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetBBEC1Up_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetBBEC1Up_value)));
  }
  __pyx_L243:;

  /* "EMTree.pyx":1451
 * 
 *         #print "making met_JetBBEC1Down"
 *         self.met_JetBBEC1Down_branch = the_tree.GetBranch("met_JetBBEC1Down")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down" not in self.complained:
 *         if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down":
 */
  __pyx_v_self->met_JetBBEC1Down_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetBBEC1Down"));

  /* "EMTree.pyx":1453
 *         self.met_JetBBEC1Down_branch = the_tree.GetBranch("met_JetBBEC1Down")
 *         #if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down" not in self.complained:
 *         if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetBBEC1Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L247_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L247_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1454
 *         #if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down" not in self.complained:
 *         if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1453
 *         self.met_JetBBEC1Down_branch = the_tree.GetBranch("met_JetBBEC1Down")
 *         #if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down" not in self.complained:
 *         if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1Down")
 */
    goto __pyx_L246;
  }

  /* "EMTree.pyx":1457
 *             #self.complained.add("met_JetBBEC1Down")
 *         else:
 *             self.met_JetBBEC1Down_branch.SetAddress(<void*>&self.met_JetBBEC1Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetBBEC1Down"
 */
  /*else*/ {
    __pyx_v_self->met_JetBBEC1Down_branch->SetAddress(((void *)(&__pyx_v_self->met_JetBBEC1Down_value)));
  }
  __pyx_L246:;

  /* "EMTree.pyx":1460
 * 
 *         #print "making metphi_JetBBEC1Down"
 *         self.metphi_JetBBEC1Down_branch = the_tree.GetBranch("metphi_JetBBEC1Down")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down" not in self.complained:
 *         if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down":
 */
  __pyx_v_self->metphi_JetBBEC1Down_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetBBEC1Down"));

  /* "EMTree.pyx":1462
 *         self.metphi_JetBBEC1Down_branch = the_tree.GetBranch("metphi_JetBBEC1Down")
 *         #if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down" not in self.complained:
 *         if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetBBEC1Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L250_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L250_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1463
 *         #if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down" not in self.complained:
 *         if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1462
 *         self.metphi_JetBBEC1Down_branch = the_tree.GetBranch("metphi_JetBBEC1Down")
 *         #if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down" not in self.complained:
 *         if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1Down")
 */
    goto __pyx_L249;
  }

  /* "EMTree.pyx":1466
 *             #self.complained.add("metphi_JetBBEC1Down")
 *         else:
 *             self.metphi_JetBBEC1Down_branch.SetAddress(<void*>&self.metphi_JetBBEC1Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetBBEC1yearUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetBBEC1Down_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetBBEC1Down_value)));
  }
  __pyx_L249:;

  /* "EMTree.pyx":1469
 * 
 *         #print "making met_JetBBEC1yearUp"
 *         self.met_JetBBEC1yearUp_branch = the_tree.GetBranch("met_JetBBEC1yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp" not in self.complained:
 *         if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp":
 */
  __pyx_v_self->met_JetBBEC1yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetBBEC1yearUp"));

  /* "EMTree.pyx":1471
 *         self.met_JetBBEC1yearUp_branch = the_tree.GetBranch("met_JetBBEC1yearUp")
 *         #if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp" not in self.complained:
 *         if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetBBEC1yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L253_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L253_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1472
 *         #if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp" not in self.complained:
 *         if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1471
 *         self.met_JetBBEC1yearUp_branch = the_tree.GetBranch("met_JetBBEC1yearUp")
 *         #if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp" not in self.complained:
 *         if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1yearUp")
 */
    goto __pyx_L252;
  }

  /* "EMTree.pyx":1475
 *             #self.complained.add("met_JetBBEC1yearUp")
 *         else:
 *             self.met_JetBBEC1yearUp_branch.SetAddress(<void*>&self.met_JetBBEC1yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetBBEC1yearUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetBBEC1yearUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetBBEC1yearUp_value)));
  }
  __pyx_L252:;

  /* "EMTree.pyx":1478
 * 
 *         #print "making metphi_JetBBEC1yearUp"
 *         self.metphi_JetBBEC1yearUp_branch = the_tree.GetBranch("metphi_JetBBEC1yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp" not in self.complained:
 *         if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp":
 */
  __pyx_v_self->metphi_JetBBEC1yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetBBEC1yearUp"));

  /* "EMTree.pyx":1480
 *         self.metphi_JetBBEC1yearUp_branch = the_tree.GetBranch("metphi_JetBBEC1yearUp")
 *         #if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp" not in self.complained:
 *         if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetBBEC1yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L256_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L256_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1481
 *         #if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp" not in self.complained:
 *         if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1480
 *         self.metphi_JetBBEC1yearUp_branch = the_tree.GetBranch("metphi_JetBBEC1yearUp")
 *         #if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp" not in self.complained:
 *         if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1yearUp")
 */
    goto __pyx_L255;
  }

  /* "EMTree.pyx":1484
 *             #self.complained.add("metphi_JetBBEC1yearUp")
 *         else:
 *             self.metphi_JetBBEC1yearUp_branch.SetAddress(<void*>&self.metphi_JetBBEC1yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetBBEC1yearDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetBBEC1yearUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetBBEC1yearUp_value)));
  }
  __pyx_L255:;

  /* "EMTree.pyx":1487
 * 
 *         #print "making met_JetBBEC1yearDown"
 *         self.met_JetBBEC1yearDown_branch = the_tree.GetBranch("met_JetBBEC1yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown" not in self.complained:
 *         if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown":
 */
  __pyx_v_self->met_JetBBEC1yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetBBEC1yearDown"));

  /* "EMTree.pyx":1489
 *         self.met_JetBBEC1yearDown_branch = the_tree.GetBranch("met_JetBBEC1yearDown")
 *         #if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown" not in self.complained:
 *         if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetBBEC1yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L259_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L259_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1490
 *         #if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown" not in self.complained:
 *         if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1489
 *         self.met_JetBBEC1yearDown_branch = the_tree.GetBranch("met_JetBBEC1yearDown")
 *         #if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown" not in self.complained:
 *         if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetBBEC1yearDown")
 */
    goto __pyx_L258;
  }

  /* "EMTree.pyx":1493
 *             #self.complained.add("met_JetBBEC1yearDown")
 *         else:
 *             self.met_JetBBEC1yearDown_branch.SetAddress(<void*>&self.met_JetBBEC1yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetBBEC1yearDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetBBEC1yearDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetBBEC1yearDown_value)));
  }
  __pyx_L258:;

  /* "EMTree.pyx":1496
 * 
 *         #print "making metphi_JetBBEC1yearDown"
 *         self.metphi_JetBBEC1yearDown_branch = the_tree.GetBranch("metphi_JetBBEC1yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown" not in self.complained:
 *         if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown":
 */
  __pyx_v_self->metphi_JetBBEC1yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetBBEC1yearDown"));

  /* "EMTree.pyx":1498
 *         self.metphi_JetBBEC1yearDown_branch = the_tree.GetBranch("metphi_JetBBEC1yearDown")
 *         #if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown" not in self.complained:
 *         if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetBBEC1yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L262_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L262_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1499
 *         #if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown" not in self.complained:
 *         if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1498
 *         self.metphi_JetBBEC1yearDown_branch = the_tree.GetBranch("metphi_JetBBEC1yearDown")
 *         #if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown" not in self.complained:
 *         if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetBBEC1yearDown")
 */
    goto __pyx_L261;
  }

  /* "EMTree.pyx":1502
 *             #self.complained.add("metphi_JetBBEC1yearDown")
 *         else:
 *             self.metphi_JetBBEC1yearDown_branch.SetAddress(<void*>&self.metphi_JetBBEC1yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetEC2Up"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetBBEC1yearDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetBBEC1yearDown_value)));
  }
  __pyx_L261:;

  /* "EMTree.pyx":1505
 * 
 *         #print "making met_JetEC2Up"
 *         self.met_JetEC2Up_branch = the_tree.GetBranch("met_JetEC2Up")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetEC2Up_branch and "met_JetEC2Up" not in self.complained:
 *         if not self.met_JetEC2Up_branch and "met_JetEC2Up":
 */
  __pyx_v_self->met_JetEC2Up_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetEC2Up"));

  /* "EMTree.pyx":1507
 *         self.met_JetEC2Up_branch = the_tree.GetBranch("met_JetEC2Up")
 *         #if not self.met_JetEC2Up_branch and "met_JetEC2Up" not in self.complained:
 *         if not self.met_JetEC2Up_branch and "met_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetEC2Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L265_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L265_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1508
 *         #if not self.met_JetEC2Up_branch and "met_JetEC2Up" not in self.complained:
 *         if not self.met_JetEC2Up_branch and "met_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1507
 *         self.met_JetEC2Up_branch = the_tree.GetBranch("met_JetEC2Up")
 *         #if not self.met_JetEC2Up_branch and "met_JetEC2Up" not in self.complained:
 *         if not self.met_JetEC2Up_branch and "met_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2Up")
 */
    goto __pyx_L264;
  }

  /* "EMTree.pyx":1511
 *             #self.complained.add("met_JetEC2Up")
 *         else:
 *             self.met_JetEC2Up_branch.SetAddress(<void*>&self.met_JetEC2Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetEC2Up"
 */
  /*else*/ {
    __pyx_v_self->met_JetEC2Up_branch->SetAddress(((void *)(&__pyx_v_self->met_JetEC2Up_value)));
  }
  __pyx_L264:;

  /* "EMTree.pyx":1514
 * 
 *         #print "making metphi_JetEC2Up"
 *         self.metphi_JetEC2Up_branch = the_tree.GetBranch("metphi_JetEC2Up")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up" not in self.complained:
 *         if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up":
 */
  __pyx_v_self->metphi_JetEC2Up_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetEC2Up"));

  /* "EMTree.pyx":1516
 *         self.metphi_JetEC2Up_branch = the_tree.GetBranch("metphi_JetEC2Up")
 *         #if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up" not in self.complained:
 *         if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetEC2Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L268_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L268_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1517
 *         #if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up" not in self.complained:
 *         if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1516
 *         self.metphi_JetEC2Up_branch = the_tree.GetBranch("metphi_JetEC2Up")
 *         #if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up" not in self.complained:
 *         if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2Up")
 */
    goto __pyx_L267;
  }

  /* "EMTree.pyx":1520
 *             #self.complained.add("metphi_JetEC2Up")
 *         else:
 *             self.metphi_JetEC2Up_branch.SetAddress(<void*>&self.metphi_JetEC2Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetEC2Down"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetEC2Up_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetEC2Up_value)));
  }
  __pyx_L267:;

  /* "EMTree.pyx":1523
 * 
 *         #print "making met_JetEC2Down"
 *         self.met_JetEC2Down_branch = the_tree.GetBranch("met_JetEC2Down")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetEC2Down_branch and "met_JetEC2Down" not in self.complained:
 *         if not self.met_JetEC2Down_branch and "met_JetEC2Down":
 */
  __pyx_v_self->met_JetEC2Down_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetEC2Down"));

  /* "EMTree.pyx":1525
 *         self.met_JetEC2Down_branch = the_tree.GetBranch("met_JetEC2Down")
 *         #if not self.met_JetEC2Down_branch and "met_JetEC2Down" not in self.complained:
 *         if not self.met_JetEC2Down_branch and "met_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetEC2Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L271_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L271_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1526
 *         #if not self.met_JetEC2Down_branch and "met_JetEC2Down" not in self.complained:
 *         if not self.met_JetEC2Down_branch and "met_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1525
 *         self.met_JetEC2Down_branch = the_tree.GetBranch("met_JetEC2Down")
 *         #if not self.met_JetEC2Down_branch and "met_JetEC2Down" not in self.complained:
 *         if not self.met_JetEC2Down_branch and "met_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2Down")
 */
    goto __pyx_L270;
  }

  /* "EMTree.pyx":1529
 *             #self.complained.add("met_JetEC2Down")
 *         else:
 *             self.met_JetEC2Down_branch.SetAddress(<void*>&self.met_JetEC2Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetEC2Down"
 */
  /*else*/ {
    __pyx_v_self->met_JetEC2Down_branch->SetAddress(((void *)(&__pyx_v_self->met_JetEC2Down_value)));
  }
  __pyx_L270:;

  /* "EMTree.pyx":1532
 * 
 *         #print "making metphi_JetEC2Down"
 *         self.metphi_JetEC2Down_branch = the_tree.GetBranch("metphi_JetEC2Down")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down" not in self.complained:
 *         if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down":
 */
  __pyx_v_self->metphi_JetEC2Down_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetEC2Down"));

  /* "EMTree.pyx":1534
 *         self.metphi_JetEC2Down_branch = the_tree.GetBranch("metphi_JetEC2Down")
 *         #if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down" not in self.complained:
 *         if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetEC2Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L274_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L274_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1535
 *         #if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down" not in self.complained:
 *         if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1534
 *         self.metphi_JetEC2Down_branch = the_tree.GetBranch("metphi_JetEC2Down")
 *         #if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down" not in self.complained:
 *         if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2Down")
 */
    goto __pyx_L273;
  }

  /* "EMTree.pyx":1538
 *             #self.complained.add("metphi_JetEC2Down")
 *         else:
 *             self.metphi_JetEC2Down_branch.SetAddress(<void*>&self.metphi_JetEC2Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetEC2yearUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetEC2Down_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetEC2Down_value)));
  }
  __pyx_L273:;

  /* "EMTree.pyx":1541
 * 
 *         #print "making met_JetEC2yearUp"
 *         self.met_JetEC2yearUp_branch = the_tree.GetBranch("met_JetEC2yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp" not in self.complained:
 *         if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp":
 */
  __pyx_v_self->met_JetEC2yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetEC2yearUp"));

  /* "EMTree.pyx":1543
 *         self.met_JetEC2yearUp_branch = the_tree.GetBranch("met_JetEC2yearUp")
 *         #if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp" not in self.complained:
 *         if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetEC2yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L277_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L277_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1544
 *         #if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp" not in self.complained:
 *         if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1543
 *         self.met_JetEC2yearUp_branch = the_tree.GetBranch("met_JetEC2yearUp")
 *         #if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp" not in self.complained:
 *         if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2yearUp")
 */
    goto __pyx_L276;
  }

  /* "EMTree.pyx":1547
 *             #self.complained.add("met_JetEC2yearUp")
 *         else:
 *             self.met_JetEC2yearUp_branch.SetAddress(<void*>&self.met_JetEC2yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetEC2yearUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetEC2yearUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetEC2yearUp_value)));
  }
  __pyx_L276:;

  /* "EMTree.pyx":1550
 * 
 *         #print "making metphi_JetEC2yearUp"
 *         self.metphi_JetEC2yearUp_branch = the_tree.GetBranch("metphi_JetEC2yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp" not in self.complained:
 *         if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp":
 */
  __pyx_v_self->metphi_JetEC2yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetEC2yearUp"));

  /* "EMTree.pyx":1552
 *         self.metphi_JetEC2yearUp_branch = the_tree.GetBranch("metphi_JetEC2yearUp")
 *         #if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp" not in self.complained:
 *         if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetEC2yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L280_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L280_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1553
 *         #if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp" not in self.complained:
 *         if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1552
 *         self.metphi_JetEC2yearUp_branch = the_tree.GetBranch("metphi_JetEC2yearUp")
 *         #if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp" not in self.complained:
 *         if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2yearUp")
 */
    goto __pyx_L279;
  }

  /* "EMTree.pyx":1556
 *             #self.complained.add("metphi_JetEC2yearUp")
 *         else:
 *             self.metphi_JetEC2yearUp_branch.SetAddress(<void*>&self.metphi_JetEC2yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetEC2yearDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetEC2yearUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetEC2yearUp_value)));
  }
  __pyx_L279:;

  /* "EMTree.pyx":1559
 * 
 *         #print "making met_JetEC2yearDown"
 *         self.met_JetEC2yearDown_branch = the_tree.GetBranch("met_JetEC2yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown" not in self.complained:
 *         if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown":
 */
  __pyx_v_self->met_JetEC2yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetEC2yearDown"));

  /* "EMTree.pyx":1561
 *         self.met_JetEC2yearDown_branch = the_tree.GetBranch("met_JetEC2yearDown")
 *         #if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown" not in self.complained:
 *         if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetEC2yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L283_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L283_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1562
 *         #if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown" not in self.complained:
 *         if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1561
 *         self.met_JetEC2yearDown_branch = the_tree.GetBranch("met_JetEC2yearDown")
 *         #if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown" not in self.complained:
 *         if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetEC2yearDown")
 */
    goto __pyx_L282;
  }

  /* "EMTree.pyx":1565
 *             #self.complained.add("met_JetEC2yearDown")
 *         else:
 *             self.met_JetEC2yearDown_branch.SetAddress(<void*>&self.met_JetEC2yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetEC2yearDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetEC2yearDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetEC2yearDown_value)));
  }
  __pyx_L282:;

  /* "EMTree.pyx":1568
 * 
 *         #print "making metphi_JetEC2yearDown"
 *         self.metphi_JetEC2yearDown_branch = the_tree.GetBranch("metphi_JetEC2yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown" not in self.complained:
 *         if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown":
 */
  __pyx_v_self->metphi_JetEC2yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetEC2yearDown"));

  /* "EMTree.pyx":1570
 *         self.metphi_JetEC2yearDown_branch = the_tree.GetBranch("metphi_JetEC2yearDown")
 *         #if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown" not in self.complained:
 *         if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetEC2yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L286_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L286_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1571
 *         #if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown" not in self.complained:
 *         if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1570
 *         self.metphi_JetEC2yearDown_branch = the_tree.GetBranch("metphi_JetEC2yearDown")
 *         #if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown" not in self.complained:
 *         if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetEC2yearDown")
 */
    goto __pyx_L285;
  }

  /* "EMTree.pyx":1574
 *             #self.complained.add("metphi_JetEC2yearDown")
 *         else:
 *             self.metphi_JetEC2yearDown_branch.SetAddress(<void*>&self.metphi_JetEC2yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetFlavorQCDUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetEC2yearDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetEC2yearDown_value)));
  }
  __pyx_L285:;

  /* "EMTree.pyx":1577
 * 
 *         #print "making met_JetFlavorQCDUp"
 *         self.met_JetFlavorQCDUp_branch = the_tree.GetBranch("met_JetFlavorQCDUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp" not in self.complained:
 *         if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp":
 */
  __pyx_v_self->met_JetFlavorQCDUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetFlavorQCDUp"));

  /* "EMTree.pyx":1579
 *         self.met_JetFlavorQCDUp_branch = the_tree.GetBranch("met_JetFlavorQCDUp")
 *         #if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp" not in self.complained:
 *         if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetFlavorQCDUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetFlavorQCDUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L289_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L289_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1580
 *         #if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp" not in self.complained:
 *         if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetFlavorQCDUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1579
 *         self.met_JetFlavorQCDUp_branch = the_tree.GetBranch("met_JetFlavorQCDUp")
 *         #if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp" not in self.complained:
 *         if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetFlavorQCDUp")
 */
    goto __pyx_L288;
  }

  /* "EMTree.pyx":1583
 *             #self.complained.add("met_JetFlavorQCDUp")
 *         else:
 *             self.met_JetFlavorQCDUp_branch.SetAddress(<void*>&self.met_JetFlavorQCDUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetFlavorQCDUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetFlavorQCDUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetFlavorQCDUp_value)));
  }
  __pyx_L288:;

  /* "EMTree.pyx":1586
 * 
 *         #print "making metphi_JetFlavorQCDUp"
 *         self.metphi_JetFlavorQCDUp_branch = the_tree.GetBranch("metphi_JetFlavorQCDUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp" not in self.complained:
 *         if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp":
 */
  __pyx_v_self->metphi_JetFlavorQCDUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetFlavorQCDUp"));

  /* "EMTree.pyx":1588
 *         self.metphi_JetFlavorQCDUp_branch = the_tree.GetBranch("metphi_JetFlavorQCDUp")
 *         #if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp" not in self.complained:
 *         if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetFlavorQCDUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetFlavorQCDUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L292_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L292_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1589
 *         #if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp" not in self.complained:
 *         if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetFlavorQCDUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1588
 *         self.metphi_JetFlavorQCDUp_branch = the_tree.GetBranch("metphi_JetFlavorQCDUp")
 *         #if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp" not in self.complained:
 *         if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetFlavorQCDUp")
 */
    goto __pyx_L291;
  }

  /* "EMTree.pyx":1592
 *             #self.complained.add("metphi_JetFlavorQCDUp")
 *         else:
 *             self.metphi_JetFlavorQCDUp_branch.SetAddress(<void*>&self.metphi_JetFlavorQCDUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetFlavorQCDDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetFlavorQCDUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetFlavorQCDUp_value)));
  }
  __pyx_L291:;

  /* "EMTree.pyx":1595
 * 
 *         #print "making met_JetFlavorQCDDown"
 *         self.met_JetFlavorQCDDown_branch = the_tree.GetBranch("met_JetFlavorQCDDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown" not in self.complained:
 *         if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown":
 */
  __pyx_v_self->met_JetFlavorQCDDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetFlavorQCDDown"));

  /* "EMTree.pyx":1597
 *         self.met_JetFlavorQCDDown_branch = the_tree.GetBranch("met_JetFlavorQCDDown")
 *         #if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown" not in self.complained:
 *         if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetFlavorQCDDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetFlavorQCDDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L295_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L295_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1598
 *         #if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown" not in self.complained:
 *         if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetFlavorQCDDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1597
 *         self.met_JetFlavorQCDDown_branch = the_tree.GetBranch("met_JetFlavorQCDDown")
 *         #if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown" not in self.complained:
 *         if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetFlavorQCDDown")
 */
    goto __pyx_L294;
  }

  /* "EMTree.pyx":1601
 *             #self.complained.add("met_JetFlavorQCDDown")
 *         else:
 *             self.met_JetFlavorQCDDown_branch.SetAddress(<void*>&self.met_JetFlavorQCDDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetFlavorQCDDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetFlavorQCDDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetFlavorQCDDown_value)));
  }
  __pyx_L294:;

  /* "EMTree.pyx":1604
 * 
 *         #print "making metphi_JetFlavorQCDDown"
 *         self.metphi_JetFlavorQCDDown_branch = the_tree.GetBranch("metphi_JetFlavorQCDDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown" not in self.complained:
 *         if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown":
 */
  __pyx_v_self->metphi_JetFlavorQCDDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetFlavorQCDDown"));

  /* "EMTree.pyx":1606
 *         self.metphi_JetFlavorQCDDown_branch = the_tree.GetBranch("metphi_JetFlavorQCDDown")
 *         #if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown" not in self.complained:
 *         if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetFlavorQCDDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetFlavorQCDDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L298_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L298_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1607
 *         #if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown" not in self.complained:
 *         if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetFlavorQCDDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1606
 *         self.metphi_JetFlavorQCDDown_branch = the_tree.GetBranch("metphi_JetFlavorQCDDown")
 *         #if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown" not in self.complained:
 *         if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetFlavorQCDDown")
 */
    goto __pyx_L297;
  }

  /* "EMTree.pyx":1610
 *             #self.complained.add("metphi_JetFlavorQCDDown")
 *         else:
 *             self.metphi_JetFlavorQCDDown_branch.SetAddress(<void*>&self.metphi_JetFlavorQCDDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetHFUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetFlavorQCDDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetFlavorQCDDown_value)));
  }
  __pyx_L297:;

  /* "EMTree.pyx":1613
 * 
 *         #print "making met_JetHFUp"
 *         self.met_JetHFUp_branch = the_tree.GetBranch("met_JetHFUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetHFUp_branch and "met_JetHFUp" not in self.complained:
 *         if not self.met_JetHFUp_branch and "met_JetHFUp":
 */
  __pyx_v_self->met_JetHFUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetHFUp"));

  /* "EMTree.pyx":1615
 *         self.met_JetHFUp_branch = the_tree.GetBranch("met_JetHFUp")
 *         #if not self.met_JetHFUp_branch and "met_JetHFUp" not in self.complained:
 *         if not self.met_JetHFUp_branch and "met_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetHFUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L301_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L301_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1616
 *         #if not self.met_JetHFUp_branch and "met_JetHFUp" not in self.complained:
 *         if not self.met_JetHFUp_branch and "met_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch met_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1615
 *         self.met_JetHFUp_branch = the_tree.GetBranch("met_JetHFUp")
 *         #if not self.met_JetHFUp_branch and "met_JetHFUp" not in self.complained:
 *         if not self.met_JetHFUp_branch and "met_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFUp")
 */
    goto __pyx_L300;
  }

  /* "EMTree.pyx":1619
 *             #self.complained.add("met_JetHFUp")
 *         else:
 *             self.met_JetHFUp_branch.SetAddress(<void*>&self.met_JetHFUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetHFUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetHFUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetHFUp_value)));
  }
  __pyx_L300:;

  /* "EMTree.pyx":1622
 * 
 *         #print "making metphi_JetHFUp"
 *         self.metphi_JetHFUp_branch = the_tree.GetBranch("metphi_JetHFUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetHFUp_branch and "metphi_JetHFUp" not in self.complained:
 *         if not self.metphi_JetHFUp_branch and "metphi_JetHFUp":
 */
  __pyx_v_self->metphi_JetHFUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetHFUp"));

  /* "EMTree.pyx":1624
 *         self.metphi_JetHFUp_branch = the_tree.GetBranch("metphi_JetHFUp")
 *         #if not self.metphi_JetHFUp_branch and "metphi_JetHFUp" not in self.complained:
 *         if not self.metphi_JetHFUp_branch and "metphi_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetHFUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L304_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L304_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1625
 *         #if not self.metphi_JetHFUp_branch and "metphi_JetHFUp" not in self.complained:
 *         if not self.metphi_JetHFUp_branch and "metphi_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1624
 *         self.metphi_JetHFUp_branch = the_tree.GetBranch("metphi_JetHFUp")
 *         #if not self.metphi_JetHFUp_branch and "metphi_JetHFUp" not in self.complained:
 *         if not self.metphi_JetHFUp_branch and "metphi_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFUp")
 */
    goto __pyx_L303;
  }

  /* "EMTree.pyx":1628
 *             #self.complained.add("metphi_JetHFUp")
 *         else:
 *             self.metphi_JetHFUp_branch.SetAddress(<void*>&self.metphi_JetHFUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetHFDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetHFUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetHFUp_value)));
  }
  __pyx_L303:;

  /* "EMTree.pyx":1631
 * 
 *         #print "making met_JetHFDown"
 *         self.met_JetHFDown_branch = the_tree.GetBranch("met_JetHFDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetHFDown_branch and "met_JetHFDown" not in self.complained:
 *         if not self.met_JetHFDown_branch and "met_JetHFDown":
 */
  __pyx_v_self->met_JetHFDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetHFDown"));

  /* "EMTree.pyx":1633
 *         self.met_JetHFDown_branch = the_tree.GetBranch("met_JetHFDown")
 *         #if not self.met_JetHFDown_branch and "met_JetHFDown" not in self.complained:
 *         if not self.met_JetHFDown_branch and "met_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetHFDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L307_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L307_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1634
 *         #if not self.met_JetHFDown_branch and "met_JetHFDown" not in self.complained:
 *         if not self.met_JetHFDown_branch and "met_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch met_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1633
 *         self.met_JetHFDown_branch = the_tree.GetBranch("met_JetHFDown")
 *         #if not self.met_JetHFDown_branch and "met_JetHFDown" not in self.complained:
 *         if not self.met_JetHFDown_branch and "met_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFDown")
 */
    goto __pyx_L306;
  }

  /* "EMTree.pyx":1637
 *             #self.complained.add("met_JetHFDown")
 *         else:
 *             self.met_JetHFDown_branch.SetAddress(<void*>&self.met_JetHFDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetHFDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetHFDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetHFDown_value)));
  }
  __pyx_L306:;

  /* "EMTree.pyx":1640
 * 
 *         #print "making metphi_JetHFDown"
 *         self.metphi_JetHFDown_branch = the_tree.GetBranch("metphi_JetHFDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetHFDown_branch and "metphi_JetHFDown" not in self.complained:
 *         if not self.metphi_JetHFDown_branch and "metphi_JetHFDown":
 */
  __pyx_v_self->metphi_JetHFDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetHFDown"));

  /* "EMTree.pyx":1642
 *         self.metphi_JetHFDown_branch = the_tree.GetBranch("metphi_JetHFDown")
 *         #if not self.metphi_JetHFDown_branch and "metphi_JetHFDown" not in self.complained:
 *         if not self.metphi_JetHFDown_branch and "metphi_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetHFDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L310_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L310_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1643
 *         #if not self.metphi_JetHFDown_branch and "metphi_JetHFDown" not in self.complained:
 *         if not self.metphi_JetHFDown_branch and "metphi_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1642
 *         self.metphi_JetHFDown_branch = the_tree.GetBranch("metphi_JetHFDown")
 *         #if not self.metphi_JetHFDown_branch and "metphi_JetHFDown" not in self.complained:
 *         if not self.metphi_JetHFDown_branch and "metphi_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFDown")
 */
    goto __pyx_L309;
  }

  /* "EMTree.pyx":1646
 *             #self.complained.add("metphi_JetHFDown")
 *         else:
 *             self.metphi_JetHFDown_branch.SetAddress(<void*>&self.metphi_JetHFDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetHFyearUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetHFDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetHFDown_value)));
  }
  __pyx_L309:;

  /* "EMTree.pyx":1649
 * 
 *         #print "making met_JetHFyearUp"
 *         self.met_JetHFyearUp_branch = the_tree.GetBranch("met_JetHFyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetHFyearUp_branch and "met_JetHFyearUp" not in self.complained:
 *         if not self.met_JetHFyearUp_branch and "met_JetHFyearUp":
 */
  __pyx_v_self->met_JetHFyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetHFyearUp"));

  /* "EMTree.pyx":1651
 *         self.met_JetHFyearUp_branch = the_tree.GetBranch("met_JetHFyearUp")
 *         #if not self.met_JetHFyearUp_branch and "met_JetHFyearUp" not in self.complained:
 *         if not self.met_JetHFyearUp_branch and "met_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetHFyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L313_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L313_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1652
 *         #if not self.met_JetHFyearUp_branch and "met_JetHFyearUp" not in self.complained:
 *         if not self.met_JetHFyearUp_branch and "met_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1651
 *         self.met_JetHFyearUp_branch = the_tree.GetBranch("met_JetHFyearUp")
 *         #if not self.met_JetHFyearUp_branch and "met_JetHFyearUp" not in self.complained:
 *         if not self.met_JetHFyearUp_branch and "met_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFyearUp")
 */
    goto __pyx_L312;
  }

  /* "EMTree.pyx":1655
 *             #self.complained.add("met_JetHFyearUp")
 *         else:
 *             self.met_JetHFyearUp_branch.SetAddress(<void*>&self.met_JetHFyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetHFyearUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetHFyearUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetHFyearUp_value)));
  }
  __pyx_L312:;

  /* "EMTree.pyx":1658
 * 
 *         #print "making metphi_JetHFyearUp"
 *         self.metphi_JetHFyearUp_branch = the_tree.GetBranch("metphi_JetHFyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp" not in self.complained:
 *         if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp":
 */
  __pyx_v_self->metphi_JetHFyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetHFyearUp"));

  /* "EMTree.pyx":1660
 *         self.metphi_JetHFyearUp_branch = the_tree.GetBranch("metphi_JetHFyearUp")
 *         #if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp" not in self.complained:
 *         if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetHFyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L316_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L316_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1661
 *         #if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp" not in self.complained:
 *         if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1661, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1660
 *         self.metphi_JetHFyearUp_branch = the_tree.GetBranch("metphi_JetHFyearUp")
 *         #if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp" not in self.complained:
 *         if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFyearUp")
 */
    goto __pyx_L315;
  }

  /* "EMTree.pyx":1664
 *             #self.complained.add("metphi_JetHFyearUp")
 *         else:
 *             self.metphi_JetHFyearUp_branch.SetAddress(<void*>&self.metphi_JetHFyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetHFyearDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetHFyearUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetHFyearUp_value)));
  }
  __pyx_L315:;

  /* "EMTree.pyx":1667
 * 
 *         #print "making met_JetHFyearDown"
 *         self.met_JetHFyearDown_branch = the_tree.GetBranch("met_JetHFyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetHFyearDown_branch and "met_JetHFyearDown" not in self.complained:
 *         if not self.met_JetHFyearDown_branch and "met_JetHFyearDown":
 */
  __pyx_v_self->met_JetHFyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetHFyearDown"));

  /* "EMTree.pyx":1669
 *         self.met_JetHFyearDown_branch = the_tree.GetBranch("met_JetHFyearDown")
 *         #if not self.met_JetHFyearDown_branch and "met_JetHFyearDown" not in self.complained:
 *         if not self.met_JetHFyearDown_branch and "met_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetHFyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L319_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L319_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1670
 *         #if not self.met_JetHFyearDown_branch and "met_JetHFyearDown" not in self.complained:
 *         if not self.met_JetHFyearDown_branch and "met_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1669
 *         self.met_JetHFyearDown_branch = the_tree.GetBranch("met_JetHFyearDown")
 *         #if not self.met_JetHFyearDown_branch and "met_JetHFyearDown" not in self.complained:
 *         if not self.met_JetHFyearDown_branch and "met_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetHFyearDown")
 */
    goto __pyx_L318;
  }

  /* "EMTree.pyx":1673
 *             #self.complained.add("met_JetHFyearDown")
 *         else:
 *             self.met_JetHFyearDown_branch.SetAddress(<void*>&self.met_JetHFyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetHFyearDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetHFyearDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetHFyearDown_value)));
  }
  __pyx_L318:;

  /* "EMTree.pyx":1676
 * 
 *         #print "making metphi_JetHFyearDown"
 *         self.metphi_JetHFyearDown_branch = the_tree.GetBranch("metphi_JetHFyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown" not in self.complained:
 *         if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown":
 */
  __pyx_v_self->metphi_JetHFyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetHFyearDown"));

  /* "EMTree.pyx":1678
 *         self.metphi_JetHFyearDown_branch = the_tree.GetBranch("metphi_JetHFyearDown")
 *         #if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown" not in self.complained:
 *         if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetHFyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L322_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L322_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1679
 *         #if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown" not in self.complained:
 *         if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1678
 *         self.metphi_JetHFyearDown_branch = the_tree.GetBranch("metphi_JetHFyearDown")
 *         #if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown" not in self.complained:
 *         if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetHFyearDown")
 */
    goto __pyx_L321;
  }

  /* "EMTree.pyx":1682
 *             #self.complained.add("metphi_JetHFyearDown")
 *         else:
 *             self.metphi_JetHFyearDown_branch.SetAddress(<void*>&self.metphi_JetHFyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetRelativeBalUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetHFyearDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetHFyearDown_value)));
  }
  __pyx_L321:;

  /* "EMTree.pyx":1685
 * 
 *         #print "making met_JetRelativeBalUp"
 *         self.met_JetRelativeBalUp_branch = the_tree.GetBranch("met_JetRelativeBalUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp" not in self.complained:
 *         if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp":
 */
  __pyx_v_self->met_JetRelativeBalUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetRelativeBalUp"));

  /* "EMTree.pyx":1687
 *         self.met_JetRelativeBalUp_branch = the_tree.GetBranch("met_JetRelativeBalUp")
 *         #if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp" not in self.complained:
 *         if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeBalUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetRelativeBalUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L325_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L325_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1688
 *         #if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp" not in self.complained:
 *         if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeBalUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1687
 *         self.met_JetRelativeBalUp_branch = the_tree.GetBranch("met_JetRelativeBalUp")
 *         #if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp" not in self.complained:
 *         if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeBalUp")
 */
    goto __pyx_L324;
  }

  /* "EMTree.pyx":1691
 *             #self.complained.add("met_JetRelativeBalUp")
 *         else:
 *             self.met_JetRelativeBalUp_branch.SetAddress(<void*>&self.met_JetRelativeBalUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetRelativeBalUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetRelativeBalUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetRelativeBalUp_value)));
  }
  __pyx_L324:;

  /* "EMTree.pyx":1694
 * 
 *         #print "making metphi_JetRelativeBalUp"
 *         self.metphi_JetRelativeBalUp_branch = the_tree.GetBranch("metphi_JetRelativeBalUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp" not in self.complained:
 *         if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp":
 */
  __pyx_v_self->metphi_JetRelativeBalUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetRelativeBalUp"));

  /* "EMTree.pyx":1696
 *         self.metphi_JetRelativeBalUp_branch = the_tree.GetBranch("metphi_JetRelativeBalUp")
 *         #if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp" not in self.complained:
 *         if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeBalUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetRelativeBalUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L328_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L328_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1697
 *         #if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp" not in self.complained:
 *         if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeBalUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1696
 *         self.metphi_JetRelativeBalUp_branch = the_tree.GetBranch("metphi_JetRelativeBalUp")
 *         #if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp" not in self.complained:
 *         if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeBalUp")
 */
    goto __pyx_L327;
  }

  /* "EMTree.pyx":1700
 *             #self.complained.add("metphi_JetRelativeBalUp")
 *         else:
 *             self.metphi_JetRelativeBalUp_branch.SetAddress(<void*>&self.metphi_JetRelativeBalUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetRelativeBalDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetRelativeBalUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetRelativeBalUp_value)));
  }
  __pyx_L327:;

  /* "EMTree.pyx":1703
 * 
 *         #print "making met_JetRelativeBalDown"
 *         self.met_JetRelativeBalDown_branch = the_tree.GetBranch("met_JetRelativeBalDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown" not in self.complained:
 *         if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown":
 */
  __pyx_v_self->met_JetRelativeBalDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetRelativeBalDown"));

  /* "EMTree.pyx":1705
 *         self.met_JetRelativeBalDown_branch = the_tree.GetBranch("met_JetRelativeBalDown")
 *         #if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown" not in self.complained:
 *         if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeBalDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetRelativeBalDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L331_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L331_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1706
 *         #if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown" not in self.complained:
 *         if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeBalDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1705
 *         self.met_JetRelativeBalDown_branch = the_tree.GetBranch("met_JetRelativeBalDown")
 *         #if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown" not in self.complained:
 *         if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeBalDown")
 */
    goto __pyx_L330;
  }

  /* "EMTree.pyx":1709
 *             #self.complained.add("met_JetRelativeBalDown")
 *         else:
 *             self.met_JetRelativeBalDown_branch.SetAddress(<void*>&self.met_JetRelativeBalDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetRelativeBalDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetRelativeBalDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetRelativeBalDown_value)));
  }
  __pyx_L330:;

  /* "EMTree.pyx":1712
 * 
 *         #print "making metphi_JetRelativeBalDown"
 *         self.metphi_JetRelativeBalDown_branch = the_tree.GetBranch("metphi_JetRelativeBalDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown" not in self.complained:
 *         if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown":
 */
  __pyx_v_self->metphi_JetRelativeBalDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetRelativeBalDown"));

  /* "EMTree.pyx":1714
 *         self.metphi_JetRelativeBalDown_branch = the_tree.GetBranch("metphi_JetRelativeBalDown")
 *         #if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown" not in self.complained:
 *         if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeBalDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetRelativeBalDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L334_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L334_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1715
 *         #if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown" not in self.complained:
 *         if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeBalDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1714
 *         self.metphi_JetRelativeBalDown_branch = the_tree.GetBranch("metphi_JetRelativeBalDown")
 *         #if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown" not in self.complained:
 *         if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeBalDown")
 */
    goto __pyx_L333;
  }

  /* "EMTree.pyx":1718
 *             #self.complained.add("metphi_JetRelativeBalDown")
 *         else:
 *             self.metphi_JetRelativeBalDown_branch.SetAddress(<void*>&self.metphi_JetRelativeBalDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetRelativeSampleUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetRelativeBalDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetRelativeBalDown_value)));
  }
  __pyx_L333:;

  /* "EMTree.pyx":1721
 * 
 *         #print "making met_JetRelativeSampleUp"
 *         self.met_JetRelativeSampleUp_branch = the_tree.GetBranch("met_JetRelativeSampleUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp" not in self.complained:
 *         if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp":
 */
  __pyx_v_self->met_JetRelativeSampleUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetRelativeSampleUp"));

  /* "EMTree.pyx":1723
 *         self.met_JetRelativeSampleUp_branch = the_tree.GetBranch("met_JetRelativeSampleUp")
 *         #if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp" not in self.complained:
 *         if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeSampleUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetRelativeSampleUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L337_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L337_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1724
 *         #if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp" not in self.complained:
 *         if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeSampleUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1723
 *         self.met_JetRelativeSampleUp_branch = the_tree.GetBranch("met_JetRelativeSampleUp")
 *         #if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp" not in self.complained:
 *         if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeSampleUp")
 */
    goto __pyx_L336;
  }

  /* "EMTree.pyx":1727
 *             #self.complained.add("met_JetRelativeSampleUp")
 *         else:
 *             self.met_JetRelativeSampleUp_branch.SetAddress(<void*>&self.met_JetRelativeSampleUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetRelativeSampleUp"
 */
  /*else*/ {
    __pyx_v_self->met_JetRelativeSampleUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JetRelativeSampleUp_value)));
  }
  __pyx_L336:;

  /* "EMTree.pyx":1730
 * 
 *         #print "making metphi_JetRelativeSampleUp"
 *         self.metphi_JetRelativeSampleUp_branch = the_tree.GetBranch("metphi_JetRelativeSampleUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp" not in self.complained:
 *         if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp":
 */
  __pyx_v_self->metphi_JetRelativeSampleUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetRelativeSampleUp"));

  /* "EMTree.pyx":1732
 *         self.metphi_JetRelativeSampleUp_branch = the_tree.GetBranch("metphi_JetRelativeSampleUp")
 *         #if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp" not in self.complained:
 *         if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeSampleUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetRelativeSampleUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L340_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L340_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1733
 *         #if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp" not in self.complained:
 *         if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeSampleUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1732
 *         self.metphi_JetRelativeSampleUp_branch = the_tree.GetBranch("metphi_JetRelativeSampleUp")
 *         #if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp" not in self.complained:
 *         if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeSampleUp")
 */
    goto __pyx_L339;
  }

  /* "EMTree.pyx":1736
 *             #self.complained.add("metphi_JetRelativeSampleUp")
 *         else:
 *             self.metphi_JetRelativeSampleUp_branch.SetAddress(<void*>&self.metphi_JetRelativeSampleUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JetRelativeSampleDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetRelativeSampleUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetRelativeSampleUp_value)));
  }
  __pyx_L339:;

  /* "EMTree.pyx":1739
 * 
 *         #print "making met_JetRelativeSampleDown"
 *         self.met_JetRelativeSampleDown_branch = the_tree.GetBranch("met_JetRelativeSampleDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown" not in self.complained:
 *         if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown":
 */
  __pyx_v_self->met_JetRelativeSampleDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JetRelativeSampleDown"));

  /* "EMTree.pyx":1741
 *         self.met_JetRelativeSampleDown_branch = the_tree.GetBranch("met_JetRelativeSampleDown")
 *         #if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown" not in self.complained:
 *         if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeSampleDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JetRelativeSampleDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L343_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L343_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1742
 *         #if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown" not in self.complained:
 *         if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeSampleDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1741
 *         self.met_JetRelativeSampleDown_branch = the_tree.GetBranch("met_JetRelativeSampleDown")
 *         #if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown" not in self.complained:
 *         if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JetRelativeSampleDown")
 */
    goto __pyx_L342;
  }

  /* "EMTree.pyx":1745
 *             #self.complained.add("met_JetRelativeSampleDown")
 *         else:
 *             self.met_JetRelativeSampleDown_branch.SetAddress(<void*>&self.met_JetRelativeSampleDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JetRelativeSampleDown"
 */
  /*else*/ {
    __pyx_v_self->met_JetRelativeSampleDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JetRelativeSampleDown_value)));
  }
  __pyx_L342:;

  /* "EMTree.pyx":1748
 * 
 *         #print "making metphi_JetRelativeSampleDown"
 *         self.metphi_JetRelativeSampleDown_branch = the_tree.GetBranch("metphi_JetRelativeSampleDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown" not in self.complained:
 *         if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown":
 */
  __pyx_v_self->metphi_JetRelativeSampleDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JetRelativeSampleDown"));

  /* "EMTree.pyx":1750
 *         self.metphi_JetRelativeSampleDown_branch = the_tree.GetBranch("metphi_JetRelativeSampleDown")
 *         #if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown" not in self.complained:
 *         if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeSampleDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JetRelativeSampleDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L346_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L346_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1751
 *         #if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown" not in self.complained:
 *         if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeSampleDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1750
 *         self.metphi_JetRelativeSampleDown_branch = the_tree.GetBranch("metphi_JetRelativeSampleDown")
 *         #if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown" not in self.complained:
 *         if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JetRelativeSampleDown")
 */
    goto __pyx_L345;
  }

  /* "EMTree.pyx":1754
 *             #self.complained.add("metphi_JetRelativeSampleDown")
 *         else:
 *             self.metphi_JetRelativeSampleDown_branch.SetAddress(<void*>&self.metphi_JetRelativeSampleDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JERUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JetRelativeSampleDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JetRelativeSampleDown_value)));
  }
  __pyx_L345:;

  /* "EMTree.pyx":1757
 * 
 *         #print "making met_JERUp"
 *         self.met_JERUp_branch = the_tree.GetBranch("met_JERUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_JERUp_branch and "met_JERUp" not in self.complained:
 *         if not self.met_JERUp_branch and "met_JERUp":
 */
  __pyx_v_self->met_JERUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JERUp"));

  /* "EMTree.pyx":1759
 *         self.met_JERUp_branch = the_tree.GetBranch("met_JERUp")
 *         #if not self.met_JERUp_branch and "met_JERUp" not in self.complained:
 *         if not self.met_JERUp_branch and "met_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JERUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JERUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L349_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L349_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1760
 *         #if not self.met_JERUp_branch and "met_JERUp" not in self.complained:
 *         if not self.met_JERUp_branch and "met_JERUp":
 *             warnings.warn( "EMTree: Expected branch met_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JERUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1759
 *         self.met_JERUp_branch = the_tree.GetBranch("met_JERUp")
 *         #if not self.met_JERUp_branch and "met_JERUp" not in self.complained:
 *         if not self.met_JERUp_branch and "met_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JERUp")
 */
    goto __pyx_L348;
  }

  /* "EMTree.pyx":1763
 *             #self.complained.add("met_JERUp")
 *         else:
 *             self.met_JERUp_branch.SetAddress(<void*>&self.met_JERUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JERUp"
 */
  /*else*/ {
    __pyx_v_self->met_JERUp_branch->SetAddress(((void *)(&__pyx_v_self->met_JERUp_value)));
  }
  __pyx_L348:;

  /* "EMTree.pyx":1766
 * 
 *         #print "making metphi_JERUp"
 *         self.metphi_JERUp_branch = the_tree.GetBranch("metphi_JERUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JERUp_branch and "metphi_JERUp" not in self.complained:
 *         if not self.metphi_JERUp_branch and "metphi_JERUp":
 */
  __pyx_v_self->metphi_JERUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JERUp"));

  /* "EMTree.pyx":1768
 *         self.metphi_JERUp_branch = the_tree.GetBranch("metphi_JERUp")
 *         #if not self.metphi_JERUp_branch and "metphi_JERUp" not in self.complained:
 *         if not self.metphi_JERUp_branch and "metphi_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JERUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JERUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L352_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L352_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1769
 *         #if not self.metphi_JERUp_branch and "metphi_JERUp" not in self.complained:
 *         if not self.metphi_JERUp_branch and "metphi_JERUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JERUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1768
 *         self.metphi_JERUp_branch = the_tree.GetBranch("metphi_JERUp")
 *         #if not self.metphi_JERUp_branch and "metphi_JERUp" not in self.complained:
 *         if not self.metphi_JERUp_branch and "metphi_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JERUp")
 */
    goto __pyx_L351;
  }

  /* "EMTree.pyx":1772
 *             #self.complained.add("metphi_JERUp")
 *         else:
 *             self.metphi_JERUp_branch.SetAddress(<void*>&self.metphi_JERUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_JERDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_JERUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JERUp_value)));
  }
  __pyx_L351:;

  /* "EMTree.pyx":1775
 * 
 *         #print "making met_JERDown"
 *         self.met_JERDown_branch = the_tree.GetBranch("met_JERDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_JERDown_branch and "met_JERDown" not in self.complained:
 *         if not self.met_JERDown_branch and "met_JERDown":
 */
  __pyx_v_self->met_JERDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_JERDown"));

  /* "EMTree.pyx":1777
 *         self.met_JERDown_branch = the_tree.GetBranch("met_JERDown")
 *         #if not self.met_JERDown_branch and "met_JERDown" not in self.complained:
 *         if not self.met_JERDown_branch and "met_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JERDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_JERDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L355_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L355_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1778
 *         #if not self.met_JERDown_branch and "met_JERDown" not in self.complained:
 *         if not self.met_JERDown_branch and "met_JERDown":
 *             warnings.warn( "EMTree: Expected branch met_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JERDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1777
 *         self.met_JERDown_branch = the_tree.GetBranch("met_JERDown")
 *         #if not self.met_JERDown_branch and "met_JERDown" not in self.complained:
 *         if not self.met_JERDown_branch and "met_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_JERDown")
 */
    goto __pyx_L354;
  }

  /* "EMTree.pyx":1781
 *             #self.complained.add("met_JERDown")
 *         else:
 *             self.met_JERDown_branch.SetAddress(<void*>&self.met_JERDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_JERDown"
 */
  /*else*/ {
    __pyx_v_self->met_JERDown_branch->SetAddress(((void *)(&__pyx_v_self->met_JERDown_value)));
  }
  __pyx_L354:;

  /* "EMTree.pyx":1784
 * 
 *         #print "making metphi_JERDown"
 *         self.metphi_JERDown_branch = the_tree.GetBranch("metphi_JERDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_JERDown_branch and "metphi_JERDown" not in self.complained:
 *         if not self.metphi_JERDown_branch and "metphi_JERDown":
 */
  __pyx_v_self->metphi_JERDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_JERDown"));

  /* "EMTree.pyx":1786
 *         self.metphi_JERDown_branch = the_tree.GetBranch("metphi_JERDown")
 *         #if not self.metphi_JERDown_branch and "metphi_JERDown" not in self.complained:
 *         if not self.metphi_JERDown_branch and "metphi_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JERDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_JERDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L358_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L358_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1787
 *         #if not self.metphi_JERDown_branch and "metphi_JERDown" not in self.complained:
 *         if not self.metphi_JERDown_branch and "metphi_JERDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JERDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1786
 *         self.metphi_JERDown_branch = the_tree.GetBranch("metphi_JERDown")
 *         #if not self.metphi_JERDown_branch and "metphi_JERDown" not in self.complained:
 *         if not self.metphi_JERDown_branch and "metphi_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_JERDown")
 */
    goto __pyx_L357;
  }

  /* "EMTree.pyx":1790
 *             #self.complained.add("metphi_JERDown")
 *         else:
 *             self.metphi_JERDown_branch.SetAddress(<void*>&self.metphi_JERDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_responseUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_JERDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_JERDown_value)));
  }
  __pyx_L357:;

  /* "EMTree.pyx":1793
 * 
 *         #print "making met_responseUp"
 *         self.met_responseUp_branch = the_tree.GetBranch("met_responseUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_responseUp_branch and "met_responseUp" not in self.complained:
 *         if not self.met_responseUp_branch and "met_responseUp":
 */
  __pyx_v_self->met_responseUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_responseUp"));

  /* "EMTree.pyx":1795
 *         self.met_responseUp_branch = the_tree.GetBranch("met_responseUp")
 *         #if not self.met_responseUp_branch and "met_responseUp" not in self.complained:
 *         if not self.met_responseUp_branch and "met_responseUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_responseUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_responseUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_responseUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L361_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L361_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1796
 *         #if not self.met_responseUp_branch and "met_responseUp" not in self.complained:
 *         if not self.met_responseUp_branch and "met_responseUp":
 *             warnings.warn( "EMTree: Expected branch met_responseUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_responseUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1795
 *         self.met_responseUp_branch = the_tree.GetBranch("met_responseUp")
 *         #if not self.met_responseUp_branch and "met_responseUp" not in self.complained:
 *         if not self.met_responseUp_branch and "met_responseUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_responseUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_responseUp")
 */
    goto __pyx_L360;
  }

  /* "EMTree.pyx":1799
 *             #self.complained.add("met_responseUp")
 *         else:
 *             self.met_responseUp_branch.SetAddress(<void*>&self.met_responseUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_responseDown"
 */
  /*else*/ {
    __pyx_v_self->met_responseUp_branch->SetAddress(((void *)(&__pyx_v_self->met_responseUp_value)));
  }
  __pyx_L360:;

  /* "EMTree.pyx":1802
 * 
 *         #print "making met_responseDown"
 *         self.met_responseDown_branch = the_tree.GetBranch("met_responseDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_responseDown_branch and "met_responseDown" not in self.complained:
 *         if not self.met_responseDown_branch and "met_responseDown":
 */
  __pyx_v_self->met_responseDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_responseDown"));

  /* "EMTree.pyx":1804
 *         self.met_responseDown_branch = the_tree.GetBranch("met_responseDown")
 *         #if not self.met_responseDown_branch and "met_responseDown" not in self.complained:
 *         if not self.met_responseDown_branch and "met_responseDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_responseDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_responseDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_responseDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L364_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L364_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1805
 *         #if not self.met_responseDown_branch and "met_responseDown" not in self.complained:
 *         if not self.met_responseDown_branch and "met_responseDown":
 *             warnings.warn( "EMTree: Expected branch met_responseDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_responseDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1805, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1804
 *         self.met_responseDown_branch = the_tree.GetBranch("met_responseDown")
 *         #if not self.met_responseDown_branch and "met_responseDown" not in self.complained:
 *         if not self.met_responseDown_branch and "met_responseDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_responseDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_responseDown")
 */
    goto __pyx_L363;
  }

  /* "EMTree.pyx":1808
 *             #self.complained.add("met_responseDown")
 *         else:
 *             self.met_responseDown_branch.SetAddress(<void*>&self.met_responseDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_resolutionUp"
 */
  /*else*/ {
    __pyx_v_self->met_responseDown_branch->SetAddress(((void *)(&__pyx_v_self->met_responseDown_value)));
  }
  __pyx_L363:;

  /* "EMTree.pyx":1811
 * 
 *         #print "making met_resolutionUp"
 *         self.met_resolutionUp_branch = the_tree.GetBranch("met_resolutionUp")             # <<<<<<<<<<<<<<
 *         #if not self.met_resolutionUp_branch and "met_resolutionUp" not in self.complained:
 *         if not self.met_resolutionUp_branch and "met_resolutionUp":
 */
  __pyx_v_self->met_resolutionUp_branch = __pyx_v_the_tree->GetBranch(((char *)"met_resolutionUp"));

  /* "EMTree.pyx":1813
 *         self.met_resolutionUp_branch = the_tree.GetBranch("met_resolutionUp")
 *         #if not self.met_resolutionUp_branch and "met_resolutionUp" not in self.complained:
 *         if not self.met_resolutionUp_branch and "met_resolutionUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_resolutionUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_resolutionUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L367_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L367_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1814
 *         #if not self.met_resolutionUp_branch and "met_resolutionUp" not in self.complained:
 *         if not self.met_resolutionUp_branch and "met_resolutionUp":
 *             warnings.warn( "EMTree: Expected branch met_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_resolutionUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1813
 *         self.met_resolutionUp_branch = the_tree.GetBranch("met_resolutionUp")
 *         #if not self.met_resolutionUp_branch and "met_resolutionUp" not in self.complained:
 *         if not self.met_resolutionUp_branch and "met_resolutionUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_resolutionUp")
 */
    goto __pyx_L366;
  }

  /* "EMTree.pyx":1817
 *             #self.complained.add("met_resolutionUp")
 *         else:
 *             self.met_resolutionUp_branch.SetAddress(<void*>&self.met_resolutionUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making met_resolutionDown"
 */
  /*else*/ {
    __pyx_v_self->met_resolutionUp_branch->SetAddress(((void *)(&__pyx_v_self->met_resolutionUp_value)));
  }
  __pyx_L366:;

  /* "EMTree.pyx":1820
 * 
 *         #print "making met_resolutionDown"
 *         self.met_resolutionDown_branch = the_tree.GetBranch("met_resolutionDown")             # <<<<<<<<<<<<<<
 *         #if not self.met_resolutionDown_branch and "met_resolutionDown" not in self.complained:
 *         if not self.met_resolutionDown_branch and "met_resolutionDown":
 */
  __pyx_v_self->met_resolutionDown_branch = __pyx_v_the_tree->GetBranch(((char *)"met_resolutionDown"));

  /* "EMTree.pyx":1822
 *         self.met_resolutionDown_branch = the_tree.GetBranch("met_resolutionDown")
 *         #if not self.met_resolutionDown_branch and "met_resolutionDown" not in self.complained:
 *         if not self.met_resolutionDown_branch and "met_resolutionDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_resolutionDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->met_resolutionDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L370_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L370_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1823
 *         #if not self.met_resolutionDown_branch and "met_resolutionDown" not in self.complained:
 *         if not self.met_resolutionDown_branch and "met_resolutionDown":
 *             warnings.warn( "EMTree: Expected branch met_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_resolutionDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1823, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1822
 *         self.met_resolutionDown_branch = the_tree.GetBranch("met_resolutionDown")
 *         #if not self.met_resolutionDown_branch and "met_resolutionDown" not in self.complained:
 *         if not self.met_resolutionDown_branch and "met_resolutionDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch met_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("met_resolutionDown")
 */
    goto __pyx_L369;
  }

  /* "EMTree.pyx":1826
 *             #self.complained.add("met_resolutionDown")
 *         else:
 *             self.met_resolutionDown_branch.SetAddress(<void*>&self.met_resolutionDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_responseUp"
 */
  /*else*/ {
    __pyx_v_self->met_resolutionDown_branch->SetAddress(((void *)(&__pyx_v_self->met_resolutionDown_value)));
  }
  __pyx_L369:;

  /* "EMTree.pyx":1829
 * 
 *         #print "making metphi_responseUp"
 *         self.metphi_responseUp_branch = the_tree.GetBranch("metphi_responseUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_responseUp_branch and "metphi_responseUp" not in self.complained:
 *         if not self.metphi_responseUp_branch and "metphi_responseUp":
 */
  __pyx_v_self->metphi_responseUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_responseUp"));

  /* "EMTree.pyx":1831
 *         self.metphi_responseUp_branch = the_tree.GetBranch("metphi_responseUp")
 *         #if not self.metphi_responseUp_branch and "metphi_responseUp" not in self.complained:
 *         if not self.metphi_responseUp_branch and "metphi_responseUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_responseUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_responseUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_responseUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L373_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L373_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1832
 *         #if not self.metphi_responseUp_branch and "metphi_responseUp" not in self.complained:
 *         if not self.metphi_responseUp_branch and "metphi_responseUp":
 *             warnings.warn( "EMTree: Expected branch metphi_responseUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_responseUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1832, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1831
 *         self.metphi_responseUp_branch = the_tree.GetBranch("metphi_responseUp")
 *         #if not self.metphi_responseUp_branch and "metphi_responseUp" not in self.complained:
 *         if not self.metphi_responseUp_branch and "metphi_responseUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_responseUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_responseUp")
 */
    goto __pyx_L372;
  }

  /* "EMTree.pyx":1835
 *             #self.complained.add("metphi_responseUp")
 *         else:
 *             self.metphi_responseUp_branch.SetAddress(<void*>&self.metphi_responseUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_responseDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_responseUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_responseUp_value)));
  }
  __pyx_L372:;

  /* "EMTree.pyx":1838
 * 
 *         #print "making metphi_responseDown"
 *         self.metphi_responseDown_branch = the_tree.GetBranch("metphi_responseDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_responseDown_branch and "metphi_responseDown" not in self.complained:
 *         if not self.metphi_responseDown_branch and "metphi_responseDown":
 */
  __pyx_v_self->metphi_responseDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_responseDown"));

  /* "EMTree.pyx":1840
 *         self.metphi_responseDown_branch = the_tree.GetBranch("metphi_responseDown")
 *         #if not self.metphi_responseDown_branch and "metphi_responseDown" not in self.complained:
 *         if not self.metphi_responseDown_branch and "metphi_responseDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_responseDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_responseDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_responseDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L376_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L376_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1841
 *         #if not self.metphi_responseDown_branch and "metphi_responseDown" not in self.complained:
 *         if not self.metphi_responseDown_branch and "metphi_responseDown":
 *             warnings.warn( "EMTree: Expected branch metphi_responseDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_responseDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1840
 *         self.metphi_responseDown_branch = the_tree.GetBranch("metphi_responseDown")
 *         #if not self.metphi_responseDown_branch and "metphi_responseDown" not in self.complained:
 *         if not self.metphi_responseDown_branch and "metphi_responseDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_responseDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_responseDown")
 */
    goto __pyx_L375;
  }

  /* "EMTree.pyx":1844
 *             #self.complained.add("metphi_responseDown")
 *         else:
 *             self.metphi_responseDown_branch.SetAddress(<void*>&self.metphi_responseDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_resolutionUp"
 */
  /*else*/ {
    __pyx_v_self->metphi_responseDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_responseDown_value)));
  }
  __pyx_L375:;

  /* "EMTree.pyx":1847
 * 
 *         #print "making metphi_resolutionUp"
 *         self.metphi_resolutionUp_branch = the_tree.GetBranch("metphi_resolutionUp")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_resolutionUp_branch and "metphi_resolutionUp" not in self.complained:
 *         if not self.metphi_resolutionUp_branch and "metphi_resolutionUp":
 */
  __pyx_v_self->metphi_resolutionUp_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_resolutionUp"));

  /* "EMTree.pyx":1849
 *         self.metphi_resolutionUp_branch = the_tree.GetBranch("metphi_resolutionUp")
 *         #if not self.metphi_resolutionUp_branch and "metphi_resolutionUp" not in self.complained:
 *         if not self.metphi_resolutionUp_branch and "metphi_resolutionUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_resolutionUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_resolutionUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L379_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L379_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1850
 *         #if not self.metphi_resolutionUp_branch and "metphi_resolutionUp" not in self.complained:
 *         if not self.metphi_resolutionUp_branch and "metphi_resolutionUp":
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_resolutionUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1849
 *         self.metphi_resolutionUp_branch = the_tree.GetBranch("metphi_resolutionUp")
 *         #if not self.metphi_resolutionUp_branch and "metphi_resolutionUp" not in self.complained:
 *         if not self.metphi_resolutionUp_branch and "metphi_resolutionUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_resolutionUp")
 */
    goto __pyx_L378;
  }

  /* "EMTree.pyx":1853
 *             #self.complained.add("metphi_resolutionUp")
 *         else:
 *             self.metphi_resolutionUp_branch.SetAddress(<void*>&self.metphi_resolutionUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making metphi_resolutionDown"
 */
  /*else*/ {
    __pyx_v_self->metphi_resolutionUp_branch->SetAddress(((void *)(&__pyx_v_self->metphi_resolutionUp_value)));
  }
  __pyx_L378:;

  /* "EMTree.pyx":1856
 * 
 *         #print "making metphi_resolutionDown"
 *         self.metphi_resolutionDown_branch = the_tree.GetBranch("metphi_resolutionDown")             # <<<<<<<<<<<<<<
 *         #if not self.metphi_resolutionDown_branch and "metphi_resolutionDown" not in self.complained:
 *         if not self.metphi_resolutionDown_branch and "metphi_resolutionDown":
 */
  __pyx_v_self->metphi_resolutionDown_branch = __pyx_v_the_tree->GetBranch(((char *)"metphi_resolutionDown"));

  /* "EMTree.pyx":1858
 *         self.metphi_resolutionDown_branch = the_tree.GetBranch("metphi_resolutionDown")
 *         #if not self.metphi_resolutionDown_branch and "metphi_resolutionDown" not in self.complained:
 *         if not self.metphi_resolutionDown_branch and "metphi_resolutionDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_resolutionDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->metphi_resolutionDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L382_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L382_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1859
 *         #if not self.metphi_resolutionDown_branch and "metphi_resolutionDown" not in self.complained:
 *         if not self.metphi_resolutionDown_branch and "metphi_resolutionDown":
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_resolutionDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1858
 *         self.metphi_resolutionDown_branch = the_tree.GetBranch("metphi_resolutionDown")
 *         #if not self.metphi_resolutionDown_branch and "metphi_resolutionDown" not in self.complained:
 *         if not self.metphi_resolutionDown_branch and "metphi_resolutionDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("metphi_resolutionDown")
 */
    goto __pyx_L381;
  }

  /* "EMTree.pyx":1862
 *             #self.complained.add("metphi_resolutionDown")
 *         else:
 *             self.metphi_resolutionDown_branch.SetAddress(<void*>&self.metphi_resolutionDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj"
 */
  /*else*/ {
    __pyx_v_self->metphi_resolutionDown_branch->SetAddress(((void *)(&__pyx_v_self->metphi_resolutionDown_value)));
  }
  __pyx_L381:;

  /* "EMTree.pyx":1865
 * 
 *         #print "making mjj"
 *         self.mjj_branch = the_tree.GetBranch("mjj")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_branch and "mjj" not in self.complained:
 *         if not self.mjj_branch and "mjj":
 */
  __pyx_v_self->mjj_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj"));

  /* "EMTree.pyx":1867
 *         self.mjj_branch = the_tree.GetBranch("mjj")
 *         #if not self.mjj_branch and "mjj" not in self.complained:
 *         if not self.mjj_branch and "mjj":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L385_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L385_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1868
 *         #if not self.mjj_branch and "mjj" not in self.complained:
 *         if not self.mjj_branch and "mjj":
 *             warnings.warn( "EMTree: Expected branch mjj does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1867
 *         self.mjj_branch = the_tree.GetBranch("mjj")
 *         #if not self.mjj_branch and "mjj" not in self.complained:
 *         if not self.mjj_branch and "mjj":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj")
 */
    goto __pyx_L384;
  }

  /* "EMTree.pyx":1871
 *             #self.complained.add("mjj")
 *         else:
 *             self.mjj_branch.SetAddress(<void*>&self.mjj_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetAbsoluteUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_branch->SetAddress(((void *)(&__pyx_v_self->mjj_value)));
  }
  __pyx_L384:;

  /* "EMTree.pyx":1874
 * 
 *         #print "making mjj_JetAbsoluteUp"
 *         self.mjj_JetAbsoluteUp_branch = the_tree.GetBranch("mjj_JetAbsoluteUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp":
 */
  __pyx_v_self->mjj_JetAbsoluteUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetAbsoluteUp"));

  /* "EMTree.pyx":1876
 *         self.mjj_JetAbsoluteUp_branch = the_tree.GetBranch("mjj_JetAbsoluteUp")
 *         #if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetAbsoluteUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L388_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L388_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1877
 *         #if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1876
 *         self.mjj_JetAbsoluteUp_branch = the_tree.GetBranch("mjj_JetAbsoluteUp")
 *         #if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteUp")
 */
    goto __pyx_L387;
  }

  /* "EMTree.pyx":1880
 *             #self.complained.add("mjj_JetAbsoluteUp")
 *         else:
 *             self.mjj_JetAbsoluteUp_branch.SetAddress(<void*>&self.mjj_JetAbsoluteUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetAbsoluteDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetAbsoluteUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetAbsoluteUp_value)));
  }
  __pyx_L387:;

  /* "EMTree.pyx":1883
 * 
 *         #print "making mjj_JetAbsoluteDown"
 *         self.mjj_JetAbsoluteDown_branch = the_tree.GetBranch("mjj_JetAbsoluteDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown":
 */
  __pyx_v_self->mjj_JetAbsoluteDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetAbsoluteDown"));

  /* "EMTree.pyx":1885
 *         self.mjj_JetAbsoluteDown_branch = the_tree.GetBranch("mjj_JetAbsoluteDown")
 *         #if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetAbsoluteDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L391_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L391_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1886
 *         #if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1885
 *         self.mjj_JetAbsoluteDown_branch = the_tree.GetBranch("mjj_JetAbsoluteDown")
 *         #if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteDown")
 */
    goto __pyx_L390;
  }

  /* "EMTree.pyx":1889
 *             #self.complained.add("mjj_JetAbsoluteDown")
 *         else:
 *             self.mjj_JetAbsoluteDown_branch.SetAddress(<void*>&self.mjj_JetAbsoluteDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetAbsoluteyearUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetAbsoluteDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetAbsoluteDown_value)));
  }
  __pyx_L390:;

  /* "EMTree.pyx":1892
 * 
 *         #print "making mjj_JetAbsoluteyearUp"
 *         self.mjj_JetAbsoluteyearUp_branch = the_tree.GetBranch("mjj_JetAbsoluteyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp":
 */
  __pyx_v_self->mjj_JetAbsoluteyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetAbsoluteyearUp"));

  /* "EMTree.pyx":1894
 *         self.mjj_JetAbsoluteyearUp_branch = the_tree.GetBranch("mjj_JetAbsoluteyearUp")
 *         #if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetAbsoluteyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L394_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L394_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1895
 *         #if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1894
 *         self.mjj_JetAbsoluteyearUp_branch = the_tree.GetBranch("mjj_JetAbsoluteyearUp")
 *         #if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteyearUp")
 */
    goto __pyx_L393;
  }

  /* "EMTree.pyx":1898
 *             #self.complained.add("mjj_JetAbsoluteyearUp")
 *         else:
 *             self.mjj_JetAbsoluteyearUp_branch.SetAddress(<void*>&self.mjj_JetAbsoluteyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetAbsoluteyearDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetAbsoluteyearUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetAbsoluteyearUp_value)));
  }
  __pyx_L393:;

  /* "EMTree.pyx":1901
 * 
 *         #print "making mjj_JetAbsoluteyearDown"
 *         self.mjj_JetAbsoluteyearDown_branch = the_tree.GetBranch("mjj_JetAbsoluteyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown":
 */
  __pyx_v_self->mjj_JetAbsoluteyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetAbsoluteyearDown"));

  /* "EMTree.pyx":1903
 *         self.mjj_JetAbsoluteyearDown_branch = the_tree.GetBranch("mjj_JetAbsoluteyearDown")
 *         #if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetAbsoluteyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L397_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L397_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1904
 *         #if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1903
 *         self.mjj_JetAbsoluteyearDown_branch = the_tree.GetBranch("mjj_JetAbsoluteyearDown")
 *         #if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetAbsoluteyearDown")
 */
    goto __pyx_L396;
  }

  /* "EMTree.pyx":1907
 *             #self.complained.add("mjj_JetAbsoluteyearDown")
 *         else:
 *             self.mjj_JetAbsoluteyearDown_branch.SetAddress(<void*>&self.mjj_JetAbsoluteyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetBBEC1Up"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetAbsoluteyearDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetAbsoluteyearDown_value)));
  }
  __pyx_L396:;

  /* "EMTree.pyx":1910
 * 
 *         #print "making mjj_JetBBEC1Up"
 *         self.mjj_JetBBEC1Up_branch = the_tree.GetBranch("mjj_JetBBEC1Up")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up" not in self.complained:
 *         if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up":
 */
  __pyx_v_self->mjj_JetBBEC1Up_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetBBEC1Up"));

  /* "EMTree.pyx":1912
 *         self.mjj_JetBBEC1Up_branch = the_tree.GetBranch("mjj_JetBBEC1Up")
 *         #if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up" not in self.complained:
 *         if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetBBEC1Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L400_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L400_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1913
 *         #if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up" not in self.complained:
 *         if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1913, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1912
 *         self.mjj_JetBBEC1Up_branch = the_tree.GetBranch("mjj_JetBBEC1Up")
 *         #if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up" not in self.complained:
 *         if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1Up")
 */
    goto __pyx_L399;
  }

  /* "EMTree.pyx":1916
 *             #self.complained.add("mjj_JetBBEC1Up")
 *         else:
 *             self.mjj_JetBBEC1Up_branch.SetAddress(<void*>&self.mjj_JetBBEC1Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetBBEC1Down"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetBBEC1Up_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetBBEC1Up_value)));
  }
  __pyx_L399:;

  /* "EMTree.pyx":1919
 * 
 *         #print "making mjj_JetBBEC1Down"
 *         self.mjj_JetBBEC1Down_branch = the_tree.GetBranch("mjj_JetBBEC1Down")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down" not in self.complained:
 *         if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down":
 */
  __pyx_v_self->mjj_JetBBEC1Down_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetBBEC1Down"));

  /* "EMTree.pyx":1921
 *         self.mjj_JetBBEC1Down_branch = the_tree.GetBranch("mjj_JetBBEC1Down")
 *         #if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down" not in self.complained:
 *         if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetBBEC1Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L403_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L403_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1922
 *         #if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down" not in self.complained:
 *         if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1921
 *         self.mjj_JetBBEC1Down_branch = the_tree.GetBranch("mjj_JetBBEC1Down")
 *         #if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down" not in self.complained:
 *         if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1Down")
 */
    goto __pyx_L402;
  }

  /* "EMTree.pyx":1925
 *             #self.complained.add("mjj_JetBBEC1Down")
 *         else:
 *             self.mjj_JetBBEC1Down_branch.SetAddress(<void*>&self.mjj_JetBBEC1Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetBBEC1yearUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetBBEC1Down_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetBBEC1Down_value)));
  }
  __pyx_L402:;

  /* "EMTree.pyx":1928
 * 
 *         #print "making mjj_JetBBEC1yearUp"
 *         self.mjj_JetBBEC1yearUp_branch = the_tree.GetBranch("mjj_JetBBEC1yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp" not in self.complained:
 *         if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp":
 */
  __pyx_v_self->mjj_JetBBEC1yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetBBEC1yearUp"));

  /* "EMTree.pyx":1930
 *         self.mjj_JetBBEC1yearUp_branch = the_tree.GetBranch("mjj_JetBBEC1yearUp")
 *         #if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp" not in self.complained:
 *         if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetBBEC1yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L406_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L406_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1931
 *         #if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp" not in self.complained:
 *         if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1930
 *         self.mjj_JetBBEC1yearUp_branch = the_tree.GetBranch("mjj_JetBBEC1yearUp")
 *         #if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp" not in self.complained:
 *         if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1yearUp")
 */
    goto __pyx_L405;
  }

  /* "EMTree.pyx":1934
 *             #self.complained.add("mjj_JetBBEC1yearUp")
 *         else:
 *             self.mjj_JetBBEC1yearUp_branch.SetAddress(<void*>&self.mjj_JetBBEC1yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetBBEC1yearDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetBBEC1yearUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetBBEC1yearUp_value)));
  }
  __pyx_L405:;

  /* "EMTree.pyx":1937
 * 
 *         #print "making mjj_JetBBEC1yearDown"
 *         self.mjj_JetBBEC1yearDown_branch = the_tree.GetBranch("mjj_JetBBEC1yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown" not in self.complained:
 *         if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown":
 */
  __pyx_v_self->mjj_JetBBEC1yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetBBEC1yearDown"));

  /* "EMTree.pyx":1939
 *         self.mjj_JetBBEC1yearDown_branch = the_tree.GetBranch("mjj_JetBBEC1yearDown")
 *         #if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown" not in self.complained:
 *         if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetBBEC1yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L409_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L409_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1940
 *         #if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown" not in self.complained:
 *         if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1940, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1939
 *         self.mjj_JetBBEC1yearDown_branch = the_tree.GetBranch("mjj_JetBBEC1yearDown")
 *         #if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown" not in self.complained:
 *         if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetBBEC1yearDown")
 */
    goto __pyx_L408;
  }

  /* "EMTree.pyx":1943
 *             #self.complained.add("mjj_JetBBEC1yearDown")
 *         else:
 *             self.mjj_JetBBEC1yearDown_branch.SetAddress(<void*>&self.mjj_JetBBEC1yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetEC2Up"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetBBEC1yearDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetBBEC1yearDown_value)));
  }
  __pyx_L408:;

  /* "EMTree.pyx":1946
 * 
 *         #print "making mjj_JetEC2Up"
 *         self.mjj_JetEC2Up_branch = the_tree.GetBranch("mjj_JetEC2Up")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up" not in self.complained:
 *         if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up":
 */
  __pyx_v_self->mjj_JetEC2Up_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetEC2Up"));

  /* "EMTree.pyx":1948
 *         self.mjj_JetEC2Up_branch = the_tree.GetBranch("mjj_JetEC2Up")
 *         #if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up" not in self.complained:
 *         if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetEC2Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L412_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L412_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1949
 *         #if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up" not in self.complained:
 *         if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1948
 *         self.mjj_JetEC2Up_branch = the_tree.GetBranch("mjj_JetEC2Up")
 *         #if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up" not in self.complained:
 *         if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2Up")
 */
    goto __pyx_L411;
  }

  /* "EMTree.pyx":1952
 *             #self.complained.add("mjj_JetEC2Up")
 *         else:
 *             self.mjj_JetEC2Up_branch.SetAddress(<void*>&self.mjj_JetEC2Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetEC2Down"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetEC2Up_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetEC2Up_value)));
  }
  __pyx_L411:;

  /* "EMTree.pyx":1955
 * 
 *         #print "making mjj_JetEC2Down"
 *         self.mjj_JetEC2Down_branch = the_tree.GetBranch("mjj_JetEC2Down")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down" not in self.complained:
 *         if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down":
 */
  __pyx_v_self->mjj_JetEC2Down_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetEC2Down"));

  /* "EMTree.pyx":1957
 *         self.mjj_JetEC2Down_branch = the_tree.GetBranch("mjj_JetEC2Down")
 *         #if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down" not in self.complained:
 *         if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetEC2Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L415_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L415_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1958
 *         #if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down" not in self.complained:
 *         if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1957
 *         self.mjj_JetEC2Down_branch = the_tree.GetBranch("mjj_JetEC2Down")
 *         #if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down" not in self.complained:
 *         if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2Down")
 */
    goto __pyx_L414;
  }

  /* "EMTree.pyx":1961
 *             #self.complained.add("mjj_JetEC2Down")
 *         else:
 *             self.mjj_JetEC2Down_branch.SetAddress(<void*>&self.mjj_JetEC2Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetEC2yearUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetEC2Down_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetEC2Down_value)));
  }
  __pyx_L414:;

  /* "EMTree.pyx":1964
 * 
 *         #print "making mjj_JetEC2yearUp"
 *         self.mjj_JetEC2yearUp_branch = the_tree.GetBranch("mjj_JetEC2yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp" not in self.complained:
 *         if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp":
 */
  __pyx_v_self->mjj_JetEC2yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetEC2yearUp"));

  /* "EMTree.pyx":1966
 *         self.mjj_JetEC2yearUp_branch = the_tree.GetBranch("mjj_JetEC2yearUp")
 *         #if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp" not in self.complained:
 *         if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetEC2yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L418_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L418_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1967
 *         #if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp" not in self.complained:
 *         if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1966
 *         self.mjj_JetEC2yearUp_branch = the_tree.GetBranch("mjj_JetEC2yearUp")
 *         #if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp" not in self.complained:
 *         if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2yearUp")
 */
    goto __pyx_L417;
  }

  /* "EMTree.pyx":1970
 *             #self.complained.add("mjj_JetEC2yearUp")
 *         else:
 *             self.mjj_JetEC2yearUp_branch.SetAddress(<void*>&self.mjj_JetEC2yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetEC2yearDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetEC2yearUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetEC2yearUp_value)));
  }
  __pyx_L417:;

  /* "EMTree.pyx":1973
 * 
 *         #print "making mjj_JetEC2yearDown"
 *         self.mjj_JetEC2yearDown_branch = the_tree.GetBranch("mjj_JetEC2yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown" not in self.complained:
 *         if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown":
 */
  __pyx_v_self->mjj_JetEC2yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetEC2yearDown"));

  /* "EMTree.pyx":1975
 *         self.mjj_JetEC2yearDown_branch = the_tree.GetBranch("mjj_JetEC2yearDown")
 *         #if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown" not in self.complained:
 *         if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetEC2yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L421_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L421_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1976
 *         #if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown" not in self.complained:
 *         if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1975
 *         self.mjj_JetEC2yearDown_branch = the_tree.GetBranch("mjj_JetEC2yearDown")
 *         #if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown" not in self.complained:
 *         if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetEC2yearDown")
 */
    goto __pyx_L420;
  }

  /* "EMTree.pyx":1979
 *             #self.complained.add("mjj_JetEC2yearDown")
 *         else:
 *             self.mjj_JetEC2yearDown_branch.SetAddress(<void*>&self.mjj_JetEC2yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetFlavorQCDUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetEC2yearDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetEC2yearDown_value)));
  }
  __pyx_L420:;

  /* "EMTree.pyx":1982
 * 
 *         #print "making mjj_JetFlavorQCDUp"
 *         self.mjj_JetFlavorQCDUp_branch = the_tree.GetBranch("mjj_JetFlavorQCDUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp" not in self.complained:
 *         if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp":
 */
  __pyx_v_self->mjj_JetFlavorQCDUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetFlavorQCDUp"));

  /* "EMTree.pyx":1984
 *         self.mjj_JetFlavorQCDUp_branch = the_tree.GetBranch("mjj_JetFlavorQCDUp")
 *         #if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp" not in self.complained:
 *         if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetFlavorQCDUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetFlavorQCDUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L424_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L424_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1985
 *         #if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp" not in self.complained:
 *         if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetFlavorQCDUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1984
 *         self.mjj_JetFlavorQCDUp_branch = the_tree.GetBranch("mjj_JetFlavorQCDUp")
 *         #if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp" not in self.complained:
 *         if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetFlavorQCDUp")
 */
    goto __pyx_L423;
  }

  /* "EMTree.pyx":1988
 *             #self.complained.add("mjj_JetFlavorQCDUp")
 *         else:
 *             self.mjj_JetFlavorQCDUp_branch.SetAddress(<void*>&self.mjj_JetFlavorQCDUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetFlavorQCDDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetFlavorQCDUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetFlavorQCDUp_value)));
  }
  __pyx_L423:;

  /* "EMTree.pyx":1991
 * 
 *         #print "making mjj_JetFlavorQCDDown"
 *         self.mjj_JetFlavorQCDDown_branch = the_tree.GetBranch("mjj_JetFlavorQCDDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown" not in self.complained:
 *         if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown":
 */
  __pyx_v_self->mjj_JetFlavorQCDDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetFlavorQCDDown"));

  /* "EMTree.pyx":1993
 *         self.mjj_JetFlavorQCDDown_branch = the_tree.GetBranch("mjj_JetFlavorQCDDown")
 *         #if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown" not in self.complained:
 *         if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetFlavorQCDDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetFlavorQCDDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L427_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L427_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":1994
 *         #if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown" not in self.complained:
 *         if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetFlavorQCDDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":1993
 *         self.mjj_JetFlavorQCDDown_branch = the_tree.GetBranch("mjj_JetFlavorQCDDown")
 *         #if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown" not in self.complained:
 *         if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetFlavorQCDDown")
 */
    goto __pyx_L426;
  }

  /* "EMTree.pyx":1997
 *             #self.complained.add("mjj_JetFlavorQCDDown")
 *         else:
 *             self.mjj_JetFlavorQCDDown_branch.SetAddress(<void*>&self.mjj_JetFlavorQCDDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetHFUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetFlavorQCDDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetFlavorQCDDown_value)));
  }
  __pyx_L426:;

  /* "EMTree.pyx":2000
 * 
 *         #print "making mjj_JetHFUp"
 *         self.mjj_JetHFUp_branch = the_tree.GetBranch("mjj_JetHFUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetHFUp_branch and "mjj_JetHFUp" not in self.complained:
 *         if not self.mjj_JetHFUp_branch and "mjj_JetHFUp":
 */
  __pyx_v_self->mjj_JetHFUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetHFUp"));

  /* "EMTree.pyx":2002
 *         self.mjj_JetHFUp_branch = the_tree.GetBranch("mjj_JetHFUp")
 *         #if not self.mjj_JetHFUp_branch and "mjj_JetHFUp" not in self.complained:
 *         if not self.mjj_JetHFUp_branch and "mjj_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetHFUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L430_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L430_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2003
 *         #if not self.mjj_JetHFUp_branch and "mjj_JetHFUp" not in self.complained:
 *         if not self.mjj_JetHFUp_branch and "mjj_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2003, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2002
 *         self.mjj_JetHFUp_branch = the_tree.GetBranch("mjj_JetHFUp")
 *         #if not self.mjj_JetHFUp_branch and "mjj_JetHFUp" not in self.complained:
 *         if not self.mjj_JetHFUp_branch and "mjj_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFUp")
 */
    goto __pyx_L429;
  }

  /* "EMTree.pyx":2006
 *             #self.complained.add("mjj_JetHFUp")
 *         else:
 *             self.mjj_JetHFUp_branch.SetAddress(<void*>&self.mjj_JetHFUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetHFDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetHFUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetHFUp_value)));
  }
  __pyx_L429:;

  /* "EMTree.pyx":2009
 * 
 *         #print "making mjj_JetHFDown"
 *         self.mjj_JetHFDown_branch = the_tree.GetBranch("mjj_JetHFDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetHFDown_branch and "mjj_JetHFDown" not in self.complained:
 *         if not self.mjj_JetHFDown_branch and "mjj_JetHFDown":
 */
  __pyx_v_self->mjj_JetHFDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetHFDown"));

  /* "EMTree.pyx":2011
 *         self.mjj_JetHFDown_branch = the_tree.GetBranch("mjj_JetHFDown")
 *         #if not self.mjj_JetHFDown_branch and "mjj_JetHFDown" not in self.complained:
 *         if not self.mjj_JetHFDown_branch and "mjj_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetHFDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L433_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L433_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2012
 *         #if not self.mjj_JetHFDown_branch and "mjj_JetHFDown" not in self.complained:
 *         if not self.mjj_JetHFDown_branch and "mjj_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2011
 *         self.mjj_JetHFDown_branch = the_tree.GetBranch("mjj_JetHFDown")
 *         #if not self.mjj_JetHFDown_branch and "mjj_JetHFDown" not in self.complained:
 *         if not self.mjj_JetHFDown_branch and "mjj_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFDown")
 */
    goto __pyx_L432;
  }

  /* "EMTree.pyx":2015
 *             #self.complained.add("mjj_JetHFDown")
 *         else:
 *             self.mjj_JetHFDown_branch.SetAddress(<void*>&self.mjj_JetHFDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetHFyearUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetHFDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetHFDown_value)));
  }
  __pyx_L432:;

  /* "EMTree.pyx":2018
 * 
 *         #print "making mjj_JetHFyearUp"
 *         self.mjj_JetHFyearUp_branch = the_tree.GetBranch("mjj_JetHFyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp" not in self.complained:
 *         if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp":
 */
  __pyx_v_self->mjj_JetHFyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetHFyearUp"));

  /* "EMTree.pyx":2020
 *         self.mjj_JetHFyearUp_branch = the_tree.GetBranch("mjj_JetHFyearUp")
 *         #if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp" not in self.complained:
 *         if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetHFyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L436_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L436_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2021
 *         #if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp" not in self.complained:
 *         if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2020
 *         self.mjj_JetHFyearUp_branch = the_tree.GetBranch("mjj_JetHFyearUp")
 *         #if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp" not in self.complained:
 *         if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFyearUp")
 */
    goto __pyx_L435;
  }

  /* "EMTree.pyx":2024
 *             #self.complained.add("mjj_JetHFyearUp")
 *         else:
 *             self.mjj_JetHFyearUp_branch.SetAddress(<void*>&self.mjj_JetHFyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetHFyearDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetHFyearUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetHFyearUp_value)));
  }
  __pyx_L435:;

  /* "EMTree.pyx":2027
 * 
 *         #print "making mjj_JetHFyearDown"
 *         self.mjj_JetHFyearDown_branch = the_tree.GetBranch("mjj_JetHFyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown" not in self.complained:
 *         if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown":
 */
  __pyx_v_self->mjj_JetHFyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetHFyearDown"));

  /* "EMTree.pyx":2029
 *         self.mjj_JetHFyearDown_branch = the_tree.GetBranch("mjj_JetHFyearDown")
 *         #if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown" not in self.complained:
 *         if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetHFyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L439_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L439_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2030
 *         #if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown" not in self.complained:
 *         if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2029
 *         self.mjj_JetHFyearDown_branch = the_tree.GetBranch("mjj_JetHFyearDown")
 *         #if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown" not in self.complained:
 *         if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetHFyearDown")
 */
    goto __pyx_L438;
  }

  /* "EMTree.pyx":2033
 *             #self.complained.add("mjj_JetHFyearDown")
 *         else:
 *             self.mjj_JetHFyearDown_branch.SetAddress(<void*>&self.mjj_JetHFyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetRelativeBalUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetHFyearDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetHFyearDown_value)));
  }
  __pyx_L438:;

  /* "EMTree.pyx":2036
 * 
 *         #print "making mjj_JetRelativeBalUp"
 *         self.mjj_JetRelativeBalUp_branch = the_tree.GetBranch("mjj_JetRelativeBalUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp" not in self.complained:
 *         if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp":
 */
  __pyx_v_self->mjj_JetRelativeBalUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetRelativeBalUp"));

  /* "EMTree.pyx":2038
 *         self.mjj_JetRelativeBalUp_branch = the_tree.GetBranch("mjj_JetRelativeBalUp")
 *         #if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp" not in self.complained:
 *         if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeBalUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetRelativeBalUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L442_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L442_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2039
 *         #if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp" not in self.complained:
 *         if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeBalUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2038
 *         self.mjj_JetRelativeBalUp_branch = the_tree.GetBranch("mjj_JetRelativeBalUp")
 *         #if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp" not in self.complained:
 *         if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeBalUp")
 */
    goto __pyx_L441;
  }

  /* "EMTree.pyx":2042
 *             #self.complained.add("mjj_JetRelativeBalUp")
 *         else:
 *             self.mjj_JetRelativeBalUp_branch.SetAddress(<void*>&self.mjj_JetRelativeBalUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetRelativeBalDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetRelativeBalUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetRelativeBalUp_value)));
  }
  __pyx_L441:;

  /* "EMTree.pyx":2045
 * 
 *         #print "making mjj_JetRelativeBalDown"
 *         self.mjj_JetRelativeBalDown_branch = the_tree.GetBranch("mjj_JetRelativeBalDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown" not in self.complained:
 *         if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown":
 */
  __pyx_v_self->mjj_JetRelativeBalDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetRelativeBalDown"));

  /* "EMTree.pyx":2047
 *         self.mjj_JetRelativeBalDown_branch = the_tree.GetBranch("mjj_JetRelativeBalDown")
 *         #if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown" not in self.complained:
 *         if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeBalDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetRelativeBalDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L445_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L445_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2048
 *         #if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown" not in self.complained:
 *         if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeBalDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2048, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2047
 *         self.mjj_JetRelativeBalDown_branch = the_tree.GetBranch("mjj_JetRelativeBalDown")
 *         #if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown" not in self.complained:
 *         if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeBalDown")
 */
    goto __pyx_L444;
  }

  /* "EMTree.pyx":2051
 *             #self.complained.add("mjj_JetRelativeBalDown")
 *         else:
 *             self.mjj_JetRelativeBalDown_branch.SetAddress(<void*>&self.mjj_JetRelativeBalDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetRelativeSampleUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetRelativeBalDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetRelativeBalDown_value)));
  }
  __pyx_L444:;

  /* "EMTree.pyx":2054
 * 
 *         #print "making mjj_JetRelativeSampleUp"
 *         self.mjj_JetRelativeSampleUp_branch = the_tree.GetBranch("mjj_JetRelativeSampleUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp" not in self.complained:
 *         if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp":
 */
  __pyx_v_self->mjj_JetRelativeSampleUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetRelativeSampleUp"));

  /* "EMTree.pyx":2056
 *         self.mjj_JetRelativeSampleUp_branch = the_tree.GetBranch("mjj_JetRelativeSampleUp")
 *         #if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp" not in self.complained:
 *         if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeSampleUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetRelativeSampleUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L448_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L448_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2057
 *         #if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp" not in self.complained:
 *         if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeSampleUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2056
 *         self.mjj_JetRelativeSampleUp_branch = the_tree.GetBranch("mjj_JetRelativeSampleUp")
 *         #if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp" not in self.complained:
 *         if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeSampleUp")
 */
    goto __pyx_L447;
  }

  /* "EMTree.pyx":2060
 *             #self.complained.add("mjj_JetRelativeSampleUp")
 *         else:
 *             self.mjj_JetRelativeSampleUp_branch.SetAddress(<void*>&self.mjj_JetRelativeSampleUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JetRelativeSampleDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetRelativeSampleUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetRelativeSampleUp_value)));
  }
  __pyx_L447:;

  /* "EMTree.pyx":2063
 * 
 *         #print "making mjj_JetRelativeSampleDown"
 *         self.mjj_JetRelativeSampleDown_branch = the_tree.GetBranch("mjj_JetRelativeSampleDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown" not in self.complained:
 *         if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown":
 */
  __pyx_v_self->mjj_JetRelativeSampleDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JetRelativeSampleDown"));

  /* "EMTree.pyx":2065
 *         self.mjj_JetRelativeSampleDown_branch = the_tree.GetBranch("mjj_JetRelativeSampleDown")
 *         #if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown" not in self.complained:
 *         if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeSampleDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JetRelativeSampleDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L451_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L451_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2066
 *         #if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown" not in self.complained:
 *         if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeSampleDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2065
 *         self.mjj_JetRelativeSampleDown_branch = the_tree.GetBranch("mjj_JetRelativeSampleDown")
 *         #if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown" not in self.complained:
 *         if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JetRelativeSampleDown")
 */
    goto __pyx_L450;
  }

  /* "EMTree.pyx":2069
 *             #self.complained.add("mjj_JetRelativeSampleDown")
 *         else:
 *             self.mjj_JetRelativeSampleDown_branch.SetAddress(<void*>&self.mjj_JetRelativeSampleDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JERUp"
 */
  /*else*/ {
    __pyx_v_self->mjj_JetRelativeSampleDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JetRelativeSampleDown_value)));
  }
  __pyx_L450:;

  /* "EMTree.pyx":2072
 * 
 *         #print "making mjj_JERUp"
 *         self.mjj_JERUp_branch = the_tree.GetBranch("mjj_JERUp")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JERUp_branch and "mjj_JERUp" not in self.complained:
 *         if not self.mjj_JERUp_branch and "mjj_JERUp":
 */
  __pyx_v_self->mjj_JERUp_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JERUp"));

  /* "EMTree.pyx":2074
 *         self.mjj_JERUp_branch = the_tree.GetBranch("mjj_JERUp")
 *         #if not self.mjj_JERUp_branch and "mjj_JERUp" not in self.complained:
 *         if not self.mjj_JERUp_branch and "mjj_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JERUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JERUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L454_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L454_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2075
 *         #if not self.mjj_JERUp_branch and "mjj_JERUp" not in self.complained:
 *         if not self.mjj_JERUp_branch and "mjj_JERUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JERUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2075, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2074
 *         self.mjj_JERUp_branch = the_tree.GetBranch("mjj_JERUp")
 *         #if not self.mjj_JERUp_branch and "mjj_JERUp" not in self.complained:
 *         if not self.mjj_JERUp_branch and "mjj_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JERUp")
 */
    goto __pyx_L453;
  }

  /* "EMTree.pyx":2078
 *             #self.complained.add("mjj_JERUp")
 *         else:
 *             self.mjj_JERUp_branch.SetAddress(<void*>&self.mjj_JERUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making mjj_JERDown"
 */
  /*else*/ {
    __pyx_v_self->mjj_JERUp_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JERUp_value)));
  }
  __pyx_L453:;

  /* "EMTree.pyx":2081
 * 
 *         #print "making mjj_JERDown"
 *         self.mjj_JERDown_branch = the_tree.GetBranch("mjj_JERDown")             # <<<<<<<<<<<<<<
 *         #if not self.mjj_JERDown_branch and "mjj_JERDown" not in self.complained:
 *         if not self.mjj_JERDown_branch and "mjj_JERDown":
 */
  __pyx_v_self->mjj_JERDown_branch = __pyx_v_the_tree->GetBranch(((char *)"mjj_JERDown"));

  /* "EMTree.pyx":2083
 *         self.mjj_JERDown_branch = the_tree.GetBranch("mjj_JERDown")
 *         #if not self.mjj_JERDown_branch and "mjj_JERDown" not in self.complained:
 *         if not self.mjj_JERDown_branch and "mjj_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JERDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->mjj_JERDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L457_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L457_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2084
 *         #if not self.mjj_JERDown_branch and "mjj_JERDown" not in self.complained:
 *         if not self.mjj_JERDown_branch and "mjj_JERDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JERDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2083
 *         self.mjj_JERDown_branch = the_tree.GetBranch("mjj_JERDown")
 *         #if not self.mjj_JERDown_branch and "mjj_JERDown" not in self.complained:
 *         if not self.mjj_JERDown_branch and "mjj_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch mjj_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("mjj_JERDown")
 */
    goto __pyx_L456;
  }

  /* "EMTree.pyx":2087
 *             #self.complained.add("mjj_JERDown")
 *         else:
 *             self.mjj_JERDown_branch.SetAddress(<void*>&self.mjj_JERDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making gen_match_1"
 */
  /*else*/ {
    __pyx_v_self->mjj_JERDown_branch->SetAddress(((void *)(&__pyx_v_self->mjj_JERDown_value)));
  }
  __pyx_L456:;

  /* "EMTree.pyx":2090
 * 
 *         #print "making gen_match_1"
 *         self.gen_match_1_branch = the_tree.GetBranch("gen_match_1")             # <<<<<<<<<<<<<<
 *         #if not self.gen_match_1_branch and "gen_match_1" not in self.complained:
 *         if not self.gen_match_1_branch and "gen_match_1":
 */
  __pyx_v_self->gen_match_1_branch = __pyx_v_the_tree->GetBranch(((char *)"gen_match_1"));

  /* "EMTree.pyx":2092
 *         self.gen_match_1_branch = the_tree.GetBranch("gen_match_1")
 *         #if not self.gen_match_1_branch and "gen_match_1" not in self.complained:
 *         if not self.gen_match_1_branch and "gen_match_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_match_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_match_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->gen_match_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L460_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L460_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2093
 *         #if not self.gen_match_1_branch and "gen_match_1" not in self.complained:
 *         if not self.gen_match_1_branch and "gen_match_1":
 *             warnings.warn( "EMTree: Expected branch gen_match_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_match_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2092
 *         self.gen_match_1_branch = the_tree.GetBranch("gen_match_1")
 *         #if not self.gen_match_1_branch and "gen_match_1" not in self.complained:
 *         if not self.gen_match_1_branch and "gen_match_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_match_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_match_1")
 */
    goto __pyx_L459;
  }

  /* "EMTree.pyx":2096
 *             #self.complained.add("gen_match_1")
 *         else:
 *             self.gen_match_1_branch.SetAddress(<void*>&self.gen_match_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making gen_match_2"
 */
  /*else*/ {
    __pyx_v_self->gen_match_1_branch->SetAddress(((void *)(&__pyx_v_self->gen_match_1_value)));
  }
  __pyx_L459:;

  /* "EMTree.pyx":2099
 * 
 *         #print "making gen_match_2"
 *         self.gen_match_2_branch = the_tree.GetBranch("gen_match_2")             # <<<<<<<<<<<<<<
 *         #if not self.gen_match_2_branch and "gen_match_2" not in self.complained:
 *         if not self.gen_match_2_branch and "gen_match_2":
 */
  __pyx_v_self->gen_match_2_branch = __pyx_v_the_tree->GetBranch(((char *)"gen_match_2"));

  /* "EMTree.pyx":2101
 *         self.gen_match_2_branch = the_tree.GetBranch("gen_match_2")
 *         #if not self.gen_match_2_branch and "gen_match_2" not in self.complained:
 *         if not self.gen_match_2_branch and "gen_match_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_match_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_match_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->gen_match_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L463_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L463_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2102
 *         #if not self.gen_match_2_branch and "gen_match_2" not in self.complained:
 *         if not self.gen_match_2_branch and "gen_match_2":
 *             warnings.warn( "EMTree: Expected branch gen_match_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_match_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__155, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2101
 *         self.gen_match_2_branch = the_tree.GetBranch("gen_match_2")
 *         #if not self.gen_match_2_branch and "gen_match_2" not in self.complained:
 *         if not self.gen_match_2_branch and "gen_match_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_match_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_match_2")
 */
    goto __pyx_L462;
  }

  /* "EMTree.pyx":2105
 *             #self.complained.add("gen_match_2")
 *         else:
 *             self.gen_match_2_branch.SetAddress(<void*>&self.gen_match_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making nbtag"
 */
  /*else*/ {
    __pyx_v_self->gen_match_2_branch->SetAddress(((void *)(&__pyx_v_self->gen_match_2_value)));
  }
  __pyx_L462:;

  /* "EMTree.pyx":2108
 * 
 *         #print "making nbtag"
 *         self.nbtag_branch = the_tree.GetBranch("nbtag")             # <<<<<<<<<<<<<<
 *         #if not self.nbtag_branch and "nbtag" not in self.complained:
 *         if not self.nbtag_branch and "nbtag":
 */
  __pyx_v_self->nbtag_branch = __pyx_v_the_tree->GetBranch(((char *)"nbtag"));

  /* "EMTree.pyx":2110
 *         self.nbtag_branch = the_tree.GetBranch("nbtag")
 *         #if not self.nbtag_branch and "nbtag" not in self.complained:
 *         if not self.nbtag_branch and "nbtag":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch nbtag does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("nbtag")
 */
  __pyx_t_2 = ((!(__pyx_v_self->nbtag_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L466_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L466_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2111
 *         #if not self.nbtag_branch and "nbtag" not in self.complained:
 *         if not self.nbtag_branch and "nbtag":
 *             warnings.warn( "EMTree: Expected branch nbtag does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("nbtag")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__156, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2110
 *         self.nbtag_branch = the_tree.GetBranch("nbtag")
 *         #if not self.nbtag_branch and "nbtag" not in self.complained:
 *         if not self.nbtag_branch and "nbtag":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch nbtag does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("nbtag")
 */
    goto __pyx_L465;
  }

  /* "EMTree.pyx":2114
 *             #self.complained.add("nbtag")
 *         else:
 *             self.nbtag_branch.SetAddress(<void*>&self.nbtag_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making nbtagL"
 */
  /*else*/ {
    __pyx_v_self->nbtag_branch->SetAddress(((void *)(&__pyx_v_self->nbtag_value)));
  }
  __pyx_L465:;

  /* "EMTree.pyx":2117
 * 
 *         #print "making nbtagL"
 *         self.nbtagL_branch = the_tree.GetBranch("nbtagL")             # <<<<<<<<<<<<<<
 *         #if not self.nbtagL_branch and "nbtagL" not in self.complained:
 *         if not self.nbtagL_branch and "nbtagL":
 */
  __pyx_v_self->nbtagL_branch = __pyx_v_the_tree->GetBranch(((char *)"nbtagL"));

  /* "EMTree.pyx":2119
 *         self.nbtagL_branch = the_tree.GetBranch("nbtagL")
 *         #if not self.nbtagL_branch and "nbtagL" not in self.complained:
 *         if not self.nbtagL_branch and "nbtagL":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch nbtagL does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("nbtagL")
 */
  __pyx_t_2 = ((!(__pyx_v_self->nbtagL_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L469_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L469_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2120
 *         #if not self.nbtagL_branch and "nbtagL" not in self.complained:
 *         if not self.nbtagL_branch and "nbtagL":
 *             warnings.warn( "EMTree: Expected branch nbtagL does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("nbtagL")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__157, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2119
 *         self.nbtagL_branch = the_tree.GetBranch("nbtagL")
 *         #if not self.nbtagL_branch and "nbtagL" not in self.complained:
 *         if not self.nbtagL_branch and "nbtagL":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch nbtagL does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("nbtagL")
 */
    goto __pyx_L468;
  }

  /* "EMTree.pyx":2123
 *             #self.complained.add("nbtagL")
 *         else:
 *             self.nbtagL_branch.SetAddress(<void*>&self.nbtagL_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets"
 */
  /*else*/ {
    __pyx_v_self->nbtagL_branch->SetAddress(((void *)(&__pyx_v_self->nbtagL_value)));
  }
  __pyx_L468:;

  /* "EMTree.pyx":2126
 * 
 *         #print "making njets"
 *         self.njets_branch = the_tree.GetBranch("njets")             # <<<<<<<<<<<<<<
 *         #if not self.njets_branch and "njets" not in self.complained:
 *         if not self.njets_branch and "njets":
 */
  __pyx_v_self->njets_branch = __pyx_v_the_tree->GetBranch(((char *)"njets"));

  /* "EMTree.pyx":2128
 *         self.njets_branch = the_tree.GetBranch("njets")
 *         #if not self.njets_branch and "njets" not in self.complained:
 *         if not self.njets_branch and "njets":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L472_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L472_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2129
 *         #if not self.njets_branch and "njets" not in self.complained:
 *         if not self.njets_branch and "njets":
 *             warnings.warn( "EMTree: Expected branch njets does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__158, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2128
 *         self.njets_branch = the_tree.GetBranch("njets")
 *         #if not self.njets_branch and "njets" not in self.complained:
 *         if not self.njets_branch and "njets":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets")
 */
    goto __pyx_L471;
  }

  /* "EMTree.pyx":2132
 *             #self.complained.add("njets")
 *         else:
 *             self.njets_branch.SetAddress(<void*>&self.njets_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetAbsoluteUp"
 */
  /*else*/ {
    __pyx_v_self->njets_branch->SetAddress(((void *)(&__pyx_v_self->njets_value)));
  }
  __pyx_L471:;

  /* "EMTree.pyx":2135
 * 
 *         #print "making njets_JetAbsoluteUp"
 *         self.njets_JetAbsoluteUp_branch = the_tree.GetBranch("njets_JetAbsoluteUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp" not in self.complained:
 *         if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp":
 */
  __pyx_v_self->njets_JetAbsoluteUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetAbsoluteUp"));

  /* "EMTree.pyx":2137
 *         self.njets_JetAbsoluteUp_branch = the_tree.GetBranch("njets_JetAbsoluteUp")
 *         #if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp" not in self.complained:
 *         if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetAbsoluteUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L475_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L475_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2138
 *         #if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp" not in self.complained:
 *         if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__159, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2137
 *         self.njets_JetAbsoluteUp_branch = the_tree.GetBranch("njets_JetAbsoluteUp")
 *         #if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp" not in self.complained:
 *         if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteUp")
 */
    goto __pyx_L474;
  }

  /* "EMTree.pyx":2141
 *             #self.complained.add("njets_JetAbsoluteUp")
 *         else:
 *             self.njets_JetAbsoluteUp_branch.SetAddress(<void*>&self.njets_JetAbsoluteUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetAbsoluteDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetAbsoluteUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetAbsoluteUp_value)));
  }
  __pyx_L474:;

  /* "EMTree.pyx":2144
 * 
 *         #print "making njets_JetAbsoluteDown"
 *         self.njets_JetAbsoluteDown_branch = the_tree.GetBranch("njets_JetAbsoluteDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown" not in self.complained:
 *         if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown":
 */
  __pyx_v_self->njets_JetAbsoluteDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetAbsoluteDown"));

  /* "EMTree.pyx":2146
 *         self.njets_JetAbsoluteDown_branch = the_tree.GetBranch("njets_JetAbsoluteDown")
 *         #if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown" not in self.complained:
 *         if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetAbsoluteDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L478_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L478_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2147
 *         #if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown" not in self.complained:
 *         if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__160, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2146
 *         self.njets_JetAbsoluteDown_branch = the_tree.GetBranch("njets_JetAbsoluteDown")
 *         #if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown" not in self.complained:
 *         if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteDown")
 */
    goto __pyx_L477;
  }

  /* "EMTree.pyx":2150
 *             #self.complained.add("njets_JetAbsoluteDown")
 *         else:
 *             self.njets_JetAbsoluteDown_branch.SetAddress(<void*>&self.njets_JetAbsoluteDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetAbsoluteyearUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetAbsoluteDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetAbsoluteDown_value)));
  }
  __pyx_L477:;

  /* "EMTree.pyx":2153
 * 
 *         #print "making njets_JetAbsoluteyearUp"
 *         self.njets_JetAbsoluteyearUp_branch = the_tree.GetBranch("njets_JetAbsoluteyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp" not in self.complained:
 *         if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp":
 */
  __pyx_v_self->njets_JetAbsoluteyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetAbsoluteyearUp"));

  /* "EMTree.pyx":2155
 *         self.njets_JetAbsoluteyearUp_branch = the_tree.GetBranch("njets_JetAbsoluteyearUp")
 *         #if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp" not in self.complained:
 *         if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetAbsoluteyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L481_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L481_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2156
 *         #if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp" not in self.complained:
 *         if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__161, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2155
 *         self.njets_JetAbsoluteyearUp_branch = the_tree.GetBranch("njets_JetAbsoluteyearUp")
 *         #if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp" not in self.complained:
 *         if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteyearUp")
 */
    goto __pyx_L480;
  }

  /* "EMTree.pyx":2159
 *             #self.complained.add("njets_JetAbsoluteyearUp")
 *         else:
 *             self.njets_JetAbsoluteyearUp_branch.SetAddress(<void*>&self.njets_JetAbsoluteyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetAbsoluteyearDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetAbsoluteyearUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetAbsoluteyearUp_value)));
  }
  __pyx_L480:;

  /* "EMTree.pyx":2162
 * 
 *         #print "making njets_JetAbsoluteyearDown"
 *         self.njets_JetAbsoluteyearDown_branch = the_tree.GetBranch("njets_JetAbsoluteyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown" not in self.complained:
 *         if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown":
 */
  __pyx_v_self->njets_JetAbsoluteyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetAbsoluteyearDown"));

  /* "EMTree.pyx":2164
 *         self.njets_JetAbsoluteyearDown_branch = the_tree.GetBranch("njets_JetAbsoluteyearDown")
 *         #if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown" not in self.complained:
 *         if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetAbsoluteyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L484_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L484_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2165
 *         #if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown" not in self.complained:
 *         if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__162, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2164
 *         self.njets_JetAbsoluteyearDown_branch = the_tree.GetBranch("njets_JetAbsoluteyearDown")
 *         #if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown" not in self.complained:
 *         if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetAbsoluteyearDown")
 */
    goto __pyx_L483;
  }

  /* "EMTree.pyx":2168
 *             #self.complained.add("njets_JetAbsoluteyearDown")
 *         else:
 *             self.njets_JetAbsoluteyearDown_branch.SetAddress(<void*>&self.njets_JetAbsoluteyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetBBEC1Up"
 */
  /*else*/ {
    __pyx_v_self->njets_JetAbsoluteyearDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetAbsoluteyearDown_value)));
  }
  __pyx_L483:;

  /* "EMTree.pyx":2171
 * 
 *         #print "making njets_JetBBEC1Up"
 *         self.njets_JetBBEC1Up_branch = the_tree.GetBranch("njets_JetBBEC1Up")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up" not in self.complained:
 *         if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up":
 */
  __pyx_v_self->njets_JetBBEC1Up_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetBBEC1Up"));

  /* "EMTree.pyx":2173
 *         self.njets_JetBBEC1Up_branch = the_tree.GetBranch("njets_JetBBEC1Up")
 *         #if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up" not in self.complained:
 *         if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetBBEC1Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L487_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L487_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2174
 *         #if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up" not in self.complained:
 *         if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__163, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2173
 *         self.njets_JetBBEC1Up_branch = the_tree.GetBranch("njets_JetBBEC1Up")
 *         #if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up" not in self.complained:
 *         if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1Up")
 */
    goto __pyx_L486;
  }

  /* "EMTree.pyx":2177
 *             #self.complained.add("njets_JetBBEC1Up")
 *         else:
 *             self.njets_JetBBEC1Up_branch.SetAddress(<void*>&self.njets_JetBBEC1Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetBBEC1Down"
 */
  /*else*/ {
    __pyx_v_self->njets_JetBBEC1Up_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetBBEC1Up_value)));
  }
  __pyx_L486:;

  /* "EMTree.pyx":2180
 * 
 *         #print "making njets_JetBBEC1Down"
 *         self.njets_JetBBEC1Down_branch = the_tree.GetBranch("njets_JetBBEC1Down")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down" not in self.complained:
 *         if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down":
 */
  __pyx_v_self->njets_JetBBEC1Down_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetBBEC1Down"));

  /* "EMTree.pyx":2182
 *         self.njets_JetBBEC1Down_branch = the_tree.GetBranch("njets_JetBBEC1Down")
 *         #if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down" not in self.complained:
 *         if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetBBEC1Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L490_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L490_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2183
 *         #if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down" not in self.complained:
 *         if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__164, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2182
 *         self.njets_JetBBEC1Down_branch = the_tree.GetBranch("njets_JetBBEC1Down")
 *         #if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down" not in self.complained:
 *         if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1Down")
 */
    goto __pyx_L489;
  }

  /* "EMTree.pyx":2186
 *             #self.complained.add("njets_JetBBEC1Down")
 *         else:
 *             self.njets_JetBBEC1Down_branch.SetAddress(<void*>&self.njets_JetBBEC1Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetBBEC1yearUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetBBEC1Down_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetBBEC1Down_value)));
  }
  __pyx_L489:;

  /* "EMTree.pyx":2189
 * 
 *         #print "making njets_JetBBEC1yearUp"
 *         self.njets_JetBBEC1yearUp_branch = the_tree.GetBranch("njets_JetBBEC1yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp" not in self.complained:
 *         if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp":
 */
  __pyx_v_self->njets_JetBBEC1yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetBBEC1yearUp"));

  /* "EMTree.pyx":2191
 *         self.njets_JetBBEC1yearUp_branch = the_tree.GetBranch("njets_JetBBEC1yearUp")
 *         #if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp" not in self.complained:
 *         if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetBBEC1yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L493_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L493_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2192
 *         #if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp" not in self.complained:
 *         if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__165, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2191
 *         self.njets_JetBBEC1yearUp_branch = the_tree.GetBranch("njets_JetBBEC1yearUp")
 *         #if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp" not in self.complained:
 *         if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1yearUp")
 */
    goto __pyx_L492;
  }

  /* "EMTree.pyx":2195
 *             #self.complained.add("njets_JetBBEC1yearUp")
 *         else:
 *             self.njets_JetBBEC1yearUp_branch.SetAddress(<void*>&self.njets_JetBBEC1yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetBBEC1yearDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetBBEC1yearUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetBBEC1yearUp_value)));
  }
  __pyx_L492:;

  /* "EMTree.pyx":2198
 * 
 *         #print "making njets_JetBBEC1yearDown"
 *         self.njets_JetBBEC1yearDown_branch = the_tree.GetBranch("njets_JetBBEC1yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown" not in self.complained:
 *         if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown":
 */
  __pyx_v_self->njets_JetBBEC1yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetBBEC1yearDown"));

  /* "EMTree.pyx":2200
 *         self.njets_JetBBEC1yearDown_branch = the_tree.GetBranch("njets_JetBBEC1yearDown")
 *         #if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown" not in self.complained:
 *         if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetBBEC1yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L496_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L496_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2201
 *         #if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown" not in self.complained:
 *         if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__166, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2200
 *         self.njets_JetBBEC1yearDown_branch = the_tree.GetBranch("njets_JetBBEC1yearDown")
 *         #if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown" not in self.complained:
 *         if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetBBEC1yearDown")
 */
    goto __pyx_L495;
  }

  /* "EMTree.pyx":2204
 *             #self.complained.add("njets_JetBBEC1yearDown")
 *         else:
 *             self.njets_JetBBEC1yearDown_branch.SetAddress(<void*>&self.njets_JetBBEC1yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetEC2Up"
 */
  /*else*/ {
    __pyx_v_self->njets_JetBBEC1yearDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetBBEC1yearDown_value)));
  }
  __pyx_L495:;

  /* "EMTree.pyx":2207
 * 
 *         #print "making njets_JetEC2Up"
 *         self.njets_JetEC2Up_branch = the_tree.GetBranch("njets_JetEC2Up")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetEC2Up_branch and "njets_JetEC2Up" not in self.complained:
 *         if not self.njets_JetEC2Up_branch and "njets_JetEC2Up":
 */
  __pyx_v_self->njets_JetEC2Up_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetEC2Up"));

  /* "EMTree.pyx":2209
 *         self.njets_JetEC2Up_branch = the_tree.GetBranch("njets_JetEC2Up")
 *         #if not self.njets_JetEC2Up_branch and "njets_JetEC2Up" not in self.complained:
 *         if not self.njets_JetEC2Up_branch and "njets_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2Up")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetEC2Up_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L499_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L499_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2210
 *         #if not self.njets_JetEC2Up_branch and "njets_JetEC2Up" not in self.complained:
 *         if not self.njets_JetEC2Up_branch and "njets_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2Up")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__167, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2209
 *         self.njets_JetEC2Up_branch = the_tree.GetBranch("njets_JetEC2Up")
 *         #if not self.njets_JetEC2Up_branch and "njets_JetEC2Up" not in self.complained:
 *         if not self.njets_JetEC2Up_branch and "njets_JetEC2Up":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2Up")
 */
    goto __pyx_L498;
  }

  /* "EMTree.pyx":2213
 *             #self.complained.add("njets_JetEC2Up")
 *         else:
 *             self.njets_JetEC2Up_branch.SetAddress(<void*>&self.njets_JetEC2Up_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetEC2Down"
 */
  /*else*/ {
    __pyx_v_self->njets_JetEC2Up_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetEC2Up_value)));
  }
  __pyx_L498:;

  /* "EMTree.pyx":2216
 * 
 *         #print "making njets_JetEC2Down"
 *         self.njets_JetEC2Down_branch = the_tree.GetBranch("njets_JetEC2Down")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetEC2Down_branch and "njets_JetEC2Down" not in self.complained:
 *         if not self.njets_JetEC2Down_branch and "njets_JetEC2Down":
 */
  __pyx_v_self->njets_JetEC2Down_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetEC2Down"));

  /* "EMTree.pyx":2218
 *         self.njets_JetEC2Down_branch = the_tree.GetBranch("njets_JetEC2Down")
 *         #if not self.njets_JetEC2Down_branch and "njets_JetEC2Down" not in self.complained:
 *         if not self.njets_JetEC2Down_branch and "njets_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2Down")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetEC2Down_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L502_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L502_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2219
 *         #if not self.njets_JetEC2Down_branch and "njets_JetEC2Down" not in self.complained:
 *         if not self.njets_JetEC2Down_branch and "njets_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2Down")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__168, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2218
 *         self.njets_JetEC2Down_branch = the_tree.GetBranch("njets_JetEC2Down")
 *         #if not self.njets_JetEC2Down_branch and "njets_JetEC2Down" not in self.complained:
 *         if not self.njets_JetEC2Down_branch and "njets_JetEC2Down":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2Down")
 */
    goto __pyx_L501;
  }

  /* "EMTree.pyx":2222
 *             #self.complained.add("njets_JetEC2Down")
 *         else:
 *             self.njets_JetEC2Down_branch.SetAddress(<void*>&self.njets_JetEC2Down_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetEC2yearUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetEC2Down_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetEC2Down_value)));
  }
  __pyx_L501:;

  /* "EMTree.pyx":2225
 * 
 *         #print "making njets_JetEC2yearUp"
 *         self.njets_JetEC2yearUp_branch = the_tree.GetBranch("njets_JetEC2yearUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp" not in self.complained:
 *         if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp":
 */
  __pyx_v_self->njets_JetEC2yearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetEC2yearUp"));

  /* "EMTree.pyx":2227
 *         self.njets_JetEC2yearUp_branch = the_tree.GetBranch("njets_JetEC2yearUp")
 *         #if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp" not in self.complained:
 *         if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2yearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetEC2yearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L505_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L505_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2228
 *         #if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp" not in self.complained:
 *         if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2yearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__169, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2227
 *         self.njets_JetEC2yearUp_branch = the_tree.GetBranch("njets_JetEC2yearUp")
 *         #if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp" not in self.complained:
 *         if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2yearUp")
 */
    goto __pyx_L504;
  }

  /* "EMTree.pyx":2231
 *             #self.complained.add("njets_JetEC2yearUp")
 *         else:
 *             self.njets_JetEC2yearUp_branch.SetAddress(<void*>&self.njets_JetEC2yearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetEC2yearDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetEC2yearUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetEC2yearUp_value)));
  }
  __pyx_L504:;

  /* "EMTree.pyx":2234
 * 
 *         #print "making njets_JetEC2yearDown"
 *         self.njets_JetEC2yearDown_branch = the_tree.GetBranch("njets_JetEC2yearDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown" not in self.complained:
 *         if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown":
 */
  __pyx_v_self->njets_JetEC2yearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetEC2yearDown"));

  /* "EMTree.pyx":2236
 *         self.njets_JetEC2yearDown_branch = the_tree.GetBranch("njets_JetEC2yearDown")
 *         #if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown" not in self.complained:
 *         if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2yearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetEC2yearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L508_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L508_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2237
 *         #if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown" not in self.complained:
 *         if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2yearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__170, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2236
 *         self.njets_JetEC2yearDown_branch = the_tree.GetBranch("njets_JetEC2yearDown")
 *         #if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown" not in self.complained:
 *         if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetEC2yearDown")
 */
    goto __pyx_L507;
  }

  /* "EMTree.pyx":2240
 *             #self.complained.add("njets_JetEC2yearDown")
 *         else:
 *             self.njets_JetEC2yearDown_branch.SetAddress(<void*>&self.njets_JetEC2yearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetFlavorQCDUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetEC2yearDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetEC2yearDown_value)));
  }
  __pyx_L507:;

  /* "EMTree.pyx":2243
 * 
 *         #print "making njets_JetFlavorQCDUp"
 *         self.njets_JetFlavorQCDUp_branch = the_tree.GetBranch("njets_JetFlavorQCDUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp" not in self.complained:
 *         if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp":
 */
  __pyx_v_self->njets_JetFlavorQCDUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetFlavorQCDUp"));

  /* "EMTree.pyx":2245
 *         self.njets_JetFlavorQCDUp_branch = the_tree.GetBranch("njets_JetFlavorQCDUp")
 *         #if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp" not in self.complained:
 *         if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetFlavorQCDUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetFlavorQCDUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L511_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L511_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2246
 *         #if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp" not in self.complained:
 *         if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetFlavorQCDUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2245
 *         self.njets_JetFlavorQCDUp_branch = the_tree.GetBranch("njets_JetFlavorQCDUp")
 *         #if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp" not in self.complained:
 *         if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetFlavorQCDUp")
 */
    goto __pyx_L510;
  }

  /* "EMTree.pyx":2249
 *             #self.complained.add("njets_JetFlavorQCDUp")
 *         else:
 *             self.njets_JetFlavorQCDUp_branch.SetAddress(<void*>&self.njets_JetFlavorQCDUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetFlavorQCDDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetFlavorQCDUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetFlavorQCDUp_value)));
  }
  __pyx_L510:;

  /* "EMTree.pyx":2252
 * 
 *         #print "making njets_JetFlavorQCDDown"
 *         self.njets_JetFlavorQCDDown_branch = the_tree.GetBranch("njets_JetFlavorQCDDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown" not in self.complained:
 *         if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown":
 */
  __pyx_v_self->njets_JetFlavorQCDDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetFlavorQCDDown"));

  /* "EMTree.pyx":2254
 *         self.njets_JetFlavorQCDDown_branch = the_tree.GetBranch("njets_JetFlavorQCDDown")
 *         #if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown" not in self.complained:
 *         if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetFlavorQCDDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetFlavorQCDDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L514_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L514_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2255
 *         #if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown" not in self.complained:
 *         if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetFlavorQCDDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2254
 *         self.njets_JetFlavorQCDDown_branch = the_tree.GetBranch("njets_JetFlavorQCDDown")
 *         #if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown" not in self.complained:
 *         if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetFlavorQCDDown")
 */
    goto __pyx_L513;
  }

  /* "EMTree.pyx":2258
 *             #self.complained.add("njets_JetFlavorQCDDown")
 *         else:
 *             self.njets_JetFlavorQCDDown_branch.SetAddress(<void*>&self.njets_JetFlavorQCDDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetHFUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetFlavorQCDDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetFlavorQCDDown_value)));
  }
  __pyx_L513:;

  /* "EMTree.pyx":2261
 * 
 *         #print "making njets_JetHFUp"
 *         self.njets_JetHFUp_branch = the_tree.GetBranch("njets_JetHFUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetHFUp_branch and "njets_JetHFUp" not in self.complained:
 *         if not self.njets_JetHFUp_branch and "njets_JetHFUp":
 */
  __pyx_v_self->njets_JetHFUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetHFUp"));

  /* "EMTree.pyx":2263
 *         self.njets_JetHFUp_branch = the_tree.GetBranch("njets_JetHFUp")
 *         #if not self.njets_JetHFUp_branch and "njets_JetHFUp" not in self.complained:
 *         if not self.njets_JetHFUp_branch and "njets_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetHFUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L517_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L517_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2264
 *         #if not self.njets_JetHFUp_branch and "njets_JetHFUp" not in self.complained:
 *         if not self.njets_JetHFUp_branch and "njets_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2263
 *         self.njets_JetHFUp_branch = the_tree.GetBranch("njets_JetHFUp")
 *         #if not self.njets_JetHFUp_branch and "njets_JetHFUp" not in self.complained:
 *         if not self.njets_JetHFUp_branch and "njets_JetHFUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFUp")
 */
    goto __pyx_L516;
  }

  /* "EMTree.pyx":2267
 *             #self.complained.add("njets_JetHFUp")
 *         else:
 *             self.njets_JetHFUp_branch.SetAddress(<void*>&self.njets_JetHFUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetHFDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetHFUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetHFUp_value)));
  }
  __pyx_L516:;

  /* "EMTree.pyx":2270
 * 
 *         #print "making njets_JetHFDown"
 *         self.njets_JetHFDown_branch = the_tree.GetBranch("njets_JetHFDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetHFDown_branch and "njets_JetHFDown" not in self.complained:
 *         if not self.njets_JetHFDown_branch and "njets_JetHFDown":
 */
  __pyx_v_self->njets_JetHFDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetHFDown"));

  /* "EMTree.pyx":2272
 *         self.njets_JetHFDown_branch = the_tree.GetBranch("njets_JetHFDown")
 *         #if not self.njets_JetHFDown_branch and "njets_JetHFDown" not in self.complained:
 *         if not self.njets_JetHFDown_branch and "njets_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetHFDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L520_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L520_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2273
 *         #if not self.njets_JetHFDown_branch and "njets_JetHFDown" not in self.complained:
 *         if not self.njets_JetHFDown_branch and "njets_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2272
 *         self.njets_JetHFDown_branch = the_tree.GetBranch("njets_JetHFDown")
 *         #if not self.njets_JetHFDown_branch and "njets_JetHFDown" not in self.complained:
 *         if not self.njets_JetHFDown_branch and "njets_JetHFDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFDown")
 */
    goto __pyx_L519;
  }

  /* "EMTree.pyx":2276
 *             #self.complained.add("njets_JetHFDown")
 *         else:
 *             self.njets_JetHFDown_branch.SetAddress(<void*>&self.njets_JetHFDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetHFyearUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetHFDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetHFDown_value)));
  }
  __pyx_L519:;

  /* "EMTree.pyx":2279
 * 
 *         #print "making njets_JetHFyearUp"
 *         self.njets_JetHFyearUp_branch = the_tree.GetBranch("njets_JetHFyearUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp" not in self.complained:
 *         if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp":
 */
  __pyx_v_self->njets_JetHFyearUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetHFyearUp"));

  /* "EMTree.pyx":2281
 *         self.njets_JetHFyearUp_branch = the_tree.GetBranch("njets_JetHFyearUp")
 *         #if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp" not in self.complained:
 *         if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFyearUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetHFyearUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L523_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L523_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2282
 *         #if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp" not in self.complained:
 *         if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFyearUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__175, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2281
 *         self.njets_JetHFyearUp_branch = the_tree.GetBranch("njets_JetHFyearUp")
 *         #if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp" not in self.complained:
 *         if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFyearUp")
 */
    goto __pyx_L522;
  }

  /* "EMTree.pyx":2285
 *             #self.complained.add("njets_JetHFyearUp")
 *         else:
 *             self.njets_JetHFyearUp_branch.SetAddress(<void*>&self.njets_JetHFyearUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetHFyearDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetHFyearUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetHFyearUp_value)));
  }
  __pyx_L522:;

  /* "EMTree.pyx":2288
 * 
 *         #print "making njets_JetHFyearDown"
 *         self.njets_JetHFyearDown_branch = the_tree.GetBranch("njets_JetHFyearDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown" not in self.complained:
 *         if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown":
 */
  __pyx_v_self->njets_JetHFyearDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetHFyearDown"));

  /* "EMTree.pyx":2290
 *         self.njets_JetHFyearDown_branch = the_tree.GetBranch("njets_JetHFyearDown")
 *         #if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown" not in self.complained:
 *         if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFyearDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetHFyearDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L526_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L526_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2291
 *         #if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown" not in self.complained:
 *         if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFyearDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__176, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2290
 *         self.njets_JetHFyearDown_branch = the_tree.GetBranch("njets_JetHFyearDown")
 *         #if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown" not in self.complained:
 *         if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetHFyearDown")
 */
    goto __pyx_L525;
  }

  /* "EMTree.pyx":2294
 *             #self.complained.add("njets_JetHFyearDown")
 *         else:
 *             self.njets_JetHFyearDown_branch.SetAddress(<void*>&self.njets_JetHFyearDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetRelativeBalUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetHFyearDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetHFyearDown_value)));
  }
  __pyx_L525:;

  /* "EMTree.pyx":2297
 * 
 *         #print "making njets_JetRelativeBalUp"
 *         self.njets_JetRelativeBalUp_branch = the_tree.GetBranch("njets_JetRelativeBalUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp" not in self.complained:
 *         if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp":
 */
  __pyx_v_self->njets_JetRelativeBalUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetRelativeBalUp"));

  /* "EMTree.pyx":2299
 *         self.njets_JetRelativeBalUp_branch = the_tree.GetBranch("njets_JetRelativeBalUp")
 *         #if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp" not in self.complained:
 *         if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeBalUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetRelativeBalUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L529_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L529_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2300
 *         #if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp" not in self.complained:
 *         if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeBalUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__177, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2299
 *         self.njets_JetRelativeBalUp_branch = the_tree.GetBranch("njets_JetRelativeBalUp")
 *         #if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp" not in self.complained:
 *         if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeBalUp")
 */
    goto __pyx_L528;
  }

  /* "EMTree.pyx":2303
 *             #self.complained.add("njets_JetRelativeBalUp")
 *         else:
 *             self.njets_JetRelativeBalUp_branch.SetAddress(<void*>&self.njets_JetRelativeBalUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetRelativeBalDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetRelativeBalUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetRelativeBalUp_value)));
  }
  __pyx_L528:;

  /* "EMTree.pyx":2306
 * 
 *         #print "making njets_JetRelativeBalDown"
 *         self.njets_JetRelativeBalDown_branch = the_tree.GetBranch("njets_JetRelativeBalDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown" not in self.complained:
 *         if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown":
 */
  __pyx_v_self->njets_JetRelativeBalDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetRelativeBalDown"));

  /* "EMTree.pyx":2308
 *         self.njets_JetRelativeBalDown_branch = the_tree.GetBranch("njets_JetRelativeBalDown")
 *         #if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown" not in self.complained:
 *         if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeBalDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetRelativeBalDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L532_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L532_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2309
 *         #if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown" not in self.complained:
 *         if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeBalDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__178, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2308
 *         self.njets_JetRelativeBalDown_branch = the_tree.GetBranch("njets_JetRelativeBalDown")
 *         #if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown" not in self.complained:
 *         if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeBalDown")
 */
    goto __pyx_L531;
  }

  /* "EMTree.pyx":2312
 *             #self.complained.add("njets_JetRelativeBalDown")
 *         else:
 *             self.njets_JetRelativeBalDown_branch.SetAddress(<void*>&self.njets_JetRelativeBalDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetRelativeSampleUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetRelativeBalDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetRelativeBalDown_value)));
  }
  __pyx_L531:;

  /* "EMTree.pyx":2315
 * 
 *         #print "making njets_JetRelativeSampleUp"
 *         self.njets_JetRelativeSampleUp_branch = the_tree.GetBranch("njets_JetRelativeSampleUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp" not in self.complained:
 *         if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp":
 */
  __pyx_v_self->njets_JetRelativeSampleUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetRelativeSampleUp"));

  /* "EMTree.pyx":2317
 *         self.njets_JetRelativeSampleUp_branch = the_tree.GetBranch("njets_JetRelativeSampleUp")
 *         #if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp" not in self.complained:
 *         if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeSampleUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetRelativeSampleUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L535_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L535_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2318
 *         #if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp" not in self.complained:
 *         if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeSampleUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2317
 *         self.njets_JetRelativeSampleUp_branch = the_tree.GetBranch("njets_JetRelativeSampleUp")
 *         #if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp" not in self.complained:
 *         if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeSampleUp")
 */
    goto __pyx_L534;
  }

  /* "EMTree.pyx":2321
 *             #self.complained.add("njets_JetRelativeSampleUp")
 *         else:
 *             self.njets_JetRelativeSampleUp_branch.SetAddress(<void*>&self.njets_JetRelativeSampleUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JetRelativeSampleDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JetRelativeSampleUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetRelativeSampleUp_value)));
  }
  __pyx_L534:;

  /* "EMTree.pyx":2324
 * 
 *         #print "making njets_JetRelativeSampleDown"
 *         self.njets_JetRelativeSampleDown_branch = the_tree.GetBranch("njets_JetRelativeSampleDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown" not in self.complained:
 *         if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown":
 */
  __pyx_v_self->njets_JetRelativeSampleDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JetRelativeSampleDown"));

  /* "EMTree.pyx":2326
 *         self.njets_JetRelativeSampleDown_branch = the_tree.GetBranch("njets_JetRelativeSampleDown")
 *         #if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown" not in self.complained:
 *         if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeSampleDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JetRelativeSampleDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L538_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L538_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2327
 *         #if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown" not in self.complained:
 *         if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeSampleDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2326
 *         self.njets_JetRelativeSampleDown_branch = the_tree.GetBranch("njets_JetRelativeSampleDown")
 *         #if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown" not in self.complained:
 *         if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JetRelativeSampleDown")
 */
    goto __pyx_L537;
  }

  /* "EMTree.pyx":2330
 *             #self.complained.add("njets_JetRelativeSampleDown")
 *         else:
 *             self.njets_JetRelativeSampleDown_branch.SetAddress(<void*>&self.njets_JetRelativeSampleDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JERUp"
 */
  /*else*/ {
    __pyx_v_self->njets_JetRelativeSampleDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JetRelativeSampleDown_value)));
  }
  __pyx_L537:;

  /* "EMTree.pyx":2333
 * 
 *         #print "making njets_JERUp"
 *         self.njets_JERUp_branch = the_tree.GetBranch("njets_JERUp")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JERUp_branch and "njets_JERUp" not in self.complained:
 *         if not self.njets_JERUp_branch and "njets_JERUp":
 */
  __pyx_v_self->njets_JERUp_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JERUp"));

  /* "EMTree.pyx":2335
 *         self.njets_JERUp_branch = the_tree.GetBranch("njets_JERUp")
 *         #if not self.njets_JERUp_branch and "njets_JERUp" not in self.complained:
 *         if not self.njets_JERUp_branch and "njets_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JERUp")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JERUp_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L541_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L541_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2336
 *         #if not self.njets_JERUp_branch and "njets_JERUp" not in self.complained:
 *         if not self.njets_JERUp_branch and "njets_JERUp":
 *             warnings.warn( "EMTree: Expected branch njets_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JERUp")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__181, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2335
 *         self.njets_JERUp_branch = the_tree.GetBranch("njets_JERUp")
 *         #if not self.njets_JERUp_branch and "njets_JERUp" not in self.complained:
 *         if not self.njets_JERUp_branch and "njets_JERUp":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JERUp does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JERUp")
 */
    goto __pyx_L540;
  }

  /* "EMTree.pyx":2339
 *             #self.complained.add("njets_JERUp")
 *         else:
 *             self.njets_JERUp_branch.SetAddress(<void*>&self.njets_JERUp_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making njets_JERDown"
 */
  /*else*/ {
    __pyx_v_self->njets_JERUp_branch->SetAddress(((void *)(&__pyx_v_self->njets_JERUp_value)));
  }
  __pyx_L540:;

  /* "EMTree.pyx":2342
 * 
 *         #print "making njets_JERDown"
 *         self.njets_JERDown_branch = the_tree.GetBranch("njets_JERDown")             # <<<<<<<<<<<<<<
 *         #if not self.njets_JERDown_branch and "njets_JERDown" not in self.complained:
 *         if not self.njets_JERDown_branch and "njets_JERDown":
 */
  __pyx_v_self->njets_JERDown_branch = __pyx_v_the_tree->GetBranch(((char *)"njets_JERDown"));

  /* "EMTree.pyx":2344
 *         self.njets_JERDown_branch = the_tree.GetBranch("njets_JERDown")
 *         #if not self.njets_JERDown_branch and "njets_JERDown" not in self.complained:
 *         if not self.njets_JERDown_branch and "njets_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JERDown")
 */
  __pyx_t_2 = ((!(__pyx_v_self->njets_JERDown_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L544_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L544_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2345
 *         #if not self.njets_JERDown_branch and "njets_JERDown" not in self.complained:
 *         if not self.njets_JERDown_branch and "njets_JERDown":
 *             warnings.warn( "EMTree: Expected branch njets_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JERDown")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__182, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2344
 *         self.njets_JERDown_branch = the_tree.GetBranch("njets_JERDown")
 *         #if not self.njets_JERDown_branch and "njets_JERDown" not in self.complained:
 *         if not self.njets_JERDown_branch and "njets_JERDown":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch njets_JERDown does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("njets_JERDown")
 */
    goto __pyx_L543;
  }

  /* "EMTree.pyx":2348
 *             #self.complained.add("njets_JERDown")
 *         else:
 *             self.njets_JERDown_branch.SetAddress(<void*>&self.njets_JERDown_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jpt_1"
 */
  /*else*/ {
    __pyx_v_self->njets_JERDown_branch->SetAddress(((void *)(&__pyx_v_self->njets_JERDown_value)));
  }
  __pyx_L543:;

  /* "EMTree.pyx":2351
 * 
 *         #print "making jpt_1"
 *         self.jpt_1_branch = the_tree.GetBranch("jpt_1")             # <<<<<<<<<<<<<<
 *         #if not self.jpt_1_branch and "jpt_1" not in self.complained:
 *         if not self.jpt_1_branch and "jpt_1":
 */
  __pyx_v_self->jpt_1_branch = __pyx_v_the_tree->GetBranch(((char *)"jpt_1"));

  /* "EMTree.pyx":2353
 *         self.jpt_1_branch = the_tree.GetBranch("jpt_1")
 *         #if not self.jpt_1_branch and "jpt_1" not in self.complained:
 *         if not self.jpt_1_branch and "jpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jpt_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jpt_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L547_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L547_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2354
 *         #if not self.jpt_1_branch and "jpt_1" not in self.complained:
 *         if not self.jpt_1_branch and "jpt_1":
 *             warnings.warn( "EMTree: Expected branch jpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jpt_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__183, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2353
 *         self.jpt_1_branch = the_tree.GetBranch("jpt_1")
 *         #if not self.jpt_1_branch and "jpt_1" not in self.complained:
 *         if not self.jpt_1_branch and "jpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jpt_1")
 */
    goto __pyx_L546;
  }

  /* "EMTree.pyx":2357
 *             #self.complained.add("jpt_1")
 *         else:
 *             self.jpt_1_branch.SetAddress(<void*>&self.jpt_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jeta_1"
 */
  /*else*/ {
    __pyx_v_self->jpt_1_branch->SetAddress(((void *)(&__pyx_v_self->jpt_1_value)));
  }
  __pyx_L546:;

  /* "EMTree.pyx":2360
 * 
 *         #print "making jeta_1"
 *         self.jeta_1_branch = the_tree.GetBranch("jeta_1")             # <<<<<<<<<<<<<<
 *         #if not self.jeta_1_branch and "jeta_1" not in self.complained:
 *         if not self.jeta_1_branch and "jeta_1":
 */
  __pyx_v_self->jeta_1_branch = __pyx_v_the_tree->GetBranch(((char *)"jeta_1"));

  /* "EMTree.pyx":2362
 *         self.jeta_1_branch = the_tree.GetBranch("jeta_1")
 *         #if not self.jeta_1_branch and "jeta_1" not in self.complained:
 *         if not self.jeta_1_branch and "jeta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jeta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jeta_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jeta_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L550_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L550_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2363
 *         #if not self.jeta_1_branch and "jeta_1" not in self.complained:
 *         if not self.jeta_1_branch and "jeta_1":
 *             warnings.warn( "EMTree: Expected branch jeta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jeta_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__184, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2362
 *         self.jeta_1_branch = the_tree.GetBranch("jeta_1")
 *         #if not self.jeta_1_branch and "jeta_1" not in self.complained:
 *         if not self.jeta_1_branch and "jeta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jeta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jeta_1")
 */
    goto __pyx_L549;
  }

  /* "EMTree.pyx":2366
 *             #self.complained.add("jeta_1")
 *         else:
 *             self.jeta_1_branch.SetAddress(<void*>&self.jeta_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jcsv_1"
 */
  /*else*/ {
    __pyx_v_self->jeta_1_branch->SetAddress(((void *)(&__pyx_v_self->jeta_1_value)));
  }
  __pyx_L549:;

  /* "EMTree.pyx":2369
 * 
 *         #print "making jcsv_1"
 *         self.jcsv_1_branch = the_tree.GetBranch("jcsv_1")             # <<<<<<<<<<<<<<
 *         #if not self.jcsv_1_branch and "jcsv_1" not in self.complained:
 *         if not self.jcsv_1_branch and "jcsv_1":
 */
  __pyx_v_self->jcsv_1_branch = __pyx_v_the_tree->GetBranch(((char *)"jcsv_1"));

  /* "EMTree.pyx":2371
 *         self.jcsv_1_branch = the_tree.GetBranch("jcsv_1")
 *         #if not self.jcsv_1_branch and "jcsv_1" not in self.complained:
 *         if not self.jcsv_1_branch and "jcsv_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jcsv_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jcsv_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jcsv_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L553_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L553_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2372
 *         #if not self.jcsv_1_branch and "jcsv_1" not in self.complained:
 *         if not self.jcsv_1_branch and "jcsv_1":
 *             warnings.warn( "EMTree: Expected branch jcsv_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jcsv_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__185, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2371
 *         self.jcsv_1_branch = the_tree.GetBranch("jcsv_1")
 *         #if not self.jcsv_1_branch and "jcsv_1" not in self.complained:
 *         if not self.jcsv_1_branch and "jcsv_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jcsv_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jcsv_1")
 */
    goto __pyx_L552;
  }

  /* "EMTree.pyx":2375
 *             #self.complained.add("jcsv_1")
 *         else:
 *             self.jcsv_1_branch.SetAddress(<void*>&self.jcsv_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jphi_1"
 */
  /*else*/ {
    __pyx_v_self->jcsv_1_branch->SetAddress(((void *)(&__pyx_v_self->jcsv_1_value)));
  }
  __pyx_L552:;

  /* "EMTree.pyx":2378
 * 
 *         #print "making jphi_1"
 *         self.jphi_1_branch = the_tree.GetBranch("jphi_1")             # <<<<<<<<<<<<<<
 *         #if not self.jphi_1_branch and "jphi_1" not in self.complained:
 *         if not self.jphi_1_branch and "jphi_1":
 */
  __pyx_v_self->jphi_1_branch = __pyx_v_the_tree->GetBranch(((char *)"jphi_1"));

  /* "EMTree.pyx":2380
 *         self.jphi_1_branch = the_tree.GetBranch("jphi_1")
 *         #if not self.jphi_1_branch and "jphi_1" not in self.complained:
 *         if not self.jphi_1_branch and "jphi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jphi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jphi_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jphi_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L556_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L556_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2381
 *         #if not self.jphi_1_branch and "jphi_1" not in self.complained:
 *         if not self.jphi_1_branch and "jphi_1":
 *             warnings.warn( "EMTree: Expected branch jphi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jphi_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__186, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2380
 *         self.jphi_1_branch = the_tree.GetBranch("jphi_1")
 *         #if not self.jphi_1_branch and "jphi_1" not in self.complained:
 *         if not self.jphi_1_branch and "jphi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jphi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jphi_1")
 */
    goto __pyx_L555;
  }

  /* "EMTree.pyx":2384
 *             #self.complained.add("jphi_1")
 *         else:
 *             self.jphi_1_branch.SetAddress(<void*>&self.jphi_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jpt_2"
 */
  /*else*/ {
    __pyx_v_self->jphi_1_branch->SetAddress(((void *)(&__pyx_v_self->jphi_1_value)));
  }
  __pyx_L555:;

  /* "EMTree.pyx":2387
 * 
 *         #print "making jpt_2"
 *         self.jpt_2_branch = the_tree.GetBranch("jpt_2")             # <<<<<<<<<<<<<<
 *         #if not self.jpt_2_branch and "jpt_2" not in self.complained:
 *         if not self.jpt_2_branch and "jpt_2":
 */
  __pyx_v_self->jpt_2_branch = __pyx_v_the_tree->GetBranch(((char *)"jpt_2"));

  /* "EMTree.pyx":2389
 *         self.jpt_2_branch = the_tree.GetBranch("jpt_2")
 *         #if not self.jpt_2_branch and "jpt_2" not in self.complained:
 *         if not self.jpt_2_branch and "jpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jpt_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jpt_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L559_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L559_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2390
 *         #if not self.jpt_2_branch and "jpt_2" not in self.complained:
 *         if not self.jpt_2_branch and "jpt_2":
 *             warnings.warn( "EMTree: Expected branch jpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jpt_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__187, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2389
 *         self.jpt_2_branch = the_tree.GetBranch("jpt_2")
 *         #if not self.jpt_2_branch and "jpt_2" not in self.complained:
 *         if not self.jpt_2_branch and "jpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jpt_2")
 */
    goto __pyx_L558;
  }

  /* "EMTree.pyx":2393
 *             #self.complained.add("jpt_2")
 *         else:
 *             self.jpt_2_branch.SetAddress(<void*>&self.jpt_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jeta_2"
 */
  /*else*/ {
    __pyx_v_self->jpt_2_branch->SetAddress(((void *)(&__pyx_v_self->jpt_2_value)));
  }
  __pyx_L558:;

  /* "EMTree.pyx":2396
 * 
 *         #print "making jeta_2"
 *         self.jeta_2_branch = the_tree.GetBranch("jeta_2")             # <<<<<<<<<<<<<<
 *         #if not self.jeta_2_branch and "jeta_2" not in self.complained:
 *         if not self.jeta_2_branch and "jeta_2":
 */
  __pyx_v_self->jeta_2_branch = __pyx_v_the_tree->GetBranch(((char *)"jeta_2"));

  /* "EMTree.pyx":2398
 *         self.jeta_2_branch = the_tree.GetBranch("jeta_2")
 *         #if not self.jeta_2_branch and "jeta_2" not in self.complained:
 *         if not self.jeta_2_branch and "jeta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jeta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jeta_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jeta_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L562_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L562_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2399
 *         #if not self.jeta_2_branch and "jeta_2" not in self.complained:
 *         if not self.jeta_2_branch and "jeta_2":
 *             warnings.warn( "EMTree: Expected branch jeta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jeta_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__188, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2398
 *         self.jeta_2_branch = the_tree.GetBranch("jeta_2")
 *         #if not self.jeta_2_branch and "jeta_2" not in self.complained:
 *         if not self.jeta_2_branch and "jeta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jeta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jeta_2")
 */
    goto __pyx_L561;
  }

  /* "EMTree.pyx":2402
 *             #self.complained.add("jeta_2")
 *         else:
 *             self.jeta_2_branch.SetAddress(<void*>&self.jeta_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jcsv_2"
 */
  /*else*/ {
    __pyx_v_self->jeta_2_branch->SetAddress(((void *)(&__pyx_v_self->jeta_2_value)));
  }
  __pyx_L561:;

  /* "EMTree.pyx":2405
 * 
 *         #print "making jcsv_2"
 *         self.jcsv_2_branch = the_tree.GetBranch("jcsv_2")             # <<<<<<<<<<<<<<
 *         #if not self.jcsv_2_branch and "jcsv_2" not in self.complained:
 *         if not self.jcsv_2_branch and "jcsv_2":
 */
  __pyx_v_self->jcsv_2_branch = __pyx_v_the_tree->GetBranch(((char *)"jcsv_2"));

  /* "EMTree.pyx":2407
 *         self.jcsv_2_branch = the_tree.GetBranch("jcsv_2")
 *         #if not self.jcsv_2_branch and "jcsv_2" not in self.complained:
 *         if not self.jcsv_2_branch and "jcsv_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jcsv_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jcsv_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jcsv_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L565_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L565_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2408
 *         #if not self.jcsv_2_branch and "jcsv_2" not in self.complained:
 *         if not self.jcsv_2_branch and "jcsv_2":
 *             warnings.warn( "EMTree: Expected branch jcsv_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jcsv_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__189, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2407
 *         self.jcsv_2_branch = the_tree.GetBranch("jcsv_2")
 *         #if not self.jcsv_2_branch and "jcsv_2" not in self.complained:
 *         if not self.jcsv_2_branch and "jcsv_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jcsv_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jcsv_2")
 */
    goto __pyx_L564;
  }

  /* "EMTree.pyx":2411
 *             #self.complained.add("jcsv_2")
 *         else:
 *             self.jcsv_2_branch.SetAddress(<void*>&self.jcsv_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making jphi_2"
 */
  /*else*/ {
    __pyx_v_self->jcsv_2_branch->SetAddress(((void *)(&__pyx_v_self->jcsv_2_value)));
  }
  __pyx_L564:;

  /* "EMTree.pyx":2414
 * 
 *         #print "making jphi_2"
 *         self.jphi_2_branch = the_tree.GetBranch("jphi_2")             # <<<<<<<<<<<<<<
 *         #if not self.jphi_2_branch and "jphi_2" not in self.complained:
 *         if not self.jphi_2_branch and "jphi_2":
 */
  __pyx_v_self->jphi_2_branch = __pyx_v_the_tree->GetBranch(((char *)"jphi_2"));

  /* "EMTree.pyx":2416
 *         self.jphi_2_branch = the_tree.GetBranch("jphi_2")
 *         #if not self.jphi_2_branch and "jphi_2" not in self.complained:
 *         if not self.jphi_2_branch and "jphi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jphi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jphi_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->jphi_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L568_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L568_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2417
 *         #if not self.jphi_2_branch and "jphi_2" not in self.complained:
 *         if not self.jphi_2_branch and "jphi_2":
 *             warnings.warn( "EMTree: Expected branch jphi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jphi_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__190, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2416
 *         self.jphi_2_branch = the_tree.GetBranch("jphi_2")
 *         #if not self.jphi_2_branch and "jphi_2" not in self.complained:
 *         if not self.jphi_2_branch and "jphi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch jphi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("jphi_2")
 */
    goto __pyx_L567;
  }

  /* "EMTree.pyx":2420
 *             #self.complained.add("jphi_2")
 *         else:
 *             self.jphi_2_branch.SetAddress(<void*>&self.jphi_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bpt_1"
 */
  /*else*/ {
    __pyx_v_self->jphi_2_branch->SetAddress(((void *)(&__pyx_v_self->jphi_2_value)));
  }
  __pyx_L567:;

  /* "EMTree.pyx":2423
 * 
 *         #print "making bpt_1"
 *         self.bpt_1_branch = the_tree.GetBranch("bpt_1")             # <<<<<<<<<<<<<<
 *         #if not self.bpt_1_branch and "bpt_1" not in self.complained:
 *         if not self.bpt_1_branch and "bpt_1":
 */
  __pyx_v_self->bpt_1_branch = __pyx_v_the_tree->GetBranch(((char *)"bpt_1"));

  /* "EMTree.pyx":2425
 *         self.bpt_1_branch = the_tree.GetBranch("bpt_1")
 *         #if not self.bpt_1_branch and "bpt_1" not in self.complained:
 *         if not self.bpt_1_branch and "bpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bpt_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bpt_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L571_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L571_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2426
 *         #if not self.bpt_1_branch and "bpt_1" not in self.complained:
 *         if not self.bpt_1_branch and "bpt_1":
 *             warnings.warn( "EMTree: Expected branch bpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bpt_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__191, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2425
 *         self.bpt_1_branch = the_tree.GetBranch("bpt_1")
 *         #if not self.bpt_1_branch and "bpt_1" not in self.complained:
 *         if not self.bpt_1_branch and "bpt_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bpt_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bpt_1")
 */
    goto __pyx_L570;
  }

  /* "EMTree.pyx":2429
 *             #self.complained.add("bpt_1")
 *         else:
 *             self.bpt_1_branch.SetAddress(<void*>&self.bpt_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bflavor_1"
 */
  /*else*/ {
    __pyx_v_self->bpt_1_branch->SetAddress(((void *)(&__pyx_v_self->bpt_1_value)));
  }
  __pyx_L570:;

  /* "EMTree.pyx":2432
 * 
 *         #print "making bflavor_1"
 *         self.bflavor_1_branch = the_tree.GetBranch("bflavor_1")             # <<<<<<<<<<<<<<
 *         #if not self.bflavor_1_branch and "bflavor_1" not in self.complained:
 *         if not self.bflavor_1_branch and "bflavor_1":
 */
  __pyx_v_self->bflavor_1_branch = __pyx_v_the_tree->GetBranch(((char *)"bflavor_1"));

  /* "EMTree.pyx":2434
 *         self.bflavor_1_branch = the_tree.GetBranch("bflavor_1")
 *         #if not self.bflavor_1_branch and "bflavor_1" not in self.complained:
 *         if not self.bflavor_1_branch and "bflavor_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bflavor_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bflavor_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bflavor_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L574_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L574_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2435
 *         #if not self.bflavor_1_branch and "bflavor_1" not in self.complained:
 *         if not self.bflavor_1_branch and "bflavor_1":
 *             warnings.warn( "EMTree: Expected branch bflavor_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bflavor_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__192, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2434
 *         self.bflavor_1_branch = the_tree.GetBranch("bflavor_1")
 *         #if not self.bflavor_1_branch and "bflavor_1" not in self.complained:
 *         if not self.bflavor_1_branch and "bflavor_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bflavor_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bflavor_1")
 */
    goto __pyx_L573;
  }

  /* "EMTree.pyx":2438
 *             #self.complained.add("bflavor_1")
 *         else:
 *             self.bflavor_1_branch.SetAddress(<void*>&self.bflavor_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making beta_1"
 */
  /*else*/ {
    __pyx_v_self->bflavor_1_branch->SetAddress(((void *)(&__pyx_v_self->bflavor_1_value)));
  }
  __pyx_L573:;

  /* "EMTree.pyx":2441
 * 
 *         #print "making beta_1"
 *         self.beta_1_branch = the_tree.GetBranch("beta_1")             # <<<<<<<<<<<<<<
 *         #if not self.beta_1_branch and "beta_1" not in self.complained:
 *         if not self.beta_1_branch and "beta_1":
 */
  __pyx_v_self->beta_1_branch = __pyx_v_the_tree->GetBranch(((char *)"beta_1"));

  /* "EMTree.pyx":2443
 *         self.beta_1_branch = the_tree.GetBranch("beta_1")
 *         #if not self.beta_1_branch and "beta_1" not in self.complained:
 *         if not self.beta_1_branch and "beta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch beta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("beta_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->beta_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L577_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L577_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2444
 *         #if not self.beta_1_branch and "beta_1" not in self.complained:
 *         if not self.beta_1_branch and "beta_1":
 *             warnings.warn( "EMTree: Expected branch beta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("beta_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__193, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2443
 *         self.beta_1_branch = the_tree.GetBranch("beta_1")
 *         #if not self.beta_1_branch and "beta_1" not in self.complained:
 *         if not self.beta_1_branch and "beta_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch beta_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("beta_1")
 */
    goto __pyx_L576;
  }

  /* "EMTree.pyx":2447
 *             #self.complained.add("beta_1")
 *         else:
 *             self.beta_1_branch.SetAddress(<void*>&self.beta_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bphi_1"
 */
  /*else*/ {
    __pyx_v_self->beta_1_branch->SetAddress(((void *)(&__pyx_v_self->beta_1_value)));
  }
  __pyx_L576:;

  /* "EMTree.pyx":2450
 * 
 *         #print "making bphi_1"
 *         self.bphi_1_branch = the_tree.GetBranch("bphi_1")             # <<<<<<<<<<<<<<
 *         #if not self.bphi_1_branch and "bphi_1" not in self.complained:
 *         if not self.bphi_1_branch and "bphi_1":
 */
  __pyx_v_self->bphi_1_branch = __pyx_v_the_tree->GetBranch(((char *)"bphi_1"));

  /* "EMTree.pyx":2452
 *         self.bphi_1_branch = the_tree.GetBranch("bphi_1")
 *         #if not self.bphi_1_branch and "bphi_1" not in self.complained:
 *         if not self.bphi_1_branch and "bphi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bphi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bphi_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bphi_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L580_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L580_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2453
 *         #if not self.bphi_1_branch and "bphi_1" not in self.complained:
 *         if not self.bphi_1_branch and "bphi_1":
 *             warnings.warn( "EMTree: Expected branch bphi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bphi_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__194, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2452
 *         self.bphi_1_branch = the_tree.GetBranch("bphi_1")
 *         #if not self.bphi_1_branch and "bphi_1" not in self.complained:
 *         if not self.bphi_1_branch and "bphi_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bphi_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bphi_1")
 */
    goto __pyx_L579;
  }

  /* "EMTree.pyx":2456
 *             #self.complained.add("bphi_1")
 *         else:
 *             self.bphi_1_branch.SetAddress(<void*>&self.bphi_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making passMu23E12"
 */
  /*else*/ {
    __pyx_v_self->bphi_1_branch->SetAddress(((void *)(&__pyx_v_self->bphi_1_value)));
  }
  __pyx_L579:;

  /* "EMTree.pyx":2459
 * 
 *         #print "making passMu23E12"
 *         self.passMu23E12_branch = the_tree.GetBranch("passMu23E12")             # <<<<<<<<<<<<<<
 *         #if not self.passMu23E12_branch and "passMu23E12" not in self.complained:
 *         if not self.passMu23E12_branch and "passMu23E12":
 */
  __pyx_v_self->passMu23E12_branch = __pyx_v_the_tree->GetBranch(((char *)"passMu23E12"));

  /* "EMTree.pyx":2461
 *         self.passMu23E12_branch = the_tree.GetBranch("passMu23E12")
 *         #if not self.passMu23E12_branch and "passMu23E12" not in self.complained:
 *         if not self.passMu23E12_branch and "passMu23E12":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch passMu23E12 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("passMu23E12")
 */
  __pyx_t_2 = ((!(__pyx_v_self->passMu23E12_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L583_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L583_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2462
 *         #if not self.passMu23E12_branch and "passMu23E12" not in self.complained:
 *         if not self.passMu23E12_branch and "passMu23E12":
 *             warnings.warn( "EMTree: Expected branch passMu23E12 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("passMu23E12")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__195, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2461
 *         self.passMu23E12_branch = the_tree.GetBranch("passMu23E12")
 *         #if not self.passMu23E12_branch and "passMu23E12" not in self.complained:
 *         if not self.passMu23E12_branch and "passMu23E12":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch passMu23E12 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("passMu23E12")
 */
    goto __pyx_L582;
  }

  /* "EMTree.pyx":2465
 *             #self.complained.add("passMu23E12")
 *         else:
 *             self.passMu23E12_branch.SetAddress(<void*>&self.passMu23E12_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making passMu8E23"
 */
  /*else*/ {
    __pyx_v_self->passMu23E12_branch->SetAddress(((void *)(&__pyx_v_self->passMu23E12_value)));
  }
  __pyx_L582:;

  /* "EMTree.pyx":2468
 * 
 *         #print "making passMu8E23"
 *         self.passMu8E23_branch = the_tree.GetBranch("passMu8E23")             # <<<<<<<<<<<<<<
 *         #if not self.passMu8E23_branch and "passMu8E23" not in self.complained:
 *         if not self.passMu8E23_branch and "passMu8E23":
 */
  __pyx_v_self->passMu8E23_branch = __pyx_v_the_tree->GetBranch(((char *)"passMu8E23"));

  /* "EMTree.pyx":2470
 *         self.passMu8E23_branch = the_tree.GetBranch("passMu8E23")
 *         #if not self.passMu8E23_branch and "passMu8E23" not in self.complained:
 *         if not self.passMu8E23_branch and "passMu8E23":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch passMu8E23 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("passMu8E23")
 */
  __pyx_t_2 = ((!(__pyx_v_self->passMu8E23_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L586_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L586_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2471
 *         #if not self.passMu8E23_branch and "passMu8E23" not in self.complained:
 *         if not self.passMu8E23_branch and "passMu8E23":
 *             warnings.warn( "EMTree: Expected branch passMu8E23 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("passMu8E23")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__196, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2470
 *         self.passMu8E23_branch = the_tree.GetBranch("passMu8E23")
 *         #if not self.passMu8E23_branch and "passMu8E23" not in self.complained:
 *         if not self.passMu8E23_branch and "passMu8E23":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch passMu8E23 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("passMu8E23")
 */
    goto __pyx_L585;
  }

  /* "EMTree.pyx":2474
 *             #self.complained.add("passMu8E23")
 *         else:
 *             self.passMu8E23_branch.SetAddress(<void*>&self.passMu8E23_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making matchMu23E12_1"
 */
  /*else*/ {
    __pyx_v_self->passMu8E23_branch->SetAddress(((void *)(&__pyx_v_self->passMu8E23_value)));
  }
  __pyx_L585:;

  /* "EMTree.pyx":2477
 * 
 *         #print "making matchMu23E12_1"
 *         self.matchMu23E12_1_branch = the_tree.GetBranch("matchMu23E12_1")             # <<<<<<<<<<<<<<
 *         #if not self.matchMu23E12_1_branch and "matchMu23E12_1" not in self.complained:
 *         if not self.matchMu23E12_1_branch and "matchMu23E12_1":
 */
  __pyx_v_self->matchMu23E12_1_branch = __pyx_v_the_tree->GetBranch(((char *)"matchMu23E12_1"));

  /* "EMTree.pyx":2479
 *         self.matchMu23E12_1_branch = the_tree.GetBranch("matchMu23E12_1")
 *         #if not self.matchMu23E12_1_branch and "matchMu23E12_1" not in self.complained:
 *         if not self.matchMu23E12_1_branch and "matchMu23E12_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu23E12_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->matchMu23E12_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L589_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L589_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2480
 *         #if not self.matchMu23E12_1_branch and "matchMu23E12_1" not in self.complained:
 *         if not self.matchMu23E12_1_branch and "matchMu23E12_1":
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu23E12_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__197, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2479
 *         self.matchMu23E12_1_branch = the_tree.GetBranch("matchMu23E12_1")
 *         #if not self.matchMu23E12_1_branch and "matchMu23E12_1" not in self.complained:
 *         if not self.matchMu23E12_1_branch and "matchMu23E12_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu23E12_1")
 */
    goto __pyx_L588;
  }

  /* "EMTree.pyx":2483
 *             #self.complained.add("matchMu23E12_1")
 *         else:
 *             self.matchMu23E12_1_branch.SetAddress(<void*>&self.matchMu23E12_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making matchMu8E23_1"
 */
  /*else*/ {
    __pyx_v_self->matchMu23E12_1_branch->SetAddress(((void *)(&__pyx_v_self->matchMu23E12_1_value)));
  }
  __pyx_L588:;

  /* "EMTree.pyx":2486
 * 
 *         #print "making matchMu8E23_1"
 *         self.matchMu8E23_1_branch = the_tree.GetBranch("matchMu8E23_1")             # <<<<<<<<<<<<<<
 *         #if not self.matchMu8E23_1_branch and "matchMu8E23_1" not in self.complained:
 *         if not self.matchMu8E23_1_branch and "matchMu8E23_1":
 */
  __pyx_v_self->matchMu8E23_1_branch = __pyx_v_the_tree->GetBranch(((char *)"matchMu8E23_1"));

  /* "EMTree.pyx":2488
 *         self.matchMu8E23_1_branch = the_tree.GetBranch("matchMu8E23_1")
 *         #if not self.matchMu8E23_1_branch and "matchMu8E23_1" not in self.complained:
 *         if not self.matchMu8E23_1_branch and "matchMu8E23_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu8E23_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->matchMu8E23_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L592_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L592_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2489
 *         #if not self.matchMu8E23_1_branch and "matchMu8E23_1" not in self.complained:
 *         if not self.matchMu8E23_1_branch and "matchMu8E23_1":
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu8E23_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__198, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2488
 *         self.matchMu8E23_1_branch = the_tree.GetBranch("matchMu8E23_1")
 *         #if not self.matchMu8E23_1_branch and "matchMu8E23_1" not in self.complained:
 *         if not self.matchMu8E23_1_branch and "matchMu8E23_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu8E23_1")
 */
    goto __pyx_L591;
  }

  /* "EMTree.pyx":2492
 *             #self.complained.add("matchMu8E23_1")
 *         else:
 *             self.matchMu8E23_1_branch.SetAddress(<void*>&self.matchMu8E23_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making filterMu23E12_1"
 */
  /*else*/ {
    __pyx_v_self->matchMu8E23_1_branch->SetAddress(((void *)(&__pyx_v_self->matchMu8E23_1_value)));
  }
  __pyx_L591:;

  /* "EMTree.pyx":2495
 * 
 *         #print "making filterMu23E12_1"
 *         self.filterMu23E12_1_branch = the_tree.GetBranch("filterMu23E12_1")             # <<<<<<<<<<<<<<
 *         #if not self.filterMu23E12_1_branch and "filterMu23E12_1" not in self.complained:
 *         if not self.filterMu23E12_1_branch and "filterMu23E12_1":
 */
  __pyx_v_self->filterMu23E12_1_branch = __pyx_v_the_tree->GetBranch(((char *)"filterMu23E12_1"));

  /* "EMTree.pyx":2497
 *         self.filterMu23E12_1_branch = the_tree.GetBranch("filterMu23E12_1")
 *         #if not self.filterMu23E12_1_branch and "filterMu23E12_1" not in self.complained:
 *         if not self.filterMu23E12_1_branch and "filterMu23E12_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu23E12_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->filterMu23E12_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L595_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L595_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2498
 *         #if not self.filterMu23E12_1_branch and "filterMu23E12_1" not in self.complained:
 *         if not self.filterMu23E12_1_branch and "filterMu23E12_1":
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu23E12_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__199, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2497
 *         self.filterMu23E12_1_branch = the_tree.GetBranch("filterMu23E12_1")
 *         #if not self.filterMu23E12_1_branch and "filterMu23E12_1" not in self.complained:
 *         if not self.filterMu23E12_1_branch and "filterMu23E12_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu23E12_1")
 */
    goto __pyx_L594;
  }

  /* "EMTree.pyx":2501
 *             #self.complained.add("filterMu23E12_1")
 *         else:
 *             self.filterMu23E12_1_branch.SetAddress(<void*>&self.filterMu23E12_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making filterMu8E23_1"
 */
  /*else*/ {
    __pyx_v_self->filterMu23E12_1_branch->SetAddress(((void *)(&__pyx_v_self->filterMu23E12_1_value)));
  }
  __pyx_L594:;

  /* "EMTree.pyx":2504
 * 
 *         #print "making filterMu8E23_1"
 *         self.filterMu8E23_1_branch = the_tree.GetBranch("filterMu8E23_1")             # <<<<<<<<<<<<<<
 *         #if not self.filterMu8E23_1_branch and "filterMu8E23_1" not in self.complained:
 *         if not self.filterMu8E23_1_branch and "filterMu8E23_1":
 */
  __pyx_v_self->filterMu8E23_1_branch = __pyx_v_the_tree->GetBranch(((char *)"filterMu8E23_1"));

  /* "EMTree.pyx":2506
 *         self.filterMu8E23_1_branch = the_tree.GetBranch("filterMu8E23_1")
 *         #if not self.filterMu8E23_1_branch and "filterMu8E23_1" not in self.complained:
 *         if not self.filterMu8E23_1_branch and "filterMu8E23_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu8E23_1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->filterMu8E23_1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L598_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L598_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2507
 *         #if not self.filterMu8E23_1_branch and "filterMu8E23_1" not in self.complained:
 *         if not self.filterMu8E23_1_branch and "filterMu8E23_1":
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu8E23_1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__200, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2506
 *         self.filterMu8E23_1_branch = the_tree.GetBranch("filterMu8E23_1")
 *         #if not self.filterMu8E23_1_branch and "filterMu8E23_1" not in self.complained:
 *         if not self.filterMu8E23_1_branch and "filterMu8E23_1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu8E23_1")
 */
    goto __pyx_L597;
  }

  /* "EMTree.pyx":2510
 *             #self.complained.add("filterMu8E23_1")
 *         else:
 *             self.filterMu8E23_1_branch.SetAddress(<void*>&self.filterMu8E23_1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making matchMu23E12_2"
 */
  /*else*/ {
    __pyx_v_self->filterMu8E23_1_branch->SetAddress(((void *)(&__pyx_v_self->filterMu8E23_1_value)));
  }
  __pyx_L597:;

  /* "EMTree.pyx":2513
 * 
 *         #print "making matchMu23E12_2"
 *         self.matchMu23E12_2_branch = the_tree.GetBranch("matchMu23E12_2")             # <<<<<<<<<<<<<<
 *         #if not self.matchMu23E12_2_branch and "matchMu23E12_2" not in self.complained:
 *         if not self.matchMu23E12_2_branch and "matchMu23E12_2":
 */
  __pyx_v_self->matchMu23E12_2_branch = __pyx_v_the_tree->GetBranch(((char *)"matchMu23E12_2"));

  /* "EMTree.pyx":2515
 *         self.matchMu23E12_2_branch = the_tree.GetBranch("matchMu23E12_2")
 *         #if not self.matchMu23E12_2_branch and "matchMu23E12_2" not in self.complained:
 *         if not self.matchMu23E12_2_branch and "matchMu23E12_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu23E12_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->matchMu23E12_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L601_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L601_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2516
 *         #if not self.matchMu23E12_2_branch and "matchMu23E12_2" not in self.complained:
 *         if not self.matchMu23E12_2_branch and "matchMu23E12_2":
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu23E12_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__201, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2515
 *         self.matchMu23E12_2_branch = the_tree.GetBranch("matchMu23E12_2")
 *         #if not self.matchMu23E12_2_branch and "matchMu23E12_2" not in self.complained:
 *         if not self.matchMu23E12_2_branch and "matchMu23E12_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu23E12_2")
 */
    goto __pyx_L600;
  }

  /* "EMTree.pyx":2519
 *             #self.complained.add("matchMu23E12_2")
 *         else:
 *             self.matchMu23E12_2_branch.SetAddress(<void*>&self.matchMu23E12_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making matchMu8E23_2"
 */
  /*else*/ {
    __pyx_v_self->matchMu23E12_2_branch->SetAddress(((void *)(&__pyx_v_self->matchMu23E12_2_value)));
  }
  __pyx_L600:;

  /* "EMTree.pyx":2522
 * 
 *         #print "making matchMu8E23_2"
 *         self.matchMu8E23_2_branch = the_tree.GetBranch("matchMu8E23_2")             # <<<<<<<<<<<<<<
 *         #if not self.matchMu8E23_2_branch and "matchMu8E23_2" not in self.complained:
 *         if not self.matchMu8E23_2_branch and "matchMu8E23_2":
 */
  __pyx_v_self->matchMu8E23_2_branch = __pyx_v_the_tree->GetBranch(((char *)"matchMu8E23_2"));

  /* "EMTree.pyx":2524
 *         self.matchMu8E23_2_branch = the_tree.GetBranch("matchMu8E23_2")
 *         #if not self.matchMu8E23_2_branch and "matchMu8E23_2" not in self.complained:
 *         if not self.matchMu8E23_2_branch and "matchMu8E23_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu8E23_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->matchMu8E23_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L604_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L604_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2525
 *         #if not self.matchMu8E23_2_branch and "matchMu8E23_2" not in self.complained:
 *         if not self.matchMu8E23_2_branch and "matchMu8E23_2":
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu8E23_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__202, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2524
 *         self.matchMu8E23_2_branch = the_tree.GetBranch("matchMu8E23_2")
 *         #if not self.matchMu8E23_2_branch and "matchMu8E23_2" not in self.complained:
 *         if not self.matchMu8E23_2_branch and "matchMu8E23_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("matchMu8E23_2")
 */
    goto __pyx_L603;
  }

  /* "EMTree.pyx":2528
 *             #self.complained.add("matchMu8E23_2")
 *         else:
 *             self.matchMu8E23_2_branch.SetAddress(<void*>&self.matchMu8E23_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making filterMu23E12_2"
 */
  /*else*/ {
    __pyx_v_self->matchMu8E23_2_branch->SetAddress(((void *)(&__pyx_v_self->matchMu8E23_2_value)));
  }
  __pyx_L603:;

  /* "EMTree.pyx":2531
 * 
 *         #print "making filterMu23E12_2"
 *         self.filterMu23E12_2_branch = the_tree.GetBranch("filterMu23E12_2")             # <<<<<<<<<<<<<<
 *         #if not self.filterMu23E12_2_branch and "filterMu23E12_2" not in self.complained:
 *         if not self.filterMu23E12_2_branch and "filterMu23E12_2":
 */
  __pyx_v_self->filterMu23E12_2_branch = __pyx_v_the_tree->GetBranch(((char *)"filterMu23E12_2"));

  /* "EMTree.pyx":2533
 *         self.filterMu23E12_2_branch = the_tree.GetBranch("filterMu23E12_2")
 *         #if not self.filterMu23E12_2_branch and "filterMu23E12_2" not in self.complained:
 *         if not self.filterMu23E12_2_branch and "filterMu23E12_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu23E12_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->filterMu23E12_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L607_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L607_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2534
 *         #if not self.filterMu23E12_2_branch and "filterMu23E12_2" not in self.complained:
 *         if not self.filterMu23E12_2_branch and "filterMu23E12_2":
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu23E12_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__203, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2533
 *         self.filterMu23E12_2_branch = the_tree.GetBranch("filterMu23E12_2")
 *         #if not self.filterMu23E12_2_branch and "filterMu23E12_2" not in self.complained:
 *         if not self.filterMu23E12_2_branch and "filterMu23E12_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu23E12_2")
 */
    goto __pyx_L606;
  }

  /* "EMTree.pyx":2537
 *             #self.complained.add("filterMu23E12_2")
 *         else:
 *             self.filterMu23E12_2_branch.SetAddress(<void*>&self.filterMu23E12_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making filterMu8E23_2"
 */
  /*else*/ {
    __pyx_v_self->filterMu23E12_2_branch->SetAddress(((void *)(&__pyx_v_self->filterMu23E12_2_value)));
  }
  __pyx_L606:;

  /* "EMTree.pyx":2540
 * 
 *         #print "making filterMu8E23_2"
 *         self.filterMu8E23_2_branch = the_tree.GetBranch("filterMu8E23_2")             # <<<<<<<<<<<<<<
 *         #if not self.filterMu8E23_2_branch and "filterMu8E23_2" not in self.complained:
 *         if not self.filterMu8E23_2_branch and "filterMu8E23_2":
 */
  __pyx_v_self->filterMu8E23_2_branch = __pyx_v_the_tree->GetBranch(((char *)"filterMu8E23_2"));

  /* "EMTree.pyx":2542
 *         self.filterMu8E23_2_branch = the_tree.GetBranch("filterMu8E23_2")
 *         #if not self.filterMu8E23_2_branch and "filterMu8E23_2" not in self.complained:
 *         if not self.filterMu8E23_2_branch and "filterMu8E23_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu8E23_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->filterMu8E23_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L610_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L610_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2543
 *         #if not self.filterMu8E23_2_branch and "filterMu8E23_2" not in self.complained:
 *         if not self.filterMu8E23_2_branch and "filterMu8E23_2":
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu8E23_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__204, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2542
 *         self.filterMu8E23_2_branch = the_tree.GetBranch("filterMu8E23_2")
 *         #if not self.filterMu8E23_2_branch and "filterMu8E23_2" not in self.complained:
 *         if not self.filterMu8E23_2_branch and "filterMu8E23_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("filterMu8E23_2")
 */
    goto __pyx_L609;
  }

  /* "EMTree.pyx":2546
 *             #self.complained.add("filterMu8E23_2")
 *         else:
 *             self.filterMu8E23_2_branch.SetAddress(<void*>&self.filterMu8E23_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bpt_2"
 */
  /*else*/ {
    __pyx_v_self->filterMu8E23_2_branch->SetAddress(((void *)(&__pyx_v_self->filterMu8E23_2_value)));
  }
  __pyx_L609:;

  /* "EMTree.pyx":2549
 * 
 *         #print "making bpt_2"
 *         self.bpt_2_branch = the_tree.GetBranch("bpt_2")             # <<<<<<<<<<<<<<
 *         #if not self.bpt_2_branch and "bpt_2" not in self.complained:
 *         if not self.bpt_2_branch and "bpt_2":
 */
  __pyx_v_self->bpt_2_branch = __pyx_v_the_tree->GetBranch(((char *)"bpt_2"));

  /* "EMTree.pyx":2551
 *         self.bpt_2_branch = the_tree.GetBranch("bpt_2")
 *         #if not self.bpt_2_branch and "bpt_2" not in self.complained:
 *         if not self.bpt_2_branch and "bpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bpt_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bpt_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L613_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L613_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2552
 *         #if not self.bpt_2_branch and "bpt_2" not in self.complained:
 *         if not self.bpt_2_branch and "bpt_2":
 *             warnings.warn( "EMTree: Expected branch bpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bpt_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__205, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2551
 *         self.bpt_2_branch = the_tree.GetBranch("bpt_2")
 *         #if not self.bpt_2_branch and "bpt_2" not in self.complained:
 *         if not self.bpt_2_branch and "bpt_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bpt_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bpt_2")
 */
    goto __pyx_L612;
  }

  /* "EMTree.pyx":2555
 *             #self.complained.add("bpt_2")
 *         else:
 *             self.bpt_2_branch.SetAddress(<void*>&self.bpt_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bflavor_2"
 */
  /*else*/ {
    __pyx_v_self->bpt_2_branch->SetAddress(((void *)(&__pyx_v_self->bpt_2_value)));
  }
  __pyx_L612:;

  /* "EMTree.pyx":2558
 * 
 *         #print "making bflavor_2"
 *         self.bflavor_2_branch = the_tree.GetBranch("bflavor_2")             # <<<<<<<<<<<<<<
 *         #if not self.bflavor_2_branch and "bflavor_2" not in self.complained:
 *         if not self.bflavor_2_branch and "bflavor_2":
 */
  __pyx_v_self->bflavor_2_branch = __pyx_v_the_tree->GetBranch(((char *)"bflavor_2"));

  /* "EMTree.pyx":2560
 *         self.bflavor_2_branch = the_tree.GetBranch("bflavor_2")
 *         #if not self.bflavor_2_branch and "bflavor_2" not in self.complained:
 *         if not self.bflavor_2_branch and "bflavor_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bflavor_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bflavor_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bflavor_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L616_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L616_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2561
 *         #if not self.bflavor_2_branch and "bflavor_2" not in self.complained:
 *         if not self.bflavor_2_branch and "bflavor_2":
 *             warnings.warn( "EMTree: Expected branch bflavor_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bflavor_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__206, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2560
 *         self.bflavor_2_branch = the_tree.GetBranch("bflavor_2")
 *         #if not self.bflavor_2_branch and "bflavor_2" not in self.complained:
 *         if not self.bflavor_2_branch and "bflavor_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bflavor_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bflavor_2")
 */
    goto __pyx_L615;
  }

  /* "EMTree.pyx":2564
 *             #self.complained.add("bflavor_2")
 *         else:
 *             self.bflavor_2_branch.SetAddress(<void*>&self.bflavor_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making beta_2"
 */
  /*else*/ {
    __pyx_v_self->bflavor_2_branch->SetAddress(((void *)(&__pyx_v_self->bflavor_2_value)));
  }
  __pyx_L615:;

  /* "EMTree.pyx":2567
 * 
 *         #print "making beta_2"
 *         self.beta_2_branch = the_tree.GetBranch("beta_2")             # <<<<<<<<<<<<<<
 *         #if not self.beta_2_branch and "beta_2" not in self.complained:
 *         if not self.beta_2_branch and "beta_2":
 */
  __pyx_v_self->beta_2_branch = __pyx_v_the_tree->GetBranch(((char *)"beta_2"));

  /* "EMTree.pyx":2569
 *         self.beta_2_branch = the_tree.GetBranch("beta_2")
 *         #if not self.beta_2_branch and "beta_2" not in self.complained:
 *         if not self.beta_2_branch and "beta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch beta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("beta_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->beta_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L619_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L619_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2570
 *         #if not self.beta_2_branch and "beta_2" not in self.complained:
 *         if not self.beta_2_branch and "beta_2":
 *             warnings.warn( "EMTree: Expected branch beta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("beta_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__207, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2569
 *         self.beta_2_branch = the_tree.GetBranch("beta_2")
 *         #if not self.beta_2_branch and "beta_2" not in self.complained:
 *         if not self.beta_2_branch and "beta_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch beta_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("beta_2")
 */
    goto __pyx_L618;
  }

  /* "EMTree.pyx":2573
 *             #self.complained.add("beta_2")
 *         else:
 *             self.beta_2_branch.SetAddress(<void*>&self.beta_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making bphi_2"
 */
  /*else*/ {
    __pyx_v_self->beta_2_branch->SetAddress(((void *)(&__pyx_v_self->beta_2_value)));
  }
  __pyx_L618:;

  /* "EMTree.pyx":2576
 * 
 *         #print "making bphi_2"
 *         self.bphi_2_branch = the_tree.GetBranch("bphi_2")             # <<<<<<<<<<<<<<
 *         #if not self.bphi_2_branch and "bphi_2" not in self.complained:
 *         if not self.bphi_2_branch and "bphi_2":
 */
  __pyx_v_self->bphi_2_branch = __pyx_v_the_tree->GetBranch(((char *)"bphi_2"));

  /* "EMTree.pyx":2578
 *         self.bphi_2_branch = the_tree.GetBranch("bphi_2")
 *         #if not self.bphi_2_branch and "bphi_2" not in self.complained:
 *         if not self.bphi_2_branch and "bphi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bphi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bphi_2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->bphi_2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L622_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L622_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2579
 *         #if not self.bphi_2_branch and "bphi_2" not in self.complained:
 *         if not self.bphi_2_branch and "bphi_2":
 *             warnings.warn( "EMTree: Expected branch bphi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bphi_2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__208, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2578
 *         self.bphi_2_branch = the_tree.GetBranch("bphi_2")
 *         #if not self.bphi_2_branch and "bphi_2" not in self.complained:
 *         if not self.bphi_2_branch and "bphi_2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch bphi_2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("bphi_2")
 */
    goto __pyx_L621;
  }

  /* "EMTree.pyx":2582
 *             #self.complained.add("bphi_2")
 *         else:
 *             self.bphi_2_branch.SetAddress(<void*>&self.bphi_2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_top1"
 */
  /*else*/ {
    __pyx_v_self->bphi_2_branch->SetAddress(((void *)(&__pyx_v_self->bphi_2_value)));
  }
  __pyx_L621:;

  /* "EMTree.pyx":2585
 * 
 *         #print "making pt_top1"
 *         self.pt_top1_branch = the_tree.GetBranch("pt_top1")             # <<<<<<<<<<<<<<
 *         #if not self.pt_top1_branch and "pt_top1" not in self.complained:
 *         if not self.pt_top1_branch and "pt_top1":
 */
  __pyx_v_self->pt_top1_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_top1"));

  /* "EMTree.pyx":2587
 *         self.pt_top1_branch = the_tree.GetBranch("pt_top1")
 *         #if not self.pt_top1_branch and "pt_top1" not in self.complained:
 *         if not self.pt_top1_branch and "pt_top1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_top1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_top1")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_top1_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L625_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L625_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2588
 *         #if not self.pt_top1_branch and "pt_top1" not in self.complained:
 *         if not self.pt_top1_branch and "pt_top1":
 *             warnings.warn( "EMTree: Expected branch pt_top1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_top1")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__209, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2588, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2587
 *         self.pt_top1_branch = the_tree.GetBranch("pt_top1")
 *         #if not self.pt_top1_branch and "pt_top1" not in self.complained:
 *         if not self.pt_top1_branch and "pt_top1":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_top1 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_top1")
 */
    goto __pyx_L624;
  }

  /* "EMTree.pyx":2591
 *             #self.complained.add("pt_top1")
 *         else:
 *             self.pt_top1_branch.SetAddress(<void*>&self.pt_top1_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making pt_top2"
 */
  /*else*/ {
    __pyx_v_self->pt_top1_branch->SetAddress(((void *)(&__pyx_v_self->pt_top1_value)));
  }
  __pyx_L624:;

  /* "EMTree.pyx":2594
 * 
 *         #print "making pt_top2"
 *         self.pt_top2_branch = the_tree.GetBranch("pt_top2")             # <<<<<<<<<<<<<<
 *         #if not self.pt_top2_branch and "pt_top2" not in self.complained:
 *         if not self.pt_top2_branch and "pt_top2":
 */
  __pyx_v_self->pt_top2_branch = __pyx_v_the_tree->GetBranch(((char *)"pt_top2"));

  /* "EMTree.pyx":2596
 *         self.pt_top2_branch = the_tree.GetBranch("pt_top2")
 *         #if not self.pt_top2_branch and "pt_top2" not in self.complained:
 *         if not self.pt_top2_branch and "pt_top2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_top2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_top2")
 */
  __pyx_t_2 = ((!(__pyx_v_self->pt_top2_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L628_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L628_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2597
 *         #if not self.pt_top2_branch and "pt_top2" not in self.complained:
 *         if not self.pt_top2_branch and "pt_top2":
 *             warnings.warn( "EMTree: Expected branch pt_top2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_top2")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__210, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2597, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2596
 *         self.pt_top2_branch = the_tree.GetBranch("pt_top2")
 *         #if not self.pt_top2_branch and "pt_top2" not in self.complained:
 *         if not self.pt_top2_branch and "pt_top2":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch pt_top2 does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("pt_top2")
 */
    goto __pyx_L627;
  }

  /* "EMTree.pyx":2600
 *             #self.complained.add("pt_top2")
 *         else:
 *             self.pt_top2_branch.SetAddress(<void*>&self.pt_top2_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making genweight"
 */
  /*else*/ {
    __pyx_v_self->pt_top2_branch->SetAddress(((void *)(&__pyx_v_self->pt_top2_value)));
  }
  __pyx_L627:;

  /* "EMTree.pyx":2603
 * 
 *         #print "making genweight"
 *         self.genweight_branch = the_tree.GetBranch("genweight")             # <<<<<<<<<<<<<<
 *         #if not self.genweight_branch and "genweight" not in self.complained:
 *         if not self.genweight_branch and "genweight":
 */
  __pyx_v_self->genweight_branch = __pyx_v_the_tree->GetBranch(((char *)"genweight"));

  /* "EMTree.pyx":2605
 *         self.genweight_branch = the_tree.GetBranch("genweight")
 *         #if not self.genweight_branch and "genweight" not in self.complained:
 *         if not self.genweight_branch and "genweight":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genweight does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genweight")
 */
  __pyx_t_2 = ((!(__pyx_v_self->genweight_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L631_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L631_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2606
 *         #if not self.genweight_branch and "genweight" not in self.complained:
 *         if not self.genweight_branch and "genweight":
 *             warnings.warn( "EMTree: Expected branch genweight does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genweight")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__211, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2605
 *         self.genweight_branch = the_tree.GetBranch("genweight")
 *         #if not self.genweight_branch and "genweight" not in self.complained:
 *         if not self.genweight_branch and "genweight":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch genweight does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("genweight")
 */
    goto __pyx_L630;
  }

  /* "EMTree.pyx":2609
 *             #self.complained.add("genweight")
 *         else:
 *             self.genweight_branch.SetAddress(<void*>&self.genweight_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making gen_Higgs_pt"
 */
  /*else*/ {
    __pyx_v_self->genweight_branch->SetAddress(((void *)(&__pyx_v_self->genweight_value)));
  }
  __pyx_L630:;

  /* "EMTree.pyx":2612
 * 
 *         #print "making gen_Higgs_pt"
 *         self.gen_Higgs_pt_branch = the_tree.GetBranch("gen_Higgs_pt")             # <<<<<<<<<<<<<<
 *         #if not self.gen_Higgs_pt_branch and "gen_Higgs_pt" not in self.complained:
 *         if not self.gen_Higgs_pt_branch and "gen_Higgs_pt":
 */
  __pyx_v_self->gen_Higgs_pt_branch = __pyx_v_the_tree->GetBranch(((char *)"gen_Higgs_pt"));

  /* "EMTree.pyx":2614
 *         self.gen_Higgs_pt_branch = the_tree.GetBranch("gen_Higgs_pt")
 *         #if not self.gen_Higgs_pt_branch and "gen_Higgs_pt" not in self.complained:
 *         if not self.gen_Higgs_pt_branch and "gen_Higgs_pt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_pt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_Higgs_pt")
 */
  __pyx_t_2 = ((!(__pyx_v_self->gen_Higgs_pt_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L634_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L634_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2615
 *         #if not self.gen_Higgs_pt_branch and "gen_Higgs_pt" not in self.complained:
 *         if not self.gen_Higgs_pt_branch and "gen_Higgs_pt":
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_pt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_Higgs_pt")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__212, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2614
 *         self.gen_Higgs_pt_branch = the_tree.GetBranch("gen_Higgs_pt")
 *         #if not self.gen_Higgs_pt_branch and "gen_Higgs_pt" not in self.complained:
 *         if not self.gen_Higgs_pt_branch and "gen_Higgs_pt":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_pt does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_Higgs_pt")
 */
    goto __pyx_L633;
  }

  /* "EMTree.pyx":2618
 *             #self.complained.add("gen_Higgs_pt")
 *         else:
 *             self.gen_Higgs_pt_branch.SetAddress(<void*>&self.gen_Higgs_pt_value)             # <<<<<<<<<<<<<<
 * 
 *         #print "making gen_Higgs_mass"
 */
  /*else*/ {
    __pyx_v_self->gen_Higgs_pt_branch->SetAddress(((void *)(&__pyx_v_self->gen_Higgs_pt_value)));
  }
  __pyx_L633:;

  /* "EMTree.pyx":2621
 * 
 *         #print "making gen_Higgs_mass"
 *         self.gen_Higgs_mass_branch = the_tree.GetBranch("gen_Higgs_mass")             # <<<<<<<<<<<<<<
 *         #if not self.gen_Higgs_mass_branch and "gen_Higgs_mass" not in self.complained:
 *         if not self.gen_Higgs_mass_branch and "gen_Higgs_mass":
 */
  __pyx_v_self->gen_Higgs_mass_branch = __pyx_v_the_tree->GetBranch(((char *)"gen_Higgs_mass"));

  /* "EMTree.pyx":2623
 *         self.gen_Higgs_mass_branch = the_tree.GetBranch("gen_Higgs_mass")
 *         #if not self.gen_Higgs_mass_branch and "gen_Higgs_mass" not in self.complained:
 *         if not self.gen_Higgs_mass_branch and "gen_Higgs_mass":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_mass does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_Higgs_mass")
 */
  __pyx_t_2 = ((!(__pyx_v_self->gen_Higgs_mass_branch != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L637_bool_binop_done;
  }
  __pyx_t_1 = 1;
  __pyx_L637_bool_binop_done:;
  if (__pyx_t_1) {

    /* "EMTree.pyx":2624
 *         #if not self.gen_Higgs_mass_branch and "gen_Higgs_mass" not in self.complained:
 *         if not self.gen_Higgs_mass_branch and "gen_Higgs_mass":
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_mass does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_Higgs_mass")
 *         else:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__213, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "EMTree.pyx":2623
 *         self.gen_Higgs_mass_branch = the_tree.GetBranch("gen_Higgs_mass")
 *         #if not self.gen_Higgs_mass_branch and "gen_Higgs_mass" not in self.complained:
 *         if not self.gen_Higgs_mass_branch and "gen_Higgs_mass":             # <<<<<<<<<<<<<<
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_mass does not exist!"                " It will crash if you try and use it!",Warning)
 *             #self.complained.add("gen_Higgs_mass")
 */
    goto __pyx_L636;
  }

  /* "EMTree.pyx":2627
 *             #self.complained.add("gen_Higgs_mass")
 *         else:
 *             self.gen_Higgs_mass_branch.SetAddress(<void*>&self.gen_Higgs_mass_value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_v_self->gen_Higgs_mass_branch->SetAddress(((void *)(&__pyx_v_self->gen_Higgs_mass_value)));
  }
  __pyx_L636:;

  /* "EMTree.pyx":718
 *             self.setup_branches(new_tree)
 * 
 *     cdef setup_branches(self, TTree* the_tree):             # <<<<<<<<<<<<<<
 *         #print "setup"
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("EMTree.EMTree.setup_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6EMTree_6EMTree_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "EMTree.pyx":2631
 * 
 *     # Iterating over the tree
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.ientry = 0
 *         while self.ientry < self.tree.GetEntries():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_2__iter__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_2__iter__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)__pyx_tp_new_6EMTree___pyx_scope_struct____iter__(__pyx_ptype_6EMTree___pyx_scope_struct____iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2631, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6EMTree_6EMTree_4generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_EMTree___iter, __pyx_n_s_EMTree); if (unlikely(!gen)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("EMTree.EMTree.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6EMTree_6EMTree_4generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2631, __pyx_L1_error)

  /* "EMTree.pyx":2632
 *     # Iterating over the tree
 *     def __iter__(self):
 *         self.ientry = 0             # <<<<<<<<<<<<<<
 *         while self.ientry < self.tree.GetEntries():
 *             self.load_entry(self.ientry)
 */
  __pyx_cur_scope->__pyx_v_self->ientry = 0;

  /* "EMTree.pyx":2633
 *     def __iter__(self):
 *         self.ientry = 0
 *         while self.ientry < self.tree.GetEntries():             # <<<<<<<<<<<<<<
 *             self.load_entry(self.ientry)
 *             yield self
 */
  while (1) {
    __pyx_t_1 = ((__pyx_cur_scope->__pyx_v_self->ientry < __pyx_cur_scope->__pyx_v_self->tree->GetEntries()) != 0);
    if (!__pyx_t_1) break;

    /* "EMTree.pyx":2634
 *         self.ientry = 0
 *         while self.ientry < self.tree.GetEntries():
 *             self.load_entry(self.ientry)             # <<<<<<<<<<<<<<
 *             yield self
 *             self.ientry += 1
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_6EMTree_EMTree *)__pyx_cur_scope->__pyx_v_self->__pyx_vtab)->load_entry(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_self->ientry); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "EMTree.pyx":2635
 *         while self.ientry < self.tree.GetEntries():
 *             self.load_entry(self.ientry)
 *             yield self             # <<<<<<<<<<<<<<
 *             self.ientry += 1
 * 
 */
    __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2635, __pyx_L1_error)

    /* "EMTree.pyx":2636
 *             self.load_entry(self.ientry)
 *             yield self
 *             self.ientry += 1             # <<<<<<<<<<<<<<
 * 
 *     # Iterate over rows which pass the filter
 */
    __pyx_cur_scope->__pyx_v_self->ientry = (__pyx_cur_scope->__pyx_v_self->ientry + 1);
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "EMTree.pyx":2631
 * 
 *     # Iterating over the tree
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.ientry = 0
 *         while self.ientry < self.tree.GetEntries():
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6EMTree_6EMTree_7generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "EMTree.pyx":2639
 * 
 *     # Iterate over rows which pass the filter
 *     def where(self, filter):             # <<<<<<<<<<<<<<
 *         print "where"
 *         cdef TTreeFormula* formula = new TTreeFormula(
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6where(PyObject *__pyx_v_self, PyObject *__pyx_v_filter); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6where(PyObject *__pyx_v_self, PyObject *__pyx_v_filter) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("where (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5where(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self), ((PyObject *)__pyx_v_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5where(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_filter) {
  struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("where", 0);
  __pyx_cur_scope = (struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)__pyx_tp_new_6EMTree___pyx_scope_struct_1_where(__pyx_ptype_6EMTree___pyx_scope_struct_1_where, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2639, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_filter = __pyx_v_filter;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_filter);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_filter);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6EMTree_6EMTree_7generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_where, __pyx_n_s_EMTree_where, __pyx_n_s_EMTree); if (unlikely(!gen)) __PYX_ERR(0, 2639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("EMTree.EMTree.where", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6EMTree_6EMTree_7generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *__pyx_cur_scope = ((struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("where", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2639, __pyx_L1_error)

  /* "EMTree.pyx":2640
 *     # Iterate over rows which pass the filter
 *     def where(self, filter):
 *         print "where"             # <<<<<<<<<<<<<<
 *         cdef TTreeFormula* formula = new TTreeFormula(
 *             "cyiter", filter, self.tree)
 */
  if (__Pyx_PrintOne(0, __pyx_n_s_where) < 0) __PYX_ERR(0, 2640, __pyx_L1_error)

  /* "EMTree.pyx":2642
 *         print "where"
 *         cdef TTreeFormula* formula = new TTreeFormula(
 *             "cyiter", filter, self.tree)             # <<<<<<<<<<<<<<
 *         self.ientry = 0
 *         cdef TTree* currentTree = self.tree.GetTree()
 */
  __pyx_t_1 = __Pyx_PyObject_AsWritableString(__pyx_cur_scope->__pyx_v_filter); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 2642, __pyx_L1_error)

  /* "EMTree.pyx":2641
 *     def where(self, filter):
 *         print "where"
 *         cdef TTreeFormula* formula = new TTreeFormula(             # <<<<<<<<<<<<<<
 *             "cyiter", filter, self.tree)
 *         self.ientry = 0
 */
  __pyx_cur_scope->__pyx_v_formula = new TTreeFormula(((char *)"cyiter"), __pyx_t_1, __pyx_cur_scope->__pyx_v_self->tree);

  /* "EMTree.pyx":2643
 *         cdef TTreeFormula* formula = new TTreeFormula(
 *             "cyiter", filter, self.tree)
 *         self.ientry = 0             # <<<<<<<<<<<<<<
 *         cdef TTree* currentTree = self.tree.GetTree()
 *         while self.ientry < self.tree.GetEntries():
 */
  __pyx_cur_scope->__pyx_v_self->ientry = 0;

  /* "EMTree.pyx":2644
 *             "cyiter", filter, self.tree)
 *         self.ientry = 0
 *         cdef TTree* currentTree = self.tree.GetTree()             # <<<<<<<<<<<<<<
 *         while self.ientry < self.tree.GetEntries():
 *             self.tree.LoadTree(self.ientry)
 */
  __pyx_cur_scope->__pyx_v_currentTree = __pyx_cur_scope->__pyx_v_self->tree->GetTree();

  /* "EMTree.pyx":2645
 *         self.ientry = 0
 *         cdef TTree* currentTree = self.tree.GetTree()
 *         while self.ientry < self.tree.GetEntries():             # <<<<<<<<<<<<<<
 *             self.tree.LoadTree(self.ientry)
 *             if currentTree != self.tree.GetTree():
 */
  while (1) {
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_self->ientry < __pyx_cur_scope->__pyx_v_self->tree->GetEntries()) != 0);
    if (!__pyx_t_2) break;

    /* "EMTree.pyx":2646
 *         cdef TTree* currentTree = self.tree.GetTree()
 *         while self.ientry < self.tree.GetEntries():
 *             self.tree.LoadTree(self.ientry)             # <<<<<<<<<<<<<<
 *             if currentTree != self.tree.GetTree():
 *                 currentTree = self.tree.GetTree()
 */
    (void)(__pyx_cur_scope->__pyx_v_self->tree->LoadTree(__pyx_cur_scope->__pyx_v_self->ientry));

    /* "EMTree.pyx":2647
 *         while self.ientry < self.tree.GetEntries():
 *             self.tree.LoadTree(self.ientry)
 *             if currentTree != self.tree.GetTree():             # <<<<<<<<<<<<<<
 *                 currentTree = self.tree.GetTree()
 *                 formula.SetTree(currentTree)
 */
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_currentTree != __pyx_cur_scope->__pyx_v_self->tree->GetTree()) != 0);
    if (__pyx_t_2) {

      /* "EMTree.pyx":2648
 *             self.tree.LoadTree(self.ientry)
 *             if currentTree != self.tree.GetTree():
 *                 currentTree = self.tree.GetTree()             # <<<<<<<<<<<<<<
 *                 formula.SetTree(currentTree)
 *                 formula.UpdateFormulaLeaves()
 */
      __pyx_cur_scope->__pyx_v_currentTree = __pyx_cur_scope->__pyx_v_self->tree->GetTree();

      /* "EMTree.pyx":2649
 *             if currentTree != self.tree.GetTree():
 *                 currentTree = self.tree.GetTree()
 *                 formula.SetTree(currentTree)             # <<<<<<<<<<<<<<
 *                 formula.UpdateFormulaLeaves()
 *             if formula.EvalInstance(0, NULL):
 */
      __pyx_cur_scope->__pyx_v_formula->SetTree(__pyx_cur_scope->__pyx_v_currentTree);

      /* "EMTree.pyx":2650
 *                 currentTree = self.tree.GetTree()
 *                 formula.SetTree(currentTree)
 *                 formula.UpdateFormulaLeaves()             # <<<<<<<<<<<<<<
 *             if formula.EvalInstance(0, NULL):
 *                 yield self
 */
      __pyx_cur_scope->__pyx_v_formula->UpdateFormulaLeaves();

      /* "EMTree.pyx":2647
 *         while self.ientry < self.tree.GetEntries():
 *             self.tree.LoadTree(self.ientry)
 *             if currentTree != self.tree.GetTree():             # <<<<<<<<<<<<<<
 *                 currentTree = self.tree.GetTree()
 *                 formula.SetTree(currentTree)
 */
    }

    /* "EMTree.pyx":2651
 *                 formula.SetTree(currentTree)
 *                 formula.UpdateFormulaLeaves()
 *             if formula.EvalInstance(0, NULL):             # <<<<<<<<<<<<<<
 *                 yield self
 *             self.ientry += 1
 */
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_formula->EvalInstance(0, NULL) != 0);
    if (__pyx_t_2) {

      /* "EMTree.pyx":2652
 *                 formula.UpdateFormulaLeaves()
 *             if formula.EvalInstance(0, NULL):
 *                 yield self             # <<<<<<<<<<<<<<
 *             self.ientry += 1
 *         del formula
 */
      __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_self));
      __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L8_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2652, __pyx_L1_error)

      /* "EMTree.pyx":2651
 *                 formula.SetTree(currentTree)
 *                 formula.UpdateFormulaLeaves()
 *             if formula.EvalInstance(0, NULL):             # <<<<<<<<<<<<<<
 *                 yield self
 *             self.ientry += 1
 */
    }

    /* "EMTree.pyx":2653
 *             if formula.EvalInstance(0, NULL):
 *                 yield self
 *             self.ientry += 1             # <<<<<<<<<<<<<<
 *         del formula
 * 
 */
    __pyx_cur_scope->__pyx_v_self->ientry = (__pyx_cur_scope->__pyx_v_self->ientry + 1);
  }

  /* "EMTree.pyx":2654
 *                 yield self
 *             self.ientry += 1
 *         del formula             # <<<<<<<<<<<<<<
 * 
 *     # Getting/setting the Tree entry number
 */
  delete __pyx_cur_scope->__pyx_v_formula;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "EMTree.pyx":2639
 * 
 *     # Iterate over rows which pass the filter
 *     def where(self, filter):             # <<<<<<<<<<<<<<
 *         print "where"
 *         cdef TTreeFormula* formula = new TTreeFormula(
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("where", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2658
 *     # Getting/setting the Tree entry number
 *     property entry:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ientry
 *         def __set__(self, int i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5entry_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5entry_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5entry___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5entry___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2659
 *     property entry:
 *         def __get__(self):
 *             return self.ientry             # <<<<<<<<<<<<<<
 *         def __set__(self, int i):
 *             print i
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->ientry); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2658
 *     # Getting/setting the Tree entry number
 *     property entry:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.ientry
 *         def __set__(self, int i):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.entry.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2660
 *         def __get__(self):
 *             return self.ientry
 *         def __set__(self, int i):             # <<<<<<<<<<<<<<
 *             print i
 *             self.ientry = i
 */

/* Python wrapper */
static int __pyx_pw_6EMTree_6EMTree_5entry_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static int __pyx_pw_6EMTree_6EMTree_5entry_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2660, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("EMTree.EMTree.entry.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5entry_2__set__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6EMTree_6EMTree_5entry_2__set__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, int __pyx_v_i) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "EMTree.pyx":2661
 *             return self.ientry
 *         def __set__(self, int i):
 *             print i             # <<<<<<<<<<<<<<
 *             self.ientry = i
 *             self.load_entry(i)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PrintOne(0, __pyx_t_1) < 0) __PYX_ERR(0, 2661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EMTree.pyx":2662
 *         def __set__(self, int i):
 *             print i
 *             self.ientry = i             # <<<<<<<<<<<<<<
 *             self.load_entry(i)
 * 
 */
  __pyx_v_self->ientry = __pyx_v_i;

  /* "EMTree.pyx":2663
 *             print i
 *             self.ientry = i
 *             self.load_entry(i)             # <<<<<<<<<<<<<<
 * 
 *     # Access to the current branch values
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6EMTree_EMTree *)__pyx_v_self->__pyx_vtab)->load_entry(__pyx_v_self, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EMTree.pyx":2660
 *         def __get__(self):
 *             return self.ientry
 *         def __set__(self, int i):             # <<<<<<<<<<<<<<
 *             print i
 *             self.ientry = i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.entry.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2668
 * 
 *     property run:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.run_branch.GetEntry(self.localentry, 0)
 *             return self.run_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3run_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3run_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3run___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3run___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2669
 *     property run:
 *         def __get__(self):
 *             self.run_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.run_value
 * 
 */
  (void)(__pyx_v_self->run_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2670
 *         def __get__(self):
 *             self.run_branch.GetEntry(self.localentry, 0)
 *             return self.run_value             # <<<<<<<<<<<<<<
 * 
 *     property lumi:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->run_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2668
 * 
 *     property run:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.run_branch.GetEntry(self.localentry, 0)
 *             return self.run_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.run.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2673
 * 
 *     property lumi:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.lumi_branch.GetEntry(self.localentry, 0)
 *             return self.lumi_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_4lumi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_4lumi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_4lumi___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_4lumi___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2674
 *     property lumi:
 *         def __get__(self):
 *             self.lumi_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.lumi_value
 * 
 */
  (void)(__pyx_v_self->lumi_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2675
 *         def __get__(self):
 *             self.lumi_branch.GetEntry(self.localentry, 0)
 *             return self.lumi_value             # <<<<<<<<<<<<<<
 * 
 *     property evt:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->lumi_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2673
 * 
 *     property lumi:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.lumi_branch.GetEntry(self.localentry, 0)
 *             return self.lumi_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.lumi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2678
 * 
 *     property evt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.evt_branch.GetEntry(self.localentry, 0)
 *             return self.evt_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3evt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3evt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3evt___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3evt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2679
 *     property evt:
 *         def __get__(self):
 *             self.evt_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.evt_value
 * 
 */
  (void)(__pyx_v_self->evt_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2680
 *         def __get__(self):
 *             self.evt_branch.GetEntry(self.localentry, 0)
 *             return self.evt_value             # <<<<<<<<<<<<<<
 * 
 *     property genpX:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->evt_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2678
 * 
 *     property evt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.evt_branch.GetEntry(self.localentry, 0)
 *             return self.evt_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.evt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2683
 * 
 *     property genpX:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpX_branch.GetEntry(self.localentry, 0)
 *             return self.genpX_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpX_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5genpX___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5genpX___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2684
 *     property genpX:
 *         def __get__(self):
 *             self.genpX_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genpX_value
 * 
 */
  (void)(__pyx_v_self->genpX_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2685
 *         def __get__(self):
 *             self.genpX_branch.GetEntry(self.localentry, 0)
 *             return self.genpX_value             # <<<<<<<<<<<<<<
 * 
 *     property genpY:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genpX_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2683
 * 
 *     property genpX:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpX_branch.GetEntry(self.localentry, 0)
 *             return self.genpX_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genpX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2688
 * 
 *     property genpY:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpY_branch.GetEntry(self.localentry, 0)
 *             return self.genpY_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpY_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5genpY___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5genpY___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2689
 *     property genpY:
 *         def __get__(self):
 *             self.genpY_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genpY_value
 * 
 */
  (void)(__pyx_v_self->genpY_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2690
 *         def __get__(self):
 *             self.genpY_branch.GetEntry(self.localentry, 0)
 *             return self.genpY_value             # <<<<<<<<<<<<<<
 * 
 *     property genM:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genpY_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2688
 * 
 *     property genpY:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpY_branch.GetEntry(self.localentry, 0)
 *             return self.genpY_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genpY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2693
 * 
 *     property genM:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genM_branch.GetEntry(self.localentry, 0)
 *             return self.genM_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_4genM_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_4genM_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_4genM___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_4genM___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2694
 *     property genM:
 *         def __get__(self):
 *             self.genM_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genM_value
 * 
 */
  (void)(__pyx_v_self->genM_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2695
 *         def __get__(self):
 *             self.genM_branch.GetEntry(self.localentry, 0)
 *             return self.genM_value             # <<<<<<<<<<<<<<
 * 
 *     property genpT:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genM_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2693
 * 
 *     property genM:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genM_branch.GetEntry(self.localentry, 0)
 *             return self.genM_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genM.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2698
 * 
 *     property genpT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpT_branch.GetEntry(self.localentry, 0)
 *             return self.genpT_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpT_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5genpT_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5genpT___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5genpT___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2699
 *     property genpT:
 *         def __get__(self):
 *             self.genpT_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genpT_value
 * 
 */
  (void)(__pyx_v_self->genpT_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2700
 *         def __get__(self):
 *             self.genpT_branch.GetEntry(self.localentry, 0)
 *             return self.genpT_value             # <<<<<<<<<<<<<<
 * 
 *     property vispX:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genpT_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2698
 * 
 *     property genpT:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpT_branch.GetEntry(self.localentry, 0)
 *             return self.genpT_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genpT.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2703
 * 
 *     property vispX:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.vispX_branch.GetEntry(self.localentry, 0)
 *             return self.vispX_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5vispX_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5vispX_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5vispX___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5vispX___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2704
 *     property vispX:
 *         def __get__(self):
 *             self.vispX_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.vispX_value
 * 
 */
  (void)(__pyx_v_self->vispX_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2705
 *         def __get__(self):
 *             self.vispX_branch.GetEntry(self.localentry, 0)
 *             return self.vispX_value             # <<<<<<<<<<<<<<
 * 
 *     property vispY:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->vispX_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2703
 * 
 *     property vispX:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.vispX_branch.GetEntry(self.localentry, 0)
 *             return self.vispX_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.vispX.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2708
 * 
 *     property vispY:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.vispY_branch.GetEntry(self.localentry, 0)
 *             return self.vispY_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5vispY_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5vispY_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5vispY___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5vispY___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2709
 *     property vispY:
 *         def __get__(self):
 *             self.vispY_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.vispY_value
 * 
 */
  (void)(__pyx_v_self->vispY_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2710
 *         def __get__(self):
 *             self.vispY_branch.GetEntry(self.localentry, 0)
 *             return self.vispY_value             # <<<<<<<<<<<<<<
 * 
 *     property genpt_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->vispY_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2708
 * 
 *     property vispY:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.vispY_branch.GetEntry(self.localentry, 0)
 *             return self.vispY_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.vispY.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2713
 * 
 *     property genpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_7genpt_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_7genpt_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_7genpt_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_7genpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2714
 *     property genpt_1:
 *         def __get__(self):
 *             self.genpt_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genpt_1_value
 * 
 */
  (void)(__pyx_v_self->genpt_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2715
 *         def __get__(self):
 *             self.genpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_1_value             # <<<<<<<<<<<<<<
 * 
 *     property geneta_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genpt_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2713
 * 
 *     property genpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genpt_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2718
 * 
 *     property geneta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.geneta_1_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8geneta_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8geneta_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8geneta_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8geneta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2719
 *     property geneta_1:
 *         def __get__(self):
 *             self.geneta_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.geneta_1_value
 * 
 */
  (void)(__pyx_v_self->geneta_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2720
 *         def __get__(self):
 *             self.geneta_1_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_1_value             # <<<<<<<<<<<<<<
 * 
 *     property genpt_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geneta_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2718
 * 
 *     property geneta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.geneta_1_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.geneta_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2723
 * 
 *     property genpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_7genpt_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_7genpt_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_7genpt_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_7genpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2724
 *     property genpt_2:
 *         def __get__(self):
 *             self.genpt_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genpt_2_value
 * 
 */
  (void)(__pyx_v_self->genpt_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2725
 *         def __get__(self):
 *             self.genpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_2_value             # <<<<<<<<<<<<<<
 * 
 *     property geneta_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genpt_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2723
 * 
 *     property genpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.genpt_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genpt_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2728
 * 
 *     property geneta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.geneta_2_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8geneta_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8geneta_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8geneta_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8geneta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2729
 *     property geneta_2:
 *         def __get__(self):
 *             self.geneta_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.geneta_2_value
 * 
 */
  (void)(__pyx_v_self->geneta_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2730
 *         def __get__(self):
 *             self.geneta_2_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_2_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_VEta:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->geneta_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2728
 * 
 *     property geneta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.geneta_2_branch.GetEntry(self.localentry, 0)
 *             return self.geneta_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.geneta_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2733
 * 
 *     property Rivet_VEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VEta_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_10Rivet_VEta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_10Rivet_VEta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10Rivet_VEta___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_10Rivet_VEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2734
 *     property Rivet_VEta:
 *         def __get__(self):
 *             self.Rivet_VEta_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_VEta_value
 * 
 */
  (void)(__pyx_v_self->Rivet_VEta_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2735
 *         def __get__(self):
 *             self.Rivet_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VEta_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_VPt:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_VEta_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2733
 * 
 *     property Rivet_VEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VEta_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_VEta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2738
 * 
 *     property Rivet_VPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VPt_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9Rivet_VPt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9Rivet_VPt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9Rivet_VPt___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9Rivet_VPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2739
 *     property Rivet_VPt:
 *         def __get__(self):
 *             self.Rivet_VPt_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_VPt_value
 * 
 */
  (void)(__pyx_v_self->Rivet_VPt_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2740
 *         def __get__(self):
 *             self.Rivet_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VPt_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_errorCode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_VPt_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2738
 * 
 *     property Rivet_VPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_VPt_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_VPt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2743
 * 
 *     property Rivet_errorCode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_errorCode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_errorCode_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15Rivet_errorCode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15Rivet_errorCode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15Rivet_errorCode___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15Rivet_errorCode___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2744
 *     property Rivet_errorCode:
 *         def __get__(self):
 *             self.Rivet_errorCode_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_errorCode_value
 * 
 */
  (void)(__pyx_v_self->Rivet_errorCode_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2745
 *         def __get__(self):
 *             self.Rivet_errorCode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_errorCode_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_higgsEta:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_errorCode_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2743
 * 
 *     property Rivet_errorCode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_errorCode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_errorCode_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_errorCode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2748
 * 
 *     property Rivet_higgsEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_higgsEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsEta_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14Rivet_higgsEta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14Rivet_higgsEta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14Rivet_higgsEta___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14Rivet_higgsEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2749
 *     property Rivet_higgsEta:
 *         def __get__(self):
 *             self.Rivet_higgsEta_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_higgsEta_value
 * 
 */
  (void)(__pyx_v_self->Rivet_higgsEta_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2750
 *         def __get__(self):
 *             self.Rivet_higgsEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsEta_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_higgsPt:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_higgsEta_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2748
 * 
 *     property Rivet_higgsEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_higgsEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsEta_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_higgsEta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2753
 * 
 *     property Rivet_higgsPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_higgsPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsPt_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_higgsPt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_higgsPt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13Rivet_higgsPt___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_higgsPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2754
 *     property Rivet_higgsPt:
 *         def __get__(self):
 *             self.Rivet_higgsPt_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_higgsPt_value
 * 
 */
  (void)(__pyx_v_self->Rivet_higgsPt_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2755
 *         def __get__(self):
 *             self.Rivet_higgsPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsPt_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_nJets25:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_higgsPt_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2753
 * 
 *     property Rivet_higgsPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_higgsPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_higgsPt_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_higgsPt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2758
 * 
 *     property Rivet_nJets25:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_nJets25_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets25_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_nJets25_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_nJets25_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13Rivet_nJets25___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_nJets25___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2759
 *     property Rivet_nJets25:
 *         def __get__(self):
 *             self.Rivet_nJets25_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_nJets25_value
 * 
 */
  (void)(__pyx_v_self->Rivet_nJets25_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2760
 *         def __get__(self):
 *             self.Rivet_nJets25_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets25_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_nJets30:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_nJets25_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2758
 * 
 *     property Rivet_nJets25:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_nJets25_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets25_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_nJets25.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2763
 * 
 *     property Rivet_nJets30:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_nJets30_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets30_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_nJets30_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13Rivet_nJets30_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13Rivet_nJets30___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13Rivet_nJets30___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2764
 *     property Rivet_nJets30:
 *         def __get__(self):
 *             self.Rivet_nJets30_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_nJets30_value
 * 
 */
  (void)(__pyx_v_self->Rivet_nJets30_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2765
 *         def __get__(self):
 *             self.Rivet_nJets30_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets30_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_p4decay_VEta:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_nJets30_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2763
 * 
 *     property Rivet_nJets30:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_nJets30_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_nJets30_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_nJets30.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2768
 * 
 *     property Rivet_p4decay_VEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_p4decay_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VEta_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18Rivet_p4decay_VEta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18Rivet_p4decay_VEta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18Rivet_p4decay_VEta___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18Rivet_p4decay_VEta___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2769
 *     property Rivet_p4decay_VEta:
 *         def __get__(self):
 *             self.Rivet_p4decay_VEta_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_p4decay_VEta_value
 * 
 */
  (void)(__pyx_v_self->Rivet_p4decay_VEta_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2770
 *         def __get__(self):
 *             self.Rivet_p4decay_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VEta_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_p4decay_VPt:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_p4decay_VEta_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2768
 * 
 *     property Rivet_p4decay_VEta:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_p4decay_VEta_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VEta_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_p4decay_VEta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2773
 * 
 *     property Rivet_p4decay_VPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_p4decay_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VPt_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17Rivet_p4decay_VPt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17Rivet_p4decay_VPt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17Rivet_p4decay_VPt___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17Rivet_p4decay_VPt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2774
 *     property Rivet_p4decay_VPt:
 *         def __get__(self):
 *             self.Rivet_p4decay_VPt_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_p4decay_VPt_value
 * 
 */
  (void)(__pyx_v_self->Rivet_p4decay_VPt_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2775
 *         def __get__(self):
 *             self.Rivet_p4decay_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VPt_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_prodMode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_p4decay_VPt_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2773
 * 
 *     property Rivet_p4decay_VPt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_p4decay_VPt_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_p4decay_VPt_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_p4decay_VPt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2778
 * 
 *     property Rivet_prodMode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_prodMode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_prodMode_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14Rivet_prodMode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14Rivet_prodMode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14Rivet_prodMode___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14Rivet_prodMode___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2779
 *     property Rivet_prodMode:
 *         def __get__(self):
 *             self.Rivet_prodMode_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_prodMode_value
 * 
 */
  (void)(__pyx_v_self->Rivet_prodMode_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2780
 *         def __get__(self):
 *             self.Rivet_prodMode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_prodMode_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_stage0_cat:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_prodMode_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2778
 * 
 *     property Rivet_prodMode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_prodMode_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_prodMode_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_prodMode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2783
 * 
 *     property Rivet_stage0_cat:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage0_cat_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage0_cat_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16Rivet_stage0_cat_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16Rivet_stage0_cat_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16Rivet_stage0_cat___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16Rivet_stage0_cat___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2784
 *     property Rivet_stage0_cat:
 *         def __get__(self):
 *             self.Rivet_stage0_cat_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_stage0_cat_value
 * 
 */
  (void)(__pyx_v_self->Rivet_stage0_cat_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2785
 *         def __get__(self):
 *             self.Rivet_stage0_cat_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage0_cat_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_stage1_1_fine_cat_pTjet30GeV:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_stage0_cat_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2783
 * 
 *     property Rivet_stage0_cat:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage0_cat_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage0_cat_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_stage0_cat.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2788
 * 
 *     property Rivet_stage1_1_fine_cat_pTjet30GeV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_fine_cat_pTjet30GeV_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2789
 *     property Rivet_stage1_1_fine_cat_pTjet30GeV:
 *         def __get__(self):
 *             self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_stage1_1_fine_cat_pTjet30GeV_value
 * 
 */
  (void)(__pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2790
 *         def __get__(self):
 *             self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_fine_cat_pTjet30GeV_value             # <<<<<<<<<<<<<<
 * 
 *     property Rivet_stage1_1_cat_pTjet30GeV:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_stage1_1_fine_cat_pTjet30GeV_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2788
 * 
 *     property Rivet_stage1_1_fine_cat_pTjet30GeV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_fine_cat_pTjet30GeV_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_stage1_1_fine_cat_pTjet30GeV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2793
 * 
 *     property Rivet_stage1_1_cat_pTjet30GeV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage1_1_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_cat_pTjet30GeV_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2794
 *     property Rivet_stage1_1_cat_pTjet30GeV:
 *         def __get__(self):
 *             self.Rivet_stage1_1_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Rivet_stage1_1_cat_pTjet30GeV_value
 * 
 */
  (void)(__pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2795
 *         def __get__(self):
 *             self.Rivet_stage1_1_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_cat_pTjet30GeV_value             # <<<<<<<<<<<<<<
 * 
 *     property npv:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Rivet_stage1_1_cat_pTjet30GeV_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2793
 * 
 *     property Rivet_stage1_1_cat_pTjet30GeV:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Rivet_stage1_1_cat_pTjet30GeV_branch.GetEntry(self.localentry, 0)
 *             return self.Rivet_stage1_1_cat_pTjet30GeV_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Rivet_stage1_1_cat_pTjet30GeV.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2798
 * 
 *     property npv:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.npv_branch.GetEntry(self.localentry, 0)
 *             return self.npv_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3npv_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3npv_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3npv___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3npv___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2799
 *     property npv:
 *         def __get__(self):
 *             self.npv_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.npv_value
 * 
 */
  (void)(__pyx_v_self->npv_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2800
 *         def __get__(self):
 *             self.npv_branch.GetEntry(self.localentry, 0)
 *             return self.npv_value             # <<<<<<<<<<<<<<
 * 
 *     property npu:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->npv_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2798
 * 
 *     property npv:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.npv_branch.GetEntry(self.localentry, 0)
 *             return self.npv_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.npv.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2803
 * 
 *     property npu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.npu_branch.GetEntry(self.localentry, 0)
 *             return self.npu_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3npu_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3npu_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3npu___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3npu___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2804
 *     property npu:
 *         def __get__(self):
 *             self.npu_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.npu_value
 * 
 */
  (void)(__pyx_v_self->npu_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2805
 *         def __get__(self):
 *             self.npu_branch.GetEntry(self.localentry, 0)
 *             return self.npu_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_1_ScaleUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->npu_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2803
 * 
 *     property npu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.npu_branch.GetEntry(self.localentry, 0)
 *             return self.npu_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.npu.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2808
 * 
 *     property pt_1_ScaleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_ScaleUp_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12pt_1_ScaleUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12pt_1_ScaleUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12pt_1_ScaleUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12pt_1_ScaleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2809
 *     property pt_1_ScaleUp:
 *         def __get__(self):
 *             self.pt_1_ScaleUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_1_ScaleUp_value
 * 
 */
  (void)(__pyx_v_self->pt_1_ScaleUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2810
 *         def __get__(self):
 *             self.pt_1_ScaleUp_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleUp_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_1_ScaleDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_1_ScaleUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2808
 * 
 *     property pt_1_ScaleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_ScaleUp_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_1_ScaleUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2813
 * 
 *     property pt_1_ScaleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_ScaleDown_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14pt_1_ScaleDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14pt_1_ScaleDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14pt_1_ScaleDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14pt_1_ScaleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2814
 *     property pt_1_ScaleDown:
 *         def __get__(self):
 *             self.pt_1_ScaleDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_1_ScaleDown_value
 * 
 */
  (void)(__pyx_v_self->pt_1_ScaleDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2815
 *         def __get__(self):
 *             self.pt_1_ScaleDown_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleDown_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_1_ScaleDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2813
 * 
 *     property pt_1_ScaleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_ScaleDown_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_ScaleDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_1_ScaleDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2818
 * 
 *     property pt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_4pt_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_4pt_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_4pt_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_4pt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2819
 *     property pt_1:
 *         def __get__(self):
 *             self.pt_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_1_value
 * 
 */
  (void)(__pyx_v_self->pt_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2820
 *         def __get__(self):
 *             self.pt_1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_value             # <<<<<<<<<<<<<<
 * 
 *     property phi_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2818
 * 
 *     property pt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2823
 * 
 *     property phi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.phi_1_branch.GetEntry(self.localentry, 0)
 *             return self.phi_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5phi_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5phi_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5phi_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5phi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2824
 *     property phi_1:
 *         def __get__(self):
 *             self.phi_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.phi_1_value
 * 
 */
  (void)(__pyx_v_self->phi_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2825
 *         def __get__(self):
 *             self.phi_1_branch.GetEntry(self.localentry, 0)
 *             return self.phi_1_value             # <<<<<<<<<<<<<<
 * 
 *     property eta_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->phi_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2823
 * 
 *     property phi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.phi_1_branch.GetEntry(self.localentry, 0)
 *             return self.phi_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.phi_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2828
 * 
 *     property eta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.eta_1_branch.GetEntry(self.localentry, 0)
 *             return self.eta_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5eta_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5eta_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5eta_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5eta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2829
 *     property eta_1:
 *         def __get__(self):
 *             self.eta_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.eta_1_value
 * 
 */
  (void)(__pyx_v_self->eta_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2830
 *         def __get__(self):
 *             self.eta_1_branch.GetEntry(self.localentry, 0)
 *             return self.eta_1_value             # <<<<<<<<<<<<<<
 * 
 *     property m_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->eta_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2828
 * 
 *     property eta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.eta_1_branch.GetEntry(self.localentry, 0)
 *             return self.eta_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.eta_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2833
 * 
 *     property m_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.m_1_branch.GetEntry(self.localentry, 0)
 *             return self.m_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3m_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3m_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3m_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3m_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2834
 *     property m_1:
 *         def __get__(self):
 *             self.m_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.m_1_value
 * 
 */
  (void)(__pyx_v_self->m_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2835
 *         def __get__(self):
 *             self.m_1_branch.GetEntry(self.localentry, 0)
 *             return self.m_1_value             # <<<<<<<<<<<<<<
 * 
 *     property e_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->m_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2833
 * 
 *     property m_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.m_1_branch.GetEntry(self.localentry, 0)
 *             return self.m_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.m_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2838
 * 
 *     property e_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.e_1_branch.GetEntry(self.localentry, 0)
 *             return self.e_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3e_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3e_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3e_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3e_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2839
 *     property e_1:
 *         def __get__(self):
 *             self.e_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.e_1_value
 * 
 */
  (void)(__pyx_v_self->e_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2840
 *         def __get__(self):
 *             self.e_1_branch.GetEntry(self.localentry, 0)
 *             return self.e_1_value             # <<<<<<<<<<<<<<
 * 
 *     property q_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->e_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2838
 * 
 *     property e_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.e_1_branch.GetEntry(self.localentry, 0)
 *             return self.e_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.e_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2843
 * 
 *     property q_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.q_1_branch.GetEntry(self.localentry, 0)
 *             return self.q_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3q_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3q_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3q_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3q_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2844
 *     property q_1:
 *         def __get__(self):
 *             self.q_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.q_1_value
 * 
 */
  (void)(__pyx_v_self->q_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2845
 *         def __get__(self):
 *             self.q_1_branch.GetEntry(self.localentry, 0)
 *             return self.q_1_value             # <<<<<<<<<<<<<<
 * 
 *     property iso_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->q_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2843
 * 
 *     property q_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.q_1_branch.GetEntry(self.localentry, 0)
 *             return self.q_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.q_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2848
 * 
 *     property iso_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.iso_1_branch.GetEntry(self.localentry, 0)
 *             return self.iso_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5iso_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5iso_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5iso_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5iso_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2849
 *     property iso_1:
 *         def __get__(self):
 *             self.iso_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.iso_1_value
 * 
 */
  (void)(__pyx_v_self->iso_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2850
 *         def __get__(self):
 *             self.iso_1_branch.GetEntry(self.localentry, 0)
 *             return self.iso_1_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->iso_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2848
 * 
 *     property iso_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.iso_1_branch.GetEntry(self.localentry, 0)
 *             return self.iso_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.iso_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2853
 * 
 *     property pt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_4pt_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_4pt_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_4pt_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_4pt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2854
 *     property pt_2:
 *         def __get__(self):
 *             self.pt_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_2_value
 * 
 */
  (void)(__pyx_v_self->pt_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2855
 *         def __get__(self):
 *             self.pt_2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_2_value             # <<<<<<<<<<<<<<
 * 
 *     property phi_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2853
 * 
 *     property pt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2858
 * 
 *     property phi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.phi_2_branch.GetEntry(self.localentry, 0)
 *             return self.phi_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5phi_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5phi_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5phi_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5phi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2859
 *     property phi_2:
 *         def __get__(self):
 *             self.phi_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.phi_2_value
 * 
 */
  (void)(__pyx_v_self->phi_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2860
 *         def __get__(self):
 *             self.phi_2_branch.GetEntry(self.localentry, 0)
 *             return self.phi_2_value             # <<<<<<<<<<<<<<
 * 
 *     property eta_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->phi_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2858
 * 
 *     property phi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.phi_2_branch.GetEntry(self.localentry, 0)
 *             return self.phi_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.phi_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2863
 * 
 *     property eta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.eta_2_branch.GetEntry(self.localentry, 0)
 *             return self.eta_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5eta_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5eta_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5eta_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5eta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2864
 *     property eta_2:
 *         def __get__(self):
 *             self.eta_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.eta_2_value
 * 
 */
  (void)(__pyx_v_self->eta_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2865
 *         def __get__(self):
 *             self.eta_2_branch.GetEntry(self.localentry, 0)
 *             return self.eta_2_value             # <<<<<<<<<<<<<<
 * 
 *     property m_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->eta_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2863
 * 
 *     property eta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.eta_2_branch.GetEntry(self.localentry, 0)
 *             return self.eta_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.eta_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2868
 * 
 *     property m_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.m_2_branch.GetEntry(self.localentry, 0)
 *             return self.m_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3m_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3m_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3m_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3m_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2869
 *     property m_2:
 *         def __get__(self):
 *             self.m_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.m_2_value
 * 
 */
  (void)(__pyx_v_self->m_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2870
 *         def __get__(self):
 *             self.m_2_branch.GetEntry(self.localentry, 0)
 *             return self.m_2_value             # <<<<<<<<<<<<<<
 * 
 *     property e_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->m_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2868
 * 
 *     property m_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.m_2_branch.GetEntry(self.localentry, 0)
 *             return self.m_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.m_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2873
 * 
 *     property e_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.e_2_branch.GetEntry(self.localentry, 0)
 *             return self.e_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3e_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3e_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3e_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3e_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2874
 *     property e_2:
 *         def __get__(self):
 *             self.e_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.e_2_value
 * 
 */
  (void)(__pyx_v_self->e_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2875
 *         def __get__(self):
 *             self.e_2_branch.GetEntry(self.localentry, 0)
 *             return self.e_2_value             # <<<<<<<<<<<<<<
 * 
 *     property q_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->e_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2873
 * 
 *     property e_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.e_2_branch.GetEntry(self.localentry, 0)
 *             return self.e_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.e_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2878
 * 
 *     property q_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.q_2_branch.GetEntry(self.localentry, 0)
 *             return self.q_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3q_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3q_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3q_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3q_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2879
 *     property q_2:
 *         def __get__(self):
 *             self.q_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.q_2_value
 * 
 */
  (void)(__pyx_v_self->q_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2880
 *         def __get__(self):
 *             self.q_2_branch.GetEntry(self.localentry, 0)
 *             return self.q_2_value             # <<<<<<<<<<<<<<
 * 
 *     property iso_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->q_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2878
 * 
 *     property q_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.q_2_branch.GetEntry(self.localentry, 0)
 *             return self.q_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.q_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2883
 * 
 *     property iso_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.iso_2_branch.GetEntry(self.localentry, 0)
 *             return self.iso_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5iso_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5iso_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5iso_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5iso_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2884
 *     property iso_2:
 *         def __get__(self):
 *             self.iso_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.iso_2_value
 * 
 */
  (void)(__pyx_v_self->iso_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2885
 *         def __get__(self):
 *             self.iso_2_branch.GetEntry(self.localentry, 0)
 *             return self.iso_2_value             # <<<<<<<<<<<<<<
 * 
 *     property numGenJets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->iso_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2883
 * 
 *     property iso_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.iso_2_branch.GetEntry(self.localentry, 0)
 *             return self.iso_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.iso_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2888
 * 
 *     property numGenJets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.numGenJets_branch.GetEntry(self.localentry, 0)
 *             return self.numGenJets_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_10numGenJets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_10numGenJets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10numGenJets___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_10numGenJets___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2889
 *     property numGenJets:
 *         def __get__(self):
 *             self.numGenJets_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.numGenJets_value
 * 
 */
  (void)(__pyx_v_self->numGenJets_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2890
 *         def __get__(self):
 *             self.numGenJets_branch.GetEntry(self.localentry, 0)
 *             return self.numGenJets_value             # <<<<<<<<<<<<<<
 * 
 *     property bweight:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->numGenJets_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2888
 * 
 *     property numGenJets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.numGenJets_branch.GetEntry(self.localentry, 0)
 *             return self.numGenJets_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.numGenJets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2893
 * 
 *     property bweight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bweight_branch.GetEntry(self.localentry, 0)
 *             return self.bweight_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_7bweight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_7bweight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_7bweight___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_7bweight___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2894
 *     property bweight:
 *         def __get__(self):
 *             self.bweight_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bweight_value
 * 
 */
  (void)(__pyx_v_self->bweight_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2895
 *         def __get__(self):
 *             self.bweight_branch.GetEntry(self.localentry, 0)
 *             return self.bweight_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_ecalBadCalibReducedMINIAODFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bweight_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2893
 * 
 *     property bweight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bweight_branch.GetEntry(self.localentry, 0)
 *             return self.bweight_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bweight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2898
 * 
 *     property Flag_ecalBadCalibReducedMINIAODFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_ecalBadCalibReducedMINIAODFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibReducedMINIAODFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2899
 *     property Flag_ecalBadCalibReducedMINIAODFilter:
 *         def __get__(self):
 *             self.Flag_ecalBadCalibReducedMINIAODFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_ecalBadCalibReducedMINIAODFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2900
 *         def __get__(self):
 *             self.Flag_ecalBadCalibReducedMINIAODFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibReducedMINIAODFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_goodVertices:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_ecalBadCalibReducedMINIAODFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2898
 * 
 *     property Flag_ecalBadCalibReducedMINIAODFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_ecalBadCalibReducedMINIAODFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibReducedMINIAODFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_ecalBadCalibReducedMINIAODFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2903
 * 
 *     property Flag_goodVertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_goodVertices_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_goodVertices_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17Flag_goodVertices_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17Flag_goodVertices_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17Flag_goodVertices___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17Flag_goodVertices___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2904
 *     property Flag_goodVertices:
 *         def __get__(self):
 *             self.Flag_goodVertices_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_goodVertices_value
 * 
 */
  (void)(__pyx_v_self->Flag_goodVertices_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2905
 *         def __get__(self):
 *             self.Flag_goodVertices_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_goodVertices_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_globalSuperTightHalo2016Filter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_goodVertices_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2903
 * 
 *     property Flag_goodVertices:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_goodVertices_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_goodVertices_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_goodVertices.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2908
 * 
 *     property Flag_globalSuperTightHalo2016Filter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_globalSuperTightHalo2016Filter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_globalSuperTightHalo2016Filter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2909
 *     property Flag_globalSuperTightHalo2016Filter:
 *         def __get__(self):
 *             self.Flag_globalSuperTightHalo2016Filter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_globalSuperTightHalo2016Filter_value
 * 
 */
  (void)(__pyx_v_self->Flag_globalSuperTightHalo2016Filter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2910
 *         def __get__(self):
 *             self.Flag_globalSuperTightHalo2016Filter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_globalSuperTightHalo2016Filter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_eeBadScFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_globalSuperTightHalo2016Filter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2908
 * 
 *     property Flag_globalSuperTightHalo2016Filter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_globalSuperTightHalo2016Filter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_globalSuperTightHalo2016Filter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_globalSuperTightHalo2016Filter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2913
 * 
 *     property Flag_eeBadScFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_eeBadScFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_eeBadScFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18Flag_eeBadScFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18Flag_eeBadScFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18Flag_eeBadScFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18Flag_eeBadScFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2914
 *     property Flag_eeBadScFilter:
 *         def __get__(self):
 *             self.Flag_eeBadScFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_eeBadScFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_eeBadScFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2915
 *         def __get__(self):
 *             self.Flag_eeBadScFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_eeBadScFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_ecalBadCalibFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_eeBadScFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2913
 * 
 *     property Flag_eeBadScFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_eeBadScFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_eeBadScFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_eeBadScFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2918
 * 
 *     property Flag_ecalBadCalibFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_ecalBadCalibFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23Flag_ecalBadCalibFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23Flag_ecalBadCalibFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23Flag_ecalBadCalibFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23Flag_ecalBadCalibFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2919
 *     property Flag_ecalBadCalibFilter:
 *         def __get__(self):
 *             self.Flag_ecalBadCalibFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_ecalBadCalibFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_ecalBadCalibFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2920
 *         def __get__(self):
 *             self.Flag_ecalBadCalibFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_badMuons:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_ecalBadCalibFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2918
 * 
 *     property Flag_ecalBadCalibFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_ecalBadCalibFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_ecalBadCalibFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_ecalBadCalibFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2923
 * 
 *     property Flag_badMuons:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_badMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_badMuons_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13Flag_badMuons_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13Flag_badMuons_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13Flag_badMuons___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13Flag_badMuons___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2924
 *     property Flag_badMuons:
 *         def __get__(self):
 *             self.Flag_badMuons_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_badMuons_value
 * 
 */
  (void)(__pyx_v_self->Flag_badMuons_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2925
 *         def __get__(self):
 *             self.Flag_badMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_badMuons_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_duplicateMuons:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_badMuons_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2923
 * 
 *     property Flag_badMuons:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_badMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_badMuons_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_badMuons.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2928
 * 
 *     property Flag_duplicateMuons:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_duplicateMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_duplicateMuons_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19Flag_duplicateMuons_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19Flag_duplicateMuons_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19Flag_duplicateMuons___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19Flag_duplicateMuons___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2929
 *     property Flag_duplicateMuons:
 *         def __get__(self):
 *             self.Flag_duplicateMuons_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_duplicateMuons_value
 * 
 */
  (void)(__pyx_v_self->Flag_duplicateMuons_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2930
 *         def __get__(self):
 *             self.Flag_duplicateMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_duplicateMuons_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_HBHENoiseIsoFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_duplicateMuons_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2928
 * 
 *     property Flag_duplicateMuons:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_duplicateMuons_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_duplicateMuons_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_duplicateMuons.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2933
 * 
 *     property Flag_HBHENoiseIsoFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_HBHENoiseIsoFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseIsoFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2934
 *     property Flag_HBHENoiseIsoFilter:
 *         def __get__(self):
 *             self.Flag_HBHENoiseIsoFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_HBHENoiseIsoFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_HBHENoiseIsoFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2935
 *         def __get__(self):
 *             self.Flag_HBHENoiseIsoFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseIsoFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_HBHENoiseFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_HBHENoiseIsoFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2933
 * 
 *     property Flag_HBHENoiseIsoFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_HBHENoiseIsoFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseIsoFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_HBHENoiseIsoFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2938
 * 
 *     property Flag_HBHENoiseFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_HBHENoiseFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20Flag_HBHENoiseFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20Flag_HBHENoiseFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20Flag_HBHENoiseFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20Flag_HBHENoiseFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2939
 *     property Flag_HBHENoiseFilter:
 *         def __get__(self):
 *             self.Flag_HBHENoiseFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_HBHENoiseFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_HBHENoiseFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2940
 *         def __get__(self):
 *             self.Flag_HBHENoiseFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_EcalDeadCellTriggerPrimitiveFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_HBHENoiseFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2938
 * 
 *     property Flag_HBHENoiseFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_HBHENoiseFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_HBHENoiseFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_HBHENoiseFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2943
 * 
 *     property Flag_EcalDeadCellTriggerPrimitiveFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_EcalDeadCellTriggerPrimitiveFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2944
 *     property Flag_EcalDeadCellTriggerPrimitiveFilter:
 *         def __get__(self):
 *             self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_EcalDeadCellTriggerPrimitiveFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2945
 *         def __get__(self):
 *             self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_EcalDeadCellTriggerPrimitiveFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_BadPFMuonFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_EcalDeadCellTriggerPrimitiveFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2943
 * 
 *     property Flag_EcalDeadCellTriggerPrimitiveFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_EcalDeadCellTriggerPrimitiveFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_EcalDeadCellTriggerPrimitiveFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2948
 * 
 *     property Flag_BadPFMuonFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_BadPFMuonFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadPFMuonFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20Flag_BadPFMuonFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20Flag_BadPFMuonFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20Flag_BadPFMuonFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20Flag_BadPFMuonFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2949
 *     property Flag_BadPFMuonFilter:
 *         def __get__(self):
 *             self.Flag_BadPFMuonFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_BadPFMuonFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_BadPFMuonFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2950
 *         def __get__(self):
 *             self.Flag_BadPFMuonFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadPFMuonFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property Flag_BadChargedCandidateFilter:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_BadPFMuonFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2948
 * 
 *     property Flag_BadPFMuonFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_BadPFMuonFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadPFMuonFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_BadPFMuonFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2953
 * 
 *     property Flag_BadChargedCandidateFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_BadChargedCandidateFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadChargedCandidateFilter_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2954
 *     property Flag_BadChargedCandidateFilter:
 *         def __get__(self):
 *             self.Flag_BadChargedCandidateFilter_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.Flag_BadChargedCandidateFilter_value
 * 
 */
  (void)(__pyx_v_self->Flag_BadChargedCandidateFilter_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2955
 *         def __get__(self):
 *             self.Flag_BadChargedCandidateFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadChargedCandidateFilter_value             # <<<<<<<<<<<<<<
 * 
 *     property met:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->Flag_BadChargedCandidateFilter_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2953
 * 
 *     property Flag_BadChargedCandidateFilter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.Flag_BadChargedCandidateFilter_branch.GetEntry(self.localentry, 0)
 *             return self.Flag_BadChargedCandidateFilter_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.Flag_BadChargedCandidateFilter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2958
 * 
 *     property met:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_branch.GetEntry(self.localentry, 0)
 *             return self.met_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3met_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3met_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3met___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3met___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2959
 *     property met:
 *         def __get__(self):
 *             self.met_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_value
 * 
 */
  (void)(__pyx_v_self->met_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2960
 *         def __get__(self):
 *             self.met_branch.GetEntry(self.localentry, 0)
 *             return self.met_value             # <<<<<<<<<<<<<<
 * 
 *     property metSig:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2958
 * 
 *     property met:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_branch.GetEntry(self.localentry, 0)
 *             return self.met_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2963
 * 
 *     property metSig:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metSig_branch.GetEntry(self.localentry, 0)
 *             return self.metSig_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6metSig_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6metSig_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6metSig___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6metSig___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2964
 *     property metSig:
 *         def __get__(self):
 *             self.metSig_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metSig_value
 * 
 */
  (void)(__pyx_v_self->metSig_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2965
 *         def __get__(self):
 *             self.metSig_branch.GetEntry(self.localentry, 0)
 *             return self.metSig_value             # <<<<<<<<<<<<<<
 * 
 *     property metcov00:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metSig_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2963
 * 
 *     property metSig:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metSig_branch.GetEntry(self.localentry, 0)
 *             return self.metSig_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metSig.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2968
 * 
 *     property metcov00:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov00_branch.GetEntry(self.localentry, 0)
 *             return self.metcov00_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov00_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov00_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8metcov00___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov00___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2969
 *     property metcov00:
 *         def __get__(self):
 *             self.metcov00_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metcov00_value
 * 
 */
  (void)(__pyx_v_self->metcov00_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2970
 *         def __get__(self):
 *             self.metcov00_branch.GetEntry(self.localentry, 0)
 *             return self.metcov00_value             # <<<<<<<<<<<<<<
 * 
 *     property metcov10:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metcov00_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2968
 * 
 *     property metcov00:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov00_branch.GetEntry(self.localentry, 0)
 *             return self.metcov00_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metcov00.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2973
 * 
 *     property metcov10:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov10_branch.GetEntry(self.localentry, 0)
 *             return self.metcov10_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov10_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov10_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8metcov10___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov10___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2974
 *     property metcov10:
 *         def __get__(self):
 *             self.metcov10_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metcov10_value
 * 
 */
  (void)(__pyx_v_self->metcov10_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2975
 *         def __get__(self):
 *             self.metcov10_branch.GetEntry(self.localentry, 0)
 *             return self.metcov10_value             # <<<<<<<<<<<<<<
 * 
 *     property metcov11:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metcov10_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2973
 * 
 *     property metcov10:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov10_branch.GetEntry(self.localentry, 0)
 *             return self.metcov10_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metcov10.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2978
 * 
 *     property metcov11:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov11_branch.GetEntry(self.localentry, 0)
 *             return self.metcov11_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov11_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov11_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8metcov11___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov11___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2979
 *     property metcov11:
 *         def __get__(self):
 *             self.metcov11_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metcov11_value
 * 
 */
  (void)(__pyx_v_self->metcov11_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2980
 *         def __get__(self):
 *             self.metcov11_branch.GetEntry(self.localentry, 0)
 *             return self.metcov11_value             # <<<<<<<<<<<<<<
 * 
 *     property metcov01:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metcov11_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2978
 * 
 *     property metcov11:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov11_branch.GetEntry(self.localentry, 0)
 *             return self.metcov11_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metcov11.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2983
 * 
 *     property metcov01:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov01_branch.GetEntry(self.localentry, 0)
 *             return self.metcov01_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov01_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_8metcov01_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8metcov01___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8metcov01___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2984
 *     property metcov01:
 *         def __get__(self):
 *             self.metcov01_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metcov01_value
 * 
 */
  (void)(__pyx_v_self->metcov01_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2985
 *         def __get__(self):
 *             self.metcov01_branch.GetEntry(self.localentry, 0)
 *             return self.metcov01_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metcov01_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2983
 * 
 *     property metcov01:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metcov01_branch.GetEntry(self.localentry, 0)
 *             return self.metcov01_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metcov01.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2988
 * 
 *     property metphi:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6metphi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6metphi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6metphi___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6metphi___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2989
 *     property metphi:
 *         def __get__(self):
 *             self.metphi_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_value
 * 
 */
  (void)(__pyx_v_self->metphi_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2990
 *         def __get__(self):
 *             self.metphi_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_value             # <<<<<<<<<<<<<<
 * 
 *     property met_py:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2988
 * 
 *     property metphi:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2993
 * 
 *     property met_py:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_py_branch.GetEntry(self.localentry, 0)
 *             return self.met_py_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6met_py_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6met_py_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6met_py___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6met_py___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2994
 *     property met_py:
 *         def __get__(self):
 *             self.met_py_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_py_value
 * 
 */
  (void)(__pyx_v_self->met_py_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":2995
 *         def __get__(self):
 *             self.met_py_branch.GetEntry(self.localentry, 0)
 *             return self.met_py_value             # <<<<<<<<<<<<<<
 * 
 *     property met_px:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_py_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2993
 * 
 *     property met_py:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_py_branch.GetEntry(self.localentry, 0)
 *             return self.met_py_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_py.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":2998
 * 
 *     property met_px:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_px_branch.GetEntry(self.localentry, 0)
 *             return self.met_px_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6met_px_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6met_px_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6met_px___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6met_px___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":2999
 *     property met_px:
 *         def __get__(self):
 *             self.met_px_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_px_value
 * 
 */
  (void)(__pyx_v_self->met_px_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3000
 *         def __get__(self):
 *             self.met_px_branch.GetEntry(self.localentry, 0)
 *             return self.met_px_value             # <<<<<<<<<<<<<<
 * 
 *     property met_UESUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_px_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":2998
 * 
 *     property met_px:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_px_branch.GetEntry(self.localentry, 0)
 *             return self.met_px_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_px.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3003
 * 
 *     property met_UESUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9met_UESUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9met_UESUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9met_UESUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9met_UESUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3004
 *     property met_UESUp:
 *         def __get__(self):
 *             self.met_UESUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_UESUp_value
 * 
 */
  (void)(__pyx_v_self->met_UESUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3005
 *         def __get__(self):
 *             self.met_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_UESUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_UESUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3003
 * 
 *     property met_UESUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_UESUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3008
 * 
 *     property metphi_UESUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12metphi_UESUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12metphi_UESUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12metphi_UESUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12metphi_UESUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3009
 *     property metphi_UESUp:
 *         def __get__(self):
 *             self.metphi_UESUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_UESUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_UESUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3010
 *         def __get__(self):
 *             self.metphi_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_UESDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_UESUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3008
 * 
 *     property metphi_UESUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_UESUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_UESUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3013
 * 
 *     property met_UESDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_UESDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_UESDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11met_UESDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11met_UESDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3014
 *     property met_UESDown:
 *         def __get__(self):
 *             self.met_UESDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_UESDown_value
 * 
 */
  (void)(__pyx_v_self->met_UESDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3015
 *         def __get__(self):
 *             self.met_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_UESDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_UESDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3013
 * 
 *     property met_UESDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_UESDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_UESDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3018
 * 
 *     property metphi_UESDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_UESDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_UESDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14metphi_UESDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_UESDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3019
 *     property metphi_UESDown:
 *         def __get__(self):
 *             self.metphi_UESDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_UESDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_UESDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3020
 *         def __get__(self):
 *             self.metphi_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetAbsoluteUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_UESDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3018
 * 
 *     property metphi_UESDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_UESDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_UESDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_UESDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3023
 * 
 *     property met_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17met_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17met_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17met_JetAbsoluteUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17met_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3024
 *     property met_JetAbsoluteUp:
 *         def __get__(self):
 *             self.met_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetAbsoluteUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetAbsoluteUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3025
 *         def __get__(self):
 *             self.met_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetAbsoluteUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetAbsoluteUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3023
 * 
 *     property met_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetAbsoluteUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3028
 * 
 *     property metphi_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20metphi_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20metphi_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20metphi_JetAbsoluteUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20metphi_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3029
 *     property metphi_JetAbsoluteUp:
 *         def __get__(self):
 *             self.metphi_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetAbsoluteUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetAbsoluteUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3030
 *         def __get__(self):
 *             self.metphi_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetAbsoluteDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetAbsoluteUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3028
 * 
 *     property metphi_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetAbsoluteUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3033
 * 
 *     property met_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19met_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19met_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19met_JetAbsoluteDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19met_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3034
 *     property met_JetAbsoluteDown:
 *         def __get__(self):
 *             self.met_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetAbsoluteDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetAbsoluteDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3035
 *         def __get__(self):
 *             self.met_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetAbsoluteDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetAbsoluteDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3033
 * 
 *     property met_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetAbsoluteDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3038
 * 
 *     property metphi_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22metphi_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22metphi_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22metphi_JetAbsoluteDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22metphi_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3039
 *     property metphi_JetAbsoluteDown:
 *         def __get__(self):
 *             self.metphi_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetAbsoluteDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetAbsoluteDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3040
 *         def __get__(self):
 *             self.metphi_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetAbsoluteyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetAbsoluteDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3038
 * 
 *     property metphi_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetAbsoluteDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3043
 * 
 *     property met_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21met_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21met_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21met_JetAbsoluteyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21met_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3044
 *     property met_JetAbsoluteyearUp:
 *         def __get__(self):
 *             self.met_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetAbsoluteyearUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetAbsoluteyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3045
 *         def __get__(self):
 *             self.met_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetAbsoluteyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetAbsoluteyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3043
 * 
 *     property met_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetAbsoluteyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3048
 * 
 *     property metphi_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3049
 *     property metphi_JetAbsoluteyearUp:
 *         def __get__(self):
 *             self.metphi_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetAbsoluteyearUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetAbsoluteyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3050
 *         def __get__(self):
 *             self.metphi_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetAbsoluteyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetAbsoluteyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3048
 * 
 *     property metphi_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetAbsoluteyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3053
 * 
 *     property met_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23met_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23met_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23met_JetAbsoluteyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23met_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3054
 *     property met_JetAbsoluteyearDown:
 *         def __get__(self):
 *             self.met_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetAbsoluteyearDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetAbsoluteyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3055
 *         def __get__(self):
 *             self.met_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetAbsoluteyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetAbsoluteyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3053
 * 
 *     property met_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetAbsoluteyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetAbsoluteyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3058
 * 
 *     property metphi_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3059
 *     property metphi_JetAbsoluteyearDown:
 *         def __get__(self):
 *             self.metphi_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetAbsoluteyearDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetAbsoluteyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3060
 *         def __get__(self):
 *             self.metphi_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetBBEC1Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetAbsoluteyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3058
 * 
 *     property metphi_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetAbsoluteyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetAbsoluteyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3063
 * 
 *     property met_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_JetBBEC1Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_JetBBEC1Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14met_JetBBEC1Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14met_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3064
 *     property met_JetBBEC1Up:
 *         def __get__(self):
 *             self.met_JetBBEC1Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetBBEC1Up_value
 * 
 */
  (void)(__pyx_v_self->met_JetBBEC1Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3065
 *         def __get__(self):
 *             self.met_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Up_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetBBEC1Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetBBEC1Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3063
 * 
 *     property met_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetBBEC1Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3068
 * 
 *     property metphi_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_JetBBEC1Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_JetBBEC1Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17metphi_JetBBEC1Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3069
 *     property metphi_JetBBEC1Up:
 *         def __get__(self):
 *             self.metphi_JetBBEC1Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetBBEC1Up_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetBBEC1Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3070
 *         def __get__(self):
 *             self.metphi_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Up_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetBBEC1Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetBBEC1Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3068
 * 
 *     property metphi_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetBBEC1Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3073
 * 
 *     property met_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_JetBBEC1Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_JetBBEC1Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16met_JetBBEC1Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16met_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3074
 *     property met_JetBBEC1Down:
 *         def __get__(self):
 *             self.met_JetBBEC1Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetBBEC1Down_value
 * 
 */
  (void)(__pyx_v_self->met_JetBBEC1Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3075
 *         def __get__(self):
 *             self.met_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Down_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetBBEC1Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetBBEC1Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3073
 * 
 *     property met_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetBBEC1Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3078
 * 
 *     property metphi_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_JetBBEC1Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_JetBBEC1Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19metphi_JetBBEC1Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3079
 *     property metphi_JetBBEC1Down:
 *         def __get__(self):
 *             self.metphi_JetBBEC1Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetBBEC1Down_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetBBEC1Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3080
 *         def __get__(self):
 *             self.metphi_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Down_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetBBEC1yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetBBEC1Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3078
 * 
 *     property metphi_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetBBEC1Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3083
 * 
 *     property met_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18met_JetBBEC1yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3084
 *     property met_JetBBEC1yearUp:
 *         def __get__(self):
 *             self.met_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetBBEC1yearUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetBBEC1yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3085
 *         def __get__(self):
 *             self.met_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetBBEC1yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetBBEC1yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3083
 * 
 *     property met_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetBBEC1yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3088
 * 
 *     property metphi_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21metphi_JetBBEC1yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3089
 *     property metphi_JetBBEC1yearUp:
 *         def __get__(self):
 *             self.metphi_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetBBEC1yearUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetBBEC1yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3090
 *         def __get__(self):
 *             self.metphi_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetBBEC1yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetBBEC1yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3088
 * 
 *     property metphi_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetBBEC1yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3093
 * 
 *     property met_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20met_JetBBEC1yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3094
 *     property met_JetBBEC1yearDown:
 *         def __get__(self):
 *             self.met_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetBBEC1yearDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetBBEC1yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3095
 *         def __get__(self):
 *             self.met_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetBBEC1yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetBBEC1yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3093
 * 
 *     property met_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetBBEC1yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetBBEC1yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3098
 * 
 *     property metphi_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23metphi_JetBBEC1yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3099
 *     property metphi_JetBBEC1yearDown:
 *         def __get__(self):
 *             self.metphi_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetBBEC1yearDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetBBEC1yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3100
 *         def __get__(self):
 *             self.metphi_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetEC2Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetBBEC1yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3098
 * 
 *     property metphi_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetBBEC1yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetBBEC1yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3103
 * 
 *     property met_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12met_JetEC2Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12met_JetEC2Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12met_JetEC2Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12met_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3104
 *     property met_JetEC2Up:
 *         def __get__(self):
 *             self.met_JetEC2Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetEC2Up_value
 * 
 */
  (void)(__pyx_v_self->met_JetEC2Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3105
 *         def __get__(self):
 *             self.met_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Up_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetEC2Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetEC2Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3103
 * 
 *     property met_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetEC2Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3108
 * 
 *     property metphi_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15metphi_JetEC2Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15metphi_JetEC2Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15metphi_JetEC2Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15metphi_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3109
 *     property metphi_JetEC2Up:
 *         def __get__(self):
 *             self.metphi_JetEC2Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetEC2Up_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetEC2Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3110
 *         def __get__(self):
 *             self.metphi_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Up_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetEC2Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetEC2Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3108
 * 
 *     property metphi_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetEC2Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3113
 * 
 *     property met_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_JetEC2Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_JetEC2Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14met_JetEC2Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14met_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3114
 *     property met_JetEC2Down:
 *         def __get__(self):
 *             self.met_JetEC2Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetEC2Down_value
 * 
 */
  (void)(__pyx_v_self->met_JetEC2Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3115
 *         def __get__(self):
 *             self.met_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Down_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetEC2Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetEC2Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3113
 * 
 *     property met_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetEC2Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3118
 * 
 *     property metphi_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_JetEC2Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_JetEC2Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17metphi_JetEC2Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3119
 *     property metphi_JetEC2Down:
 *         def __get__(self):
 *             self.metphi_JetEC2Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetEC2Down_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetEC2Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3120
 *         def __get__(self):
 *             self.metphi_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Down_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetEC2yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetEC2Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3118
 * 
 *     property metphi_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetEC2Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3123
 * 
 *     property met_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_JetEC2yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_JetEC2yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16met_JetEC2yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16met_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3124
 *     property met_JetEC2yearUp:
 *         def __get__(self):
 *             self.met_JetEC2yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetEC2yearUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetEC2yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3125
 *         def __get__(self):
 *             self.met_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetEC2yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetEC2yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3123
 * 
 *     property met_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetEC2yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3128
 * 
 *     property metphi_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_JetEC2yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_JetEC2yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19metphi_JetEC2yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3129
 *     property metphi_JetEC2yearUp:
 *         def __get__(self):
 *             self.metphi_JetEC2yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetEC2yearUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetEC2yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3130
 *         def __get__(self):
 *             self.metphi_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetEC2yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetEC2yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3128
 * 
 *     property metphi_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetEC2yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3133
 * 
 *     property met_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetEC2yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetEC2yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18met_JetEC2yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3134
 *     property met_JetEC2yearDown:
 *         def __get__(self):
 *             self.met_JetEC2yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetEC2yearDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetEC2yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3135
 *         def __get__(self):
 *             self.met_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetEC2yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetEC2yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3133
 * 
 *     property met_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetEC2yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetEC2yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3138
 * 
 *     property metphi_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetEC2yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetEC2yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21metphi_JetEC2yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3139
 *     property metphi_JetEC2yearDown:
 *         def __get__(self):
 *             self.metphi_JetEC2yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetEC2yearDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetEC2yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3140
 *         def __get__(self):
 *             self.metphi_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetFlavorQCDUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetEC2yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3138
 * 
 *     property metphi_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetEC2yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetEC2yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3143
 * 
 *     property met_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18met_JetFlavorQCDUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18met_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3144
 *     property met_JetFlavorQCDUp:
 *         def __get__(self):
 *             self.met_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetFlavorQCDUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetFlavorQCDUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3145
 *         def __get__(self):
 *             self.met_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetFlavorQCDUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetFlavorQCDUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3143
 * 
 *     property met_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetFlavorQCDUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3148
 * 
 *     property metphi_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21metphi_JetFlavorQCDUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3149
 *     property metphi_JetFlavorQCDUp:
 *         def __get__(self):
 *             self.metphi_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetFlavorQCDUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetFlavorQCDUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3150
 *         def __get__(self):
 *             self.metphi_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetFlavorQCDDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetFlavorQCDUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3148
 * 
 *     property metphi_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetFlavorQCDUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3153
 * 
 *     property met_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20met_JetFlavorQCDDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3154
 *     property met_JetFlavorQCDDown:
 *         def __get__(self):
 *             self.met_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetFlavorQCDDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetFlavorQCDDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3155
 *         def __get__(self):
 *             self.met_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetFlavorQCDDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetFlavorQCDDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3153
 * 
 *     property met_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetFlavorQCDDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetFlavorQCDDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3158
 * 
 *     property metphi_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23metphi_JetFlavorQCDDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3159
 *     property metphi_JetFlavorQCDDown:
 *         def __get__(self):
 *             self.metphi_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetFlavorQCDDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetFlavorQCDDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3160
 *         def __get__(self):
 *             self.metphi_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetHFUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetFlavorQCDDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3158
 * 
 *     property metphi_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetFlavorQCDDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetFlavorQCDDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3163
 * 
 *     property met_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_JetHFUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_JetHFUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11met_JetHFUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11met_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3164
 *     property met_JetHFUp:
 *         def __get__(self):
 *             self.met_JetHFUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetHFUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetHFUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3165
 *         def __get__(self):
 *             self.met_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetHFUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetHFUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3163
 * 
 *     property met_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetHFUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3168
 * 
 *     property metphi_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_JetHFUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_JetHFUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14metphi_JetHFUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3169
 *     property metphi_JetHFUp:
 *         def __get__(self):
 *             self.metphi_JetHFUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetHFUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetHFUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3170
 *         def __get__(self):
 *             self.metphi_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetHFDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetHFUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3168
 * 
 *     property metphi_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetHFUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3173
 * 
 *     property met_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13met_JetHFDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13met_JetHFDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13met_JetHFDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13met_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3174
 *     property met_JetHFDown:
 *         def __get__(self):
 *             self.met_JetHFDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetHFDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetHFDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3175
 *         def __get__(self):
 *             self.met_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetHFDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetHFDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3173
 * 
 *     property met_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetHFDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3178
 * 
 *     property metphi_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16metphi_JetHFDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16metphi_JetHFDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16metphi_JetHFDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16metphi_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3179
 *     property metphi_JetHFDown:
 *         def __get__(self):
 *             self.metphi_JetHFDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetHFDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetHFDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3180
 *         def __get__(self):
 *             self.metphi_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetHFyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetHFDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3178
 * 
 *     property metphi_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetHFDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3183
 * 
 *     property met_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15met_JetHFyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15met_JetHFyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15met_JetHFyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15met_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3184
 *     property met_JetHFyearUp:
 *         def __get__(self):
 *             self.met_JetHFyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetHFyearUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetHFyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3185
 *         def __get__(self):
 *             self.met_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetHFyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetHFyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3183
 * 
 *     property met_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetHFyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3188
 * 
 *     property metphi_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18metphi_JetHFyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18metphi_JetHFyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18metphi_JetHFyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18metphi_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3189
 *     property metphi_JetHFyearUp:
 *         def __get__(self):
 *             self.metphi_JetHFyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetHFyearUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetHFyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3190
 *         def __get__(self):
 *             self.metphi_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetHFyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetHFyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3188
 * 
 *     property metphi_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetHFyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3193
 * 
 *     property met_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17met_JetHFyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17met_JetHFyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17met_JetHFyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17met_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3194
 *     property met_JetHFyearDown:
 *         def __get__(self):
 *             self.met_JetHFyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetHFyearDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetHFyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3195
 *         def __get__(self):
 *             self.met_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetHFyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetHFyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3193
 * 
 *     property met_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetHFyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetHFyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3198
 * 
 *     property metphi_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20metphi_JetHFyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20metphi_JetHFyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20metphi_JetHFyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20metphi_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3199
 *     property metphi_JetHFyearDown:
 *         def __get__(self):
 *             self.metphi_JetHFyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetHFyearDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetHFyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3200
 *         def __get__(self):
 *             self.metphi_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetRelativeBalUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetHFyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3198
 * 
 *     property metphi_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetHFyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetHFyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3203
 * 
 *     property met_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20met_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20met_JetRelativeBalUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20met_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3204
 *     property met_JetRelativeBalUp:
 *         def __get__(self):
 *             self.met_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetRelativeBalUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetRelativeBalUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3205
 *         def __get__(self):
 *             self.met_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetRelativeBalUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetRelativeBalUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3203
 * 
 *     property met_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetRelativeBalUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3208
 * 
 *     property metphi_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23metphi_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23metphi_JetRelativeBalUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23metphi_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3209
 *     property metphi_JetRelativeBalUp:
 *         def __get__(self):
 *             self.metphi_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetRelativeBalUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetRelativeBalUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3210
 *         def __get__(self):
 *             self.metphi_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetRelativeBalDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetRelativeBalUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3208
 * 
 *     property metphi_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetRelativeBalUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3213
 * 
 *     property met_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22met_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22met_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22met_JetRelativeBalDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22met_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3214
 *     property met_JetRelativeBalDown:
 *         def __get__(self):
 *             self.met_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetRelativeBalDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetRelativeBalDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3215
 *         def __get__(self):
 *             self.met_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetRelativeBalDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetRelativeBalDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3213
 * 
 *     property met_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeBalDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetRelativeBalDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3218
 * 
 *     property metphi_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_25metphi_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_25metphi_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_25metphi_JetRelativeBalDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_25metphi_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3219
 *     property metphi_JetRelativeBalDown:
 *         def __get__(self):
 *             self.metphi_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetRelativeBalDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetRelativeBalDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3220
 *         def __get__(self):
 *             self.metphi_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetRelativeSampleUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetRelativeBalDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3218
 * 
 *     property metphi_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeBalDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetRelativeBalDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3223
 * 
 *     property met_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23met_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23met_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23met_JetRelativeSampleUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23met_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3224
 *     property met_JetRelativeSampleUp:
 *         def __get__(self):
 *             self.met_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetRelativeSampleUp_value
 * 
 */
  (void)(__pyx_v_self->met_JetRelativeSampleUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3225
 *         def __get__(self):
 *             self.met_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetRelativeSampleUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetRelativeSampleUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3223
 * 
 *     property met_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetRelativeSampleUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3228
 * 
 *     property metphi_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_26metphi_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_26metphi_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_26metphi_JetRelativeSampleUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_26metphi_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3229
 *     property metphi_JetRelativeSampleUp:
 *         def __get__(self):
 *             self.metphi_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetRelativeSampleUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetRelativeSampleUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3230
 *         def __get__(self):
 *             self.metphi_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JetRelativeSampleDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetRelativeSampleUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3228
 * 
 *     property metphi_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetRelativeSampleUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3233
 * 
 *     property met_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_25met_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_25met_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_25met_JetRelativeSampleDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_25met_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3234
 *     property met_JetRelativeSampleDown:
 *         def __get__(self):
 *             self.met_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JetRelativeSampleDown_value
 * 
 */
  (void)(__pyx_v_self->met_JetRelativeSampleDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3235
 *         def __get__(self):
 *             self.met_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JetRelativeSampleDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JetRelativeSampleDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3233
 * 
 *     property met_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JetRelativeSampleDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JetRelativeSampleDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3238
 * 
 *     property metphi_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_28metphi_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_28metphi_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_28metphi_JetRelativeSampleDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_28metphi_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3239
 *     property metphi_JetRelativeSampleDown:
 *         def __get__(self):
 *             self.metphi_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JetRelativeSampleDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JetRelativeSampleDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3240
 *         def __get__(self):
 *             self.metphi_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JERUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JetRelativeSampleDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3238
 * 
 *     property metphi_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JetRelativeSampleDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JetRelativeSampleDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3243
 * 
 *     property met_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9met_JERUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9met_JERUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9met_JERUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9met_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3244
 *     property met_JERUp:
 *         def __get__(self):
 *             self.met_JERUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JERUp_value
 * 
 */
  (void)(__pyx_v_self->met_JERUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3245
 *         def __get__(self):
 *             self.met_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JERUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JERUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3243
 * 
 *     property met_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JERUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3248
 * 
 *     property metphi_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12metphi_JERUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12metphi_JERUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12metphi_JERUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12metphi_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3249
 *     property metphi_JERUp:
 *         def __get__(self):
 *             self.metphi_JERUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JERUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_JERUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3250
 *         def __get__(self):
 *             self.metphi_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_JERDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JERUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3248
 * 
 *     property metphi_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JERUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3253
 * 
 *     property met_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_JERDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11met_JERDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11met_JERDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11met_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3254
 *     property met_JERDown:
 *         def __get__(self):
 *             self.met_JERDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_JERDown_value
 * 
 */
  (void)(__pyx_v_self->met_JERDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3255
 *         def __get__(self):
 *             self.met_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_JERDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_JERDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3253
 * 
 *     property met_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_JERDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_JERDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3258
 * 
 *     property metphi_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_JERDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14metphi_JERDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14metphi_JERDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14metphi_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3259
 *     property metphi_JERDown:
 *         def __get__(self):
 *             self.metphi_JERDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_JERDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_JERDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3260
 *         def __get__(self):
 *             self.metphi_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_responseUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_JERDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3258
 * 
 *     property metphi_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_JERDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_JERDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3263
 * 
 *     property met_responseUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_responseUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14met_responseUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14met_responseUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14met_responseUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3264
 *     property met_responseUp:
 *         def __get__(self):
 *             self.met_responseUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_responseUp_value
 * 
 */
  (void)(__pyx_v_self->met_responseUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3265
 *         def __get__(self):
 *             self.met_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_responseDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_responseUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3263
 * 
 *     property met_responseUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_responseUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3268
 * 
 *     property met_responseDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_responseDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_responseDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16met_responseDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16met_responseDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3269
 *     property met_responseDown:
 *         def __get__(self):
 *             self.met_responseDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_responseDown_value
 * 
 */
  (void)(__pyx_v_self->met_responseDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3270
 *         def __get__(self):
 *             self.met_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseDown_value             # <<<<<<<<<<<<<<
 * 
 *     property met_resolutionUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_responseDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3268
 * 
 *     property met_responseDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_responseDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_responseDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3273
 * 
 *     property met_resolutionUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_resolutionUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16met_resolutionUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16met_resolutionUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16met_resolutionUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3274
 *     property met_resolutionUp:
 *         def __get__(self):
 *             self.met_resolutionUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_resolutionUp_value
 * 
 */
  (void)(__pyx_v_self->met_resolutionUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3275
 *         def __get__(self):
 *             self.met_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionUp_value             # <<<<<<<<<<<<<<
 * 
 *     property met_resolutionDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_resolutionUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3273
 * 
 *     property met_resolutionUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_resolutionUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3278
 * 
 *     property met_resolutionDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_resolutionDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18met_resolutionDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18met_resolutionDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18met_resolutionDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3279
 *     property met_resolutionDown:
 *         def __get__(self):
 *             self.met_resolutionDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.met_resolutionDown_value
 * 
 */
  (void)(__pyx_v_self->met_resolutionDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3280
 *         def __get__(self):
 *             self.met_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_responseUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->met_resolutionDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3278
 * 
 *     property met_resolutionDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.met_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.met_resolutionDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.met_resolutionDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3283
 * 
 *     property metphi_responseUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_responseUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17metphi_responseUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17metphi_responseUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17metphi_responseUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3284
 *     property metphi_responseUp:
 *         def __get__(self):
 *             self.metphi_responseUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_responseUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_responseUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3285
 *         def __get__(self):
 *             self.metphi_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_responseDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_responseUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3283
 * 
 *     property metphi_responseUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_responseUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_responseUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3288
 * 
 *     property metphi_responseDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_responseDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_responseDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19metphi_responseDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_responseDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3289
 *     property metphi_responseDown:
 *         def __get__(self):
 *             self.metphi_responseDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_responseDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_responseDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3290
 *         def __get__(self):
 *             self.metphi_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseDown_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_resolutionUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_responseDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3288
 * 
 *     property metphi_responseDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_responseDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_responseDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_responseDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3293
 * 
 *     property metphi_resolutionUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_resolutionUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19metphi_resolutionUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19metphi_resolutionUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19metphi_resolutionUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3294
 *     property metphi_resolutionUp:
 *         def __get__(self):
 *             self.metphi_resolutionUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_resolutionUp_value
 * 
 */
  (void)(__pyx_v_self->metphi_resolutionUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3295
 *         def __get__(self):
 *             self.metphi_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionUp_value             # <<<<<<<<<<<<<<
 * 
 *     property metphi_resolutionDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_resolutionUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3293
 * 
 *     property metphi_resolutionUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_resolutionUp_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_resolutionUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3298
 * 
 *     property metphi_resolutionDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_resolutionDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21metphi_resolutionDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21metphi_resolutionDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21metphi_resolutionDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3299
 *     property metphi_resolutionDown:
 *         def __get__(self):
 *             self.metphi_resolutionDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.metphi_resolutionDown_value
 * 
 */
  (void)(__pyx_v_self->metphi_resolutionDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3300
 *         def __get__(self):
 *             self.metphi_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->metphi_resolutionDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3298
 * 
 *     property metphi_resolutionDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.metphi_resolutionDown_branch.GetEntry(self.localentry, 0)
 *             return self.metphi_resolutionDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.metphi_resolutionDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3303
 * 
 *     property mjj:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_3mjj_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_3mjj_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_3mjj___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_3mjj___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3304
 *     property mjj:
 *         def __get__(self):
 *             self.mjj_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_value
 * 
 */
  (void)(__pyx_v_self->mjj_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3305
 *         def __get__(self):
 *             self.mjj_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetAbsoluteUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3303
 * 
 *     property mjj:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3308
 * 
 *     property mjj_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17mjj_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17mjj_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17mjj_JetAbsoluteUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17mjj_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3309
 *     property mjj_JetAbsoluteUp:
 *         def __get__(self):
 *             self.mjj_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetAbsoluteUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetAbsoluteUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3310
 *         def __get__(self):
 *             self.mjj_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetAbsoluteDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetAbsoluteUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3308
 * 
 *     property mjj_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetAbsoluteUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3313
 * 
 *     property mjj_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19mjj_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19mjj_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19mjj_JetAbsoluteDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19mjj_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3314
 *     property mjj_JetAbsoluteDown:
 *         def __get__(self):
 *             self.mjj_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetAbsoluteDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetAbsoluteDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3315
 *         def __get__(self):
 *             self.mjj_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetAbsoluteyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetAbsoluteDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3313
 * 
 *     property mjj_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetAbsoluteDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3318
 * 
 *     property mjj_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3319
 *     property mjj_JetAbsoluteyearUp:
 *         def __get__(self):
 *             self.mjj_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetAbsoluteyearUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetAbsoluteyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3320
 *         def __get__(self):
 *             self.mjj_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetAbsoluteyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetAbsoluteyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3318
 * 
 *     property mjj_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetAbsoluteyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3323
 * 
 *     property mjj_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3324
 *     property mjj_JetAbsoluteyearDown:
 *         def __get__(self):
 *             self.mjj_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetAbsoluteyearDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetAbsoluteyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3325
 *         def __get__(self):
 *             self.mjj_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetBBEC1Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetAbsoluteyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3323
 * 
 *     property mjj_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetAbsoluteyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetAbsoluteyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3328
 * 
 *     property mjj_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14mjj_JetBBEC1Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14mjj_JetBBEC1Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14mjj_JetBBEC1Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14mjj_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3329
 *     property mjj_JetBBEC1Up:
 *         def __get__(self):
 *             self.mjj_JetBBEC1Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetBBEC1Up_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetBBEC1Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3330
 *         def __get__(self):
 *             self.mjj_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Up_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetBBEC1Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetBBEC1Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3328
 * 
 *     property mjj_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetBBEC1Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3333
 * 
 *     property mjj_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16mjj_JetBBEC1Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16mjj_JetBBEC1Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16mjj_JetBBEC1Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16mjj_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3334
 *     property mjj_JetBBEC1Down:
 *         def __get__(self):
 *             self.mjj_JetBBEC1Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetBBEC1Down_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetBBEC1Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3335
 *         def __get__(self):
 *             self.mjj_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Down_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetBBEC1yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetBBEC1Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3333
 * 
 *     property mjj_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetBBEC1Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3338
 * 
 *     property mjj_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18mjj_JetBBEC1yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3339
 *     property mjj_JetBBEC1yearUp:
 *         def __get__(self):
 *             self.mjj_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetBBEC1yearUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetBBEC1yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3340
 *         def __get__(self):
 *             self.mjj_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetBBEC1yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetBBEC1yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3338
 * 
 *     property mjj_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetBBEC1yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3343
 * 
 *     property mjj_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20mjj_JetBBEC1yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3344
 *     property mjj_JetBBEC1yearDown:
 *         def __get__(self):
 *             self.mjj_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetBBEC1yearDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetBBEC1yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3345
 *         def __get__(self):
 *             self.mjj_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetEC2Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetBBEC1yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3343
 * 
 *     property mjj_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetBBEC1yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetBBEC1yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3348
 * 
 *     property mjj_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12mjj_JetEC2Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12mjj_JetEC2Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12mjj_JetEC2Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12mjj_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3349
 *     property mjj_JetEC2Up:
 *         def __get__(self):
 *             self.mjj_JetEC2Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetEC2Up_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetEC2Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3350
 *         def __get__(self):
 *             self.mjj_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Up_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetEC2Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetEC2Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3348
 * 
 *     property mjj_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetEC2Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3353
 * 
 *     property mjj_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14mjj_JetEC2Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14mjj_JetEC2Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14mjj_JetEC2Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14mjj_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3354
 *     property mjj_JetEC2Down:
 *         def __get__(self):
 *             self.mjj_JetEC2Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetEC2Down_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetEC2Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3355
 *         def __get__(self):
 *             self.mjj_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Down_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetEC2yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetEC2Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3353
 * 
 *     property mjj_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetEC2Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3358
 * 
 *     property mjj_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16mjj_JetEC2yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16mjj_JetEC2yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16mjj_JetEC2yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16mjj_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3359
 *     property mjj_JetEC2yearUp:
 *         def __get__(self):
 *             self.mjj_JetEC2yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetEC2yearUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetEC2yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3360
 *         def __get__(self):
 *             self.mjj_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetEC2yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetEC2yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3358
 * 
 *     property mjj_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetEC2yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3363
 * 
 *     property mjj_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetEC2yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetEC2yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18mjj_JetEC2yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3364
 *     property mjj_JetEC2yearDown:
 *         def __get__(self):
 *             self.mjj_JetEC2yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetEC2yearDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetEC2yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3365
 *         def __get__(self):
 *             self.mjj_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetFlavorQCDUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetEC2yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3363
 * 
 *     property mjj_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetEC2yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetEC2yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3368
 * 
 *     property mjj_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18mjj_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18mjj_JetFlavorQCDUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18mjj_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3369
 *     property mjj_JetFlavorQCDUp:
 *         def __get__(self):
 *             self.mjj_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetFlavorQCDUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetFlavorQCDUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3370
 *         def __get__(self):
 *             self.mjj_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetFlavorQCDDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetFlavorQCDUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3368
 * 
 *     property mjj_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetFlavorQCDUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3373
 * 
 *     property mjj_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20mjj_JetFlavorQCDDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3374
 *     property mjj_JetFlavorQCDDown:
 *         def __get__(self):
 *             self.mjj_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetFlavorQCDDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetFlavorQCDDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3375
 *         def __get__(self):
 *             self.mjj_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetHFUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetFlavorQCDDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3373
 * 
 *     property mjj_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetFlavorQCDDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetFlavorQCDDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3378
 * 
 *     property mjj_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11mjj_JetHFUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11mjj_JetHFUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11mjj_JetHFUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11mjj_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3379
 *     property mjj_JetHFUp:
 *         def __get__(self):
 *             self.mjj_JetHFUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetHFUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetHFUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3380
 *         def __get__(self):
 *             self.mjj_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetHFDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetHFUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3378
 * 
 *     property mjj_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetHFUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3383
 * 
 *     property mjj_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13mjj_JetHFDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13mjj_JetHFDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13mjj_JetHFDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13mjj_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3384
 *     property mjj_JetHFDown:
 *         def __get__(self):
 *             self.mjj_JetHFDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetHFDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetHFDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3385
 *         def __get__(self):
 *             self.mjj_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetHFyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetHFDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3383
 * 
 *     property mjj_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetHFDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3388
 * 
 *     property mjj_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15mjj_JetHFyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15mjj_JetHFyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15mjj_JetHFyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15mjj_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3389
 *     property mjj_JetHFyearUp:
 *         def __get__(self):
 *             self.mjj_JetHFyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetHFyearUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetHFyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3390
 *         def __get__(self):
 *             self.mjj_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetHFyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetHFyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3388
 * 
 *     property mjj_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetHFyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3393
 * 
 *     property mjj_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17mjj_JetHFyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17mjj_JetHFyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17mjj_JetHFyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17mjj_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3394
 *     property mjj_JetHFyearDown:
 *         def __get__(self):
 *             self.mjj_JetHFyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetHFyearDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetHFyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3395
 *         def __get__(self):
 *             self.mjj_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetRelativeBalUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetHFyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3393
 * 
 *     property mjj_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetHFyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetHFyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3398
 * 
 *     property mjj_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20mjj_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20mjj_JetRelativeBalUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20mjj_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3399
 *     property mjj_JetRelativeBalUp:
 *         def __get__(self):
 *             self.mjj_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetRelativeBalUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetRelativeBalUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3400
 *         def __get__(self):
 *             self.mjj_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetRelativeBalDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetRelativeBalUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3398
 * 
 *     property mjj_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetRelativeBalUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3403
 * 
 *     property mjj_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22mjj_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22mjj_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22mjj_JetRelativeBalDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22mjj_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3404
 *     property mjj_JetRelativeBalDown:
 *         def __get__(self):
 *             self.mjj_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetRelativeBalDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetRelativeBalDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3405
 *         def __get__(self):
 *             self.mjj_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetRelativeSampleUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetRelativeBalDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3403
 * 
 *     property mjj_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeBalDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetRelativeBalDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3408
 * 
 *     property mjj_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23mjj_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23mjj_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23mjj_JetRelativeSampleUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23mjj_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3409
 *     property mjj_JetRelativeSampleUp:
 *         def __get__(self):
 *             self.mjj_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetRelativeSampleUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetRelativeSampleUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3410
 *         def __get__(self):
 *             self.mjj_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JetRelativeSampleDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetRelativeSampleUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3408
 * 
 *     property mjj_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetRelativeSampleUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3413
 * 
 *     property mjj_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_25mjj_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_25mjj_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_25mjj_JetRelativeSampleDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_25mjj_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3414
 *     property mjj_JetRelativeSampleDown:
 *         def __get__(self):
 *             self.mjj_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JetRelativeSampleDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JetRelativeSampleDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3415
 *         def __get__(self):
 *             self.mjj_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleDown_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JERUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JetRelativeSampleDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3413
 * 
 *     property mjj_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JetRelativeSampleDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JetRelativeSampleDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3418
 * 
 *     property mjj_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9mjj_JERUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9mjj_JERUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9mjj_JERUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9mjj_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3419
 *     property mjj_JERUp:
 *         def __get__(self):
 *             self.mjj_JERUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JERUp_value
 * 
 */
  (void)(__pyx_v_self->mjj_JERUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3420
 *         def __get__(self):
 *             self.mjj_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERUp_value             # <<<<<<<<<<<<<<
 * 
 *     property mjj_JERDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JERUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3418
 * 
 *     property mjj_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JERUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3423
 * 
 *     property mjj_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11mjj_JERDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11mjj_JERDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11mjj_JERDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11mjj_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3424
 *     property mjj_JERDown:
 *         def __get__(self):
 *             self.mjj_JERDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.mjj_JERDown_value
 * 
 */
  (void)(__pyx_v_self->mjj_JERDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3425
 *         def __get__(self):
 *             self.mjj_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERDown_value             # <<<<<<<<<<<<<<
 * 
 *     property gen_match_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->mjj_JERDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3423
 * 
 *     property mjj_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.mjj_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.mjj_JERDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.mjj_JERDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3428
 * 
 *     property gen_match_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_match_1_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11gen_match_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11gen_match_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11gen_match_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11gen_match_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3429
 *     property gen_match_1:
 *         def __get__(self):
 *             self.gen_match_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.gen_match_1_value
 * 
 */
  (void)(__pyx_v_self->gen_match_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3430
 *         def __get__(self):
 *             self.gen_match_1_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_1_value             # <<<<<<<<<<<<<<
 * 
 *     property gen_match_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->gen_match_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3428
 * 
 *     property gen_match_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_match_1_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.gen_match_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3433
 * 
 *     property gen_match_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_match_2_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11gen_match_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11gen_match_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11gen_match_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11gen_match_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3434
 *     property gen_match_2:
 *         def __get__(self):
 *             self.gen_match_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.gen_match_2_value
 * 
 */
  (void)(__pyx_v_self->gen_match_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3435
 *         def __get__(self):
 *             self.gen_match_2_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_2_value             # <<<<<<<<<<<<<<
 * 
 *     property nbtag:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->gen_match_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3433
 * 
 *     property gen_match_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_match_2_branch.GetEntry(self.localentry, 0)
 *             return self.gen_match_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.gen_match_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3438
 * 
 *     property nbtag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.nbtag_branch.GetEntry(self.localentry, 0)
 *             return self.nbtag_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5nbtag_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5nbtag_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5nbtag___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5nbtag___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3439
 *     property nbtag:
 *         def __get__(self):
 *             self.nbtag_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.nbtag_value
 * 
 */
  (void)(__pyx_v_self->nbtag_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3440
 *         def __get__(self):
 *             self.nbtag_branch.GetEntry(self.localentry, 0)
 *             return self.nbtag_value             # <<<<<<<<<<<<<<
 * 
 *     property nbtagL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nbtag_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3438
 * 
 *     property nbtag:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.nbtag_branch.GetEntry(self.localentry, 0)
 *             return self.nbtag_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.nbtag.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3443
 * 
 *     property nbtagL:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.nbtagL_branch.GetEntry(self.localentry, 0)
 *             return self.nbtagL_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6nbtagL_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6nbtagL_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6nbtagL___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6nbtagL___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3444
 *     property nbtagL:
 *         def __get__(self):
 *             self.nbtagL_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.nbtagL_value
 * 
 */
  (void)(__pyx_v_self->nbtagL_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3445
 *         def __get__(self):
 *             self.nbtagL_branch.GetEntry(self.localentry, 0)
 *             return self.nbtagL_value             # <<<<<<<<<<<<<<
 * 
 *     property njets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->nbtagL_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3443
 * 
 *     property nbtagL:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.nbtagL_branch.GetEntry(self.localentry, 0)
 *             return self.nbtagL_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.nbtagL.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3448
 * 
 *     property njets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_branch.GetEntry(self.localentry, 0)
 *             return self.njets_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5njets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5njets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5njets___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5njets___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3449
 *     property njets:
 *         def __get__(self):
 *             self.njets_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_value
 * 
 */
  (void)(__pyx_v_self->njets_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3450
 *         def __get__(self):
 *             self.njets_branch.GetEntry(self.localentry, 0)
 *             return self.njets_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetAbsoluteUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3448
 * 
 *     property njets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_branch.GetEntry(self.localentry, 0)
 *             return self.njets_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3453
 * 
 *     property njets_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19njets_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19njets_JetAbsoluteUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19njets_JetAbsoluteUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19njets_JetAbsoluteUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3454
 *     property njets_JetAbsoluteUp:
 *         def __get__(self):
 *             self.njets_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetAbsoluteUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetAbsoluteUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3455
 *         def __get__(self):
 *             self.njets_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetAbsoluteDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetAbsoluteUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3453
 * 
 *     property njets_JetAbsoluteUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetAbsoluteUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3458
 * 
 *     property njets_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_21njets_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_21njets_JetAbsoluteDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_21njets_JetAbsoluteDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_21njets_JetAbsoluteDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3459
 *     property njets_JetAbsoluteDown:
 *         def __get__(self):
 *             self.njets_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetAbsoluteDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetAbsoluteDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3460
 *         def __get__(self):
 *             self.njets_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetAbsoluteyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetAbsoluteDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3458
 * 
 *     property njets_JetAbsoluteDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetAbsoluteDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3463
 * 
 *     property njets_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_23njets_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_23njets_JetAbsoluteyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_23njets_JetAbsoluteyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_23njets_JetAbsoluteyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3464
 *     property njets_JetAbsoluteyearUp:
 *         def __get__(self):
 *             self.njets_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetAbsoluteyearUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetAbsoluteyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3465
 *         def __get__(self):
 *             self.njets_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetAbsoluteyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetAbsoluteyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3463
 * 
 *     property njets_JetAbsoluteyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetAbsoluteyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3468
 * 
 *     property njets_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_25njets_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_25njets_JetAbsoluteyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_25njets_JetAbsoluteyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_25njets_JetAbsoluteyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3469
 *     property njets_JetAbsoluteyearDown:
 *         def __get__(self):
 *             self.njets_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetAbsoluteyearDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetAbsoluteyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3470
 *         def __get__(self):
 *             self.njets_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetBBEC1Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetAbsoluteyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3468
 * 
 *     property njets_JetAbsoluteyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetAbsoluteyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetAbsoluteyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetAbsoluteyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3473
 * 
 *     property njets_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16njets_JetBBEC1Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16njets_JetBBEC1Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16njets_JetBBEC1Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16njets_JetBBEC1Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3474
 *     property njets_JetBBEC1Up:
 *         def __get__(self):
 *             self.njets_JetBBEC1Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetBBEC1Up_value
 * 
 */
  (void)(__pyx_v_self->njets_JetBBEC1Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3475
 *         def __get__(self):
 *             self.njets_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Up_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetBBEC1Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetBBEC1Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3473
 * 
 *     property njets_JetBBEC1Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetBBEC1Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3478
 * 
 *     property njets_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18njets_JetBBEC1Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18njets_JetBBEC1Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18njets_JetBBEC1Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18njets_JetBBEC1Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3479
 *     property njets_JetBBEC1Down:
 *         def __get__(self):
 *             self.njets_JetBBEC1Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetBBEC1Down_value
 * 
 */
  (void)(__pyx_v_self->njets_JetBBEC1Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3480
 *         def __get__(self):
 *             self.njets_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Down_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetBBEC1yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetBBEC1Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3478
 * 
 *     property njets_JetBBEC1Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetBBEC1Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3483
 * 
 *     property njets_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetBBEC1yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20njets_JetBBEC1yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetBBEC1yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3484
 *     property njets_JetBBEC1yearUp:
 *         def __get__(self):
 *             self.njets_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetBBEC1yearUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetBBEC1yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3485
 *         def __get__(self):
 *             self.njets_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetBBEC1yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetBBEC1yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3483
 * 
 *     property njets_JetBBEC1yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetBBEC1yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3488
 * 
 *     property njets_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetBBEC1yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22njets_JetBBEC1yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetBBEC1yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3489
 *     property njets_JetBBEC1yearDown:
 *         def __get__(self):
 *             self.njets_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetBBEC1yearDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetBBEC1yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3490
 *         def __get__(self):
 *             self.njets_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetEC2Up:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetBBEC1yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3488
 * 
 *     property njets_JetBBEC1yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetBBEC1yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetBBEC1yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetBBEC1yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3493
 * 
 *     property njets_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Up_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14njets_JetEC2Up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14njets_JetEC2Up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14njets_JetEC2Up___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14njets_JetEC2Up___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3494
 *     property njets_JetEC2Up:
 *         def __get__(self):
 *             self.njets_JetEC2Up_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetEC2Up_value
 * 
 */
  (void)(__pyx_v_self->njets_JetEC2Up_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3495
 *         def __get__(self):
 *             self.njets_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Up_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetEC2Down:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetEC2Up_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3493
 * 
 *     property njets_JetEC2Up:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2Up_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Up_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetEC2Up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3498
 * 
 *     property njets_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Down_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_16njets_JetEC2Down_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_16njets_JetEC2Down_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_16njets_JetEC2Down___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_16njets_JetEC2Down___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3499
 *     property njets_JetEC2Down:
 *         def __get__(self):
 *             self.njets_JetEC2Down_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetEC2Down_value
 * 
 */
  (void)(__pyx_v_self->njets_JetEC2Down_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3500
 *         def __get__(self):
 *             self.njets_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Down_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetEC2yearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetEC2Down_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3498
 * 
 *     property njets_JetEC2Down:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2Down_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2Down_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetEC2Down.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3503
 * 
 *     property njets_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_18njets_JetEC2yearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_18njets_JetEC2yearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_18njets_JetEC2yearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_18njets_JetEC2yearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3504
 *     property njets_JetEC2yearUp:
 *         def __get__(self):
 *             self.njets_JetEC2yearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetEC2yearUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetEC2yearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3505
 *         def __get__(self):
 *             self.njets_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetEC2yearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetEC2yearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3503
 * 
 *     property njets_JetEC2yearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2yearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetEC2yearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3508
 * 
 *     property njets_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetEC2yearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetEC2yearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20njets_JetEC2yearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetEC2yearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3509
 *     property njets_JetEC2yearDown:
 *         def __get__(self):
 *             self.njets_JetEC2yearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetEC2yearDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetEC2yearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3510
 *         def __get__(self):
 *             self.njets_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetFlavorQCDUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetEC2yearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3508
 * 
 *     property njets_JetEC2yearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetEC2yearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetEC2yearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetEC2yearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3513
 * 
 *     property njets_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_20njets_JetFlavorQCDUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_20njets_JetFlavorQCDUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_20njets_JetFlavorQCDUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3514
 *     property njets_JetFlavorQCDUp:
 *         def __get__(self):
 *             self.njets_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetFlavorQCDUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetFlavorQCDUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3515
 *         def __get__(self):
 *             self.njets_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetFlavorQCDDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetFlavorQCDUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3513
 * 
 *     property njets_JetFlavorQCDUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetFlavorQCDUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetFlavorQCDUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3518
 * 
 *     property njets_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetFlavorQCDDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22njets_JetFlavorQCDDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetFlavorQCDDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3519
 *     property njets_JetFlavorQCDDown:
 *         def __get__(self):
 *             self.njets_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetFlavorQCDDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetFlavorQCDDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3520
 *         def __get__(self):
 *             self.njets_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetHFUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetFlavorQCDDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3518
 * 
 *     property njets_JetFlavorQCDDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetFlavorQCDDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetFlavorQCDDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetFlavorQCDDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3523
 * 
 *     property njets_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13njets_JetHFUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13njets_JetHFUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13njets_JetHFUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13njets_JetHFUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3524
 *     property njets_JetHFUp:
 *         def __get__(self):
 *             self.njets_JetHFUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetHFUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetHFUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3525
 *         def __get__(self):
 *             self.njets_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetHFDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetHFUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3523
 * 
 *     property njets_JetHFUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetHFUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3528
 * 
 *     property njets_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15njets_JetHFDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15njets_JetHFDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15njets_JetHFDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15njets_JetHFDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3529
 *     property njets_JetHFDown:
 *         def __get__(self):
 *             self.njets_JetHFDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetHFDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetHFDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3530
 *         def __get__(self):
 *             self.njets_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetHFyearUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetHFDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3528
 * 
 *     property njets_JetHFDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetHFDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3533
 * 
 *     property njets_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_17njets_JetHFyearUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_17njets_JetHFyearUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_17njets_JetHFyearUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_17njets_JetHFyearUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3534
 *     property njets_JetHFyearUp:
 *         def __get__(self):
 *             self.njets_JetHFyearUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetHFyearUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetHFyearUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3535
 *         def __get__(self):
 *             self.njets_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetHFyearDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetHFyearUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3533
 * 
 *     property njets_JetHFyearUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFyearUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetHFyearUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3538
 * 
 *     property njets_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_19njets_JetHFyearDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_19njets_JetHFyearDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_19njets_JetHFyearDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_19njets_JetHFyearDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3539
 *     property njets_JetHFyearDown:
 *         def __get__(self):
 *             self.njets_JetHFyearDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetHFyearDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetHFyearDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3540
 *         def __get__(self):
 *             self.njets_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetRelativeBalUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetHFyearDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3538
 * 
 *     property njets_JetHFyearDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetHFyearDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetHFyearDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetHFyearDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3543
 * 
 *     property njets_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_22njets_JetRelativeBalUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_22njets_JetRelativeBalUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_22njets_JetRelativeBalUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3544
 *     property njets_JetRelativeBalUp:
 *         def __get__(self):
 *             self.njets_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetRelativeBalUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetRelativeBalUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3545
 *         def __get__(self):
 *             self.njets_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetRelativeBalDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetRelativeBalUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3543
 * 
 *     property njets_JetRelativeBalUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeBalUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetRelativeBalUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3548
 * 
 *     property njets_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_24njets_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_24njets_JetRelativeBalDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_24njets_JetRelativeBalDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_24njets_JetRelativeBalDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3549
 *     property njets_JetRelativeBalDown:
 *         def __get__(self):
 *             self.njets_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetRelativeBalDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetRelativeBalDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3550
 *         def __get__(self):
 *             self.njets_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetRelativeSampleUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetRelativeBalDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3548
 * 
 *     property njets_JetRelativeBalDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeBalDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeBalDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetRelativeBalDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3553
 * 
 *     property njets_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_25njets_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_25njets_JetRelativeSampleUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_25njets_JetRelativeSampleUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_25njets_JetRelativeSampleUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3554
 *     property njets_JetRelativeSampleUp:
 *         def __get__(self):
 *             self.njets_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetRelativeSampleUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JetRelativeSampleUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3555
 *         def __get__(self):
 *             self.njets_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JetRelativeSampleDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetRelativeSampleUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3553
 * 
 *     property njets_JetRelativeSampleUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeSampleUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetRelativeSampleUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3558
 * 
 *     property njets_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_27njets_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_27njets_JetRelativeSampleDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_27njets_JetRelativeSampleDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_27njets_JetRelativeSampleDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3559
 *     property njets_JetRelativeSampleDown:
 *         def __get__(self):
 *             self.njets_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JetRelativeSampleDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JetRelativeSampleDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3560
 *         def __get__(self):
 *             self.njets_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleDown_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JERUp:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JetRelativeSampleDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3558
 * 
 *     property njets_JetRelativeSampleDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JetRelativeSampleDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JetRelativeSampleDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JetRelativeSampleDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3563
 * 
 *     property njets_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERUp_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11njets_JERUp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11njets_JERUp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11njets_JERUp___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11njets_JERUp___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3564
 *     property njets_JERUp:
 *         def __get__(self):
 *             self.njets_JERUp_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JERUp_value
 * 
 */
  (void)(__pyx_v_self->njets_JERUp_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3565
 *         def __get__(self):
 *             self.njets_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERUp_value             # <<<<<<<<<<<<<<
 * 
 *     property njets_JERDown:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JERUp_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3563
 * 
 *     property njets_JERUp:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JERUp_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERUp_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JERUp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3568
 * 
 *     property njets_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERDown_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13njets_JERDown_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13njets_JERDown_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13njets_JERDown___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13njets_JERDown___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3569
 *     property njets_JERDown:
 *         def __get__(self):
 *             self.njets_JERDown_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.njets_JERDown_value
 * 
 */
  (void)(__pyx_v_self->njets_JERDown_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3570
 *         def __get__(self):
 *             self.njets_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERDown_value             # <<<<<<<<<<<<<<
 * 
 *     property jpt_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->njets_JERDown_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3568
 * 
 *     property njets_JERDown:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.njets_JERDown_branch.GetEntry(self.localentry, 0)
 *             return self.njets_JERDown_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.njets_JERDown.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3573
 * 
 *     property jpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5jpt_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5jpt_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5jpt_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5jpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3574
 *     property jpt_1:
 *         def __get__(self):
 *             self.jpt_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jpt_1_value
 * 
 */
  (void)(__pyx_v_self->jpt_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3575
 *         def __get__(self):
 *             self.jpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_1_value             # <<<<<<<<<<<<<<
 * 
 *     property jeta_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jpt_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3573
 * 
 *     property jpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jpt_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3578
 * 
 *     property jeta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jeta_1_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jeta_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jeta_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jeta_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jeta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3579
 *     property jeta_1:
 *         def __get__(self):
 *             self.jeta_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jeta_1_value
 * 
 */
  (void)(__pyx_v_self->jeta_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3580
 *         def __get__(self):
 *             self.jeta_1_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_1_value             # <<<<<<<<<<<<<<
 * 
 *     property jcsv_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jeta_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3578
 * 
 *     property jeta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jeta_1_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jeta_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3583
 * 
 *     property jcsv_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jcsv_1_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jcsv_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jcsv_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jcsv_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jcsv_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3584
 *     property jcsv_1:
 *         def __get__(self):
 *             self.jcsv_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jcsv_1_value
 * 
 */
  (void)(__pyx_v_self->jcsv_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3585
 *         def __get__(self):
 *             self.jcsv_1_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_1_value             # <<<<<<<<<<<<<<
 * 
 *     property jphi_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jcsv_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3583
 * 
 *     property jcsv_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jcsv_1_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jcsv_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3588
 * 
 *     property jphi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jphi_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jphi_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jphi_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jphi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3589
 *     property jphi_1:
 *         def __get__(self):
 *             self.jphi_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jphi_1_value
 * 
 */
  (void)(__pyx_v_self->jphi_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3590
 *         def __get__(self):
 *             self.jphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_1_value             # <<<<<<<<<<<<<<
 * 
 *     property jpt_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jphi_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3588
 * 
 *     property jphi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jphi_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3593
 * 
 *     property jpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5jpt_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5jpt_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5jpt_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5jpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3594
 *     property jpt_2:
 *         def __get__(self):
 *             self.jpt_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jpt_2_value
 * 
 */
  (void)(__pyx_v_self->jpt_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3595
 *         def __get__(self):
 *             self.jpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_2_value             # <<<<<<<<<<<<<<
 * 
 *     property jeta_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jpt_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3593
 * 
 *     property jpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.jpt_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jpt_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3598
 * 
 *     property jeta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jeta_2_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jeta_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jeta_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jeta_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jeta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3599
 *     property jeta_2:
 *         def __get__(self):
 *             self.jeta_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jeta_2_value
 * 
 */
  (void)(__pyx_v_self->jeta_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3600
 *         def __get__(self):
 *             self.jeta_2_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_2_value             # <<<<<<<<<<<<<<
 * 
 *     property jcsv_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jeta_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3598
 * 
 *     property jeta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jeta_2_branch.GetEntry(self.localentry, 0)
 *             return self.jeta_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jeta_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3603
 * 
 *     property jcsv_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jcsv_2_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jcsv_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jcsv_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jcsv_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jcsv_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3604
 *     property jcsv_2:
 *         def __get__(self):
 *             self.jcsv_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jcsv_2_value
 * 
 */
  (void)(__pyx_v_self->jcsv_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3605
 *         def __get__(self):
 *             self.jcsv_2_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_2_value             # <<<<<<<<<<<<<<
 * 
 *     property jphi_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jcsv_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3603
 * 
 *     property jcsv_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jcsv_2_branch.GetEntry(self.localentry, 0)
 *             return self.jcsv_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jcsv_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3608
 * 
 *     property jphi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6jphi_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6jphi_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6jphi_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6jphi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3609
 *     property jphi_2:
 *         def __get__(self):
 *             self.jphi_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.jphi_2_value
 * 
 */
  (void)(__pyx_v_self->jphi_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3610
 *         def __get__(self):
 *             self.jphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_2_value             # <<<<<<<<<<<<<<
 * 
 *     property bpt_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->jphi_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3608
 * 
 *     property jphi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.jphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.jphi_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.jphi_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3613
 * 
 *     property bpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5bpt_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5bpt_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5bpt_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5bpt_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3614
 *     property bpt_1:
 *         def __get__(self):
 *             self.bpt_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bpt_1_value
 * 
 */
  (void)(__pyx_v_self->bpt_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3615
 *         def __get__(self):
 *             self.bpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_1_value             # <<<<<<<<<<<<<<
 * 
 *     property bflavor_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bpt_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3613
 * 
 *     property bpt_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bpt_1_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bpt_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3618
 * 
 *     property bflavor_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bflavor_1_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9bflavor_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9bflavor_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9bflavor_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9bflavor_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3619
 *     property bflavor_1:
 *         def __get__(self):
 *             self.bflavor_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bflavor_1_value
 * 
 */
  (void)(__pyx_v_self->bflavor_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3620
 *         def __get__(self):
 *             self.bflavor_1_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_1_value             # <<<<<<<<<<<<<<
 * 
 *     property beta_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bflavor_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3618
 * 
 *     property bflavor_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bflavor_1_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bflavor_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3623
 * 
 *     property beta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.beta_1_branch.GetEntry(self.localentry, 0)
 *             return self.beta_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6beta_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6beta_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6beta_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6beta_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3624
 *     property beta_1:
 *         def __get__(self):
 *             self.beta_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.beta_1_value
 * 
 */
  (void)(__pyx_v_self->beta_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3625
 *         def __get__(self):
 *             self.beta_1_branch.GetEntry(self.localentry, 0)
 *             return self.beta_1_value             # <<<<<<<<<<<<<<
 * 
 *     property bphi_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->beta_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3623
 * 
 *     property beta_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.beta_1_branch.GetEntry(self.localentry, 0)
 *             return self.beta_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.beta_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3628
 * 
 *     property bphi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6bphi_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6bphi_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6bphi_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6bphi_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3629
 *     property bphi_1:
 *         def __get__(self):
 *             self.bphi_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bphi_1_value
 * 
 */
  (void)(__pyx_v_self->bphi_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3630
 *         def __get__(self):
 *             self.bphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_1_value             # <<<<<<<<<<<<<<
 * 
 *     property passMu23E12:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bphi_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3628
 * 
 *     property bphi_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bphi_1_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bphi_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3633
 * 
 *     property passMu23E12:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.passMu23E12_branch.GetEntry(self.localentry, 0)
 *             return self.passMu23E12_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11passMu23E12_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11passMu23E12_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_11passMu23E12___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_11passMu23E12___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3634
 *     property passMu23E12:
 *         def __get__(self):
 *             self.passMu23E12_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.passMu23E12_value
 * 
 */
  (void)(__pyx_v_self->passMu23E12_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3635
 *         def __get__(self):
 *             self.passMu23E12_branch.GetEntry(self.localentry, 0)
 *             return self.passMu23E12_value             # <<<<<<<<<<<<<<
 * 
 *     property passMu8E23:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->passMu23E12_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3633
 * 
 *     property passMu23E12:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.passMu23E12_branch.GetEntry(self.localentry, 0)
 *             return self.passMu23E12_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.passMu23E12.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3638
 * 
 *     property passMu8E23:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.passMu8E23_branch.GetEntry(self.localentry, 0)
 *             return self.passMu8E23_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_10passMu8E23_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_10passMu8E23_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10passMu8E23___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_10passMu8E23___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3639
 *     property passMu8E23:
 *         def __get__(self):
 *             self.passMu8E23_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.passMu8E23_value
 * 
 */
  (void)(__pyx_v_self->passMu8E23_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3640
 *         def __get__(self):
 *             self.passMu8E23_branch.GetEntry(self.localentry, 0)
 *             return self.passMu8E23_value             # <<<<<<<<<<<<<<
 * 
 *     property matchMu23E12_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->passMu8E23_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3638
 * 
 *     property passMu8E23:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.passMu8E23_branch.GetEntry(self.localentry, 0)
 *             return self.passMu8E23_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.passMu8E23.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3643
 * 
 *     property matchMu23E12_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14matchMu23E12_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14matchMu23E12_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14matchMu23E12_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14matchMu23E12_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3644
 *     property matchMu23E12_1:
 *         def __get__(self):
 *             self.matchMu23E12_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.matchMu23E12_1_value
 * 
 */
  (void)(__pyx_v_self->matchMu23E12_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3645
 *         def __get__(self):
 *             self.matchMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_1_value             # <<<<<<<<<<<<<<
 * 
 *     property matchMu8E23_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->matchMu23E12_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3643
 * 
 *     property matchMu23E12_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.matchMu23E12_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3648
 * 
 *     property matchMu8E23_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13matchMu8E23_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13matchMu8E23_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13matchMu8E23_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13matchMu8E23_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3649
 *     property matchMu8E23_1:
 *         def __get__(self):
 *             self.matchMu8E23_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.matchMu8E23_1_value
 * 
 */
  (void)(__pyx_v_self->matchMu8E23_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3650
 *         def __get__(self):
 *             self.matchMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_1_value             # <<<<<<<<<<<<<<
 * 
 *     property filterMu23E12_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->matchMu8E23_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3648
 * 
 *     property matchMu8E23_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.matchMu8E23_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3653
 * 
 *     property filterMu23E12_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15filterMu23E12_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15filterMu23E12_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15filterMu23E12_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15filterMu23E12_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3654
 *     property filterMu23E12_1:
 *         def __get__(self):
 *             self.filterMu23E12_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.filterMu23E12_1_value
 * 
 */
  (void)(__pyx_v_self->filterMu23E12_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3655
 *         def __get__(self):
 *             self.filterMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_1_value             # <<<<<<<<<<<<<<
 * 
 *     property filterMu8E23_1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->filterMu23E12_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3653
 * 
 *     property filterMu23E12_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu23E12_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.filterMu23E12_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3658
 * 
 *     property filterMu8E23_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14filterMu8E23_1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14filterMu8E23_1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14filterMu8E23_1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14filterMu8E23_1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3659
 *     property filterMu8E23_1:
 *         def __get__(self):
 *             self.filterMu8E23_1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.filterMu8E23_1_value
 * 
 */
  (void)(__pyx_v_self->filterMu8E23_1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3660
 *         def __get__(self):
 *             self.filterMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_1_value             # <<<<<<<<<<<<<<
 * 
 *     property matchMu23E12_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->filterMu8E23_1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3658
 * 
 *     property filterMu8E23_1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu8E23_1_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.filterMu8E23_1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3663
 * 
 *     property matchMu23E12_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14matchMu23E12_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14matchMu23E12_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14matchMu23E12_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14matchMu23E12_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3664
 *     property matchMu23E12_2:
 *         def __get__(self):
 *             self.matchMu23E12_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.matchMu23E12_2_value
 * 
 */
  (void)(__pyx_v_self->matchMu23E12_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3665
 *         def __get__(self):
 *             self.matchMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_2_value             # <<<<<<<<<<<<<<
 * 
 *     property matchMu8E23_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->matchMu23E12_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3663
 * 
 *     property matchMu23E12_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu23E12_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.matchMu23E12_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3668
 * 
 *     property matchMu8E23_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_13matchMu8E23_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_13matchMu8E23_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_13matchMu8E23_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_13matchMu8E23_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3669
 *     property matchMu8E23_2:
 *         def __get__(self):
 *             self.matchMu8E23_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.matchMu8E23_2_value
 * 
 */
  (void)(__pyx_v_self->matchMu8E23_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3670
 *         def __get__(self):
 *             self.matchMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_2_value             # <<<<<<<<<<<<<<
 * 
 *     property filterMu23E12_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->matchMu8E23_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3668
 * 
 *     property matchMu8E23_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.matchMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.matchMu8E23_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.matchMu8E23_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3673
 * 
 *     property filterMu23E12_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_15filterMu23E12_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_15filterMu23E12_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_15filterMu23E12_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_15filterMu23E12_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3674
 *     property filterMu23E12_2:
 *         def __get__(self):
 *             self.filterMu23E12_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.filterMu23E12_2_value
 * 
 */
  (void)(__pyx_v_self->filterMu23E12_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3675
 *         def __get__(self):
 *             self.filterMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_2_value             # <<<<<<<<<<<<<<
 * 
 *     property filterMu8E23_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->filterMu23E12_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3673
 * 
 *     property filterMu23E12_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu23E12_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu23E12_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.filterMu23E12_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3678
 * 
 *     property filterMu8E23_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14filterMu8E23_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14filterMu8E23_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14filterMu8E23_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14filterMu8E23_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3679
 *     property filterMu8E23_2:
 *         def __get__(self):
 *             self.filterMu8E23_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.filterMu8E23_2_value
 * 
 */
  (void)(__pyx_v_self->filterMu8E23_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3680
 *         def __get__(self):
 *             self.filterMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_2_value             # <<<<<<<<<<<<<<
 * 
 *     property bpt_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->filterMu8E23_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3678
 * 
 *     property filterMu8E23_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.filterMu8E23_2_branch.GetEntry(self.localentry, 0)
 *             return self.filterMu8E23_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.filterMu8E23_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3683
 * 
 *     property bpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_5bpt_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_5bpt_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_5bpt_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_5bpt_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3684
 *     property bpt_2:
 *         def __get__(self):
 *             self.bpt_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bpt_2_value
 * 
 */
  (void)(__pyx_v_self->bpt_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3685
 *         def __get__(self):
 *             self.bpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_2_value             # <<<<<<<<<<<<<<
 * 
 *     property bflavor_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bpt_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3683
 * 
 *     property bpt_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bpt_2_branch.GetEntry(self.localentry, 0)
 *             return self.bpt_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bpt_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3688
 * 
 *     property bflavor_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bflavor_2_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9bflavor_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9bflavor_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9bflavor_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9bflavor_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3689
 *     property bflavor_2:
 *         def __get__(self):
 *             self.bflavor_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bflavor_2_value
 * 
 */
  (void)(__pyx_v_self->bflavor_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3690
 *         def __get__(self):
 *             self.bflavor_2_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_2_value             # <<<<<<<<<<<<<<
 * 
 *     property beta_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bflavor_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3688
 * 
 *     property bflavor_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bflavor_2_branch.GetEntry(self.localentry, 0)
 *             return self.bflavor_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bflavor_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3693
 * 
 *     property beta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.beta_2_branch.GetEntry(self.localentry, 0)
 *             return self.beta_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6beta_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6beta_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6beta_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6beta_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3694
 *     property beta_2:
 *         def __get__(self):
 *             self.beta_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.beta_2_value
 * 
 */
  (void)(__pyx_v_self->beta_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3695
 *         def __get__(self):
 *             self.beta_2_branch.GetEntry(self.localentry, 0)
 *             return self.beta_2_value             # <<<<<<<<<<<<<<
 * 
 *     property bphi_2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->beta_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3693
 * 
 *     property beta_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.beta_2_branch.GetEntry(self.localentry, 0)
 *             return self.beta_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.beta_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3698
 * 
 *     property bphi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_6bphi_2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_6bphi_2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_6bphi_2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_6bphi_2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3699
 *     property bphi_2:
 *         def __get__(self):
 *             self.bphi_2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.bphi_2_value
 * 
 */
  (void)(__pyx_v_self->bphi_2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3700
 *         def __get__(self):
 *             self.bphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_2_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_top1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->bphi_2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3698
 * 
 *     property bphi_2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.bphi_2_branch.GetEntry(self.localentry, 0)
 *             return self.bphi_2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.bphi_2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3703
 * 
 *     property pt_top1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_top1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top1_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_7pt_top1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_7pt_top1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_7pt_top1___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_7pt_top1___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3704
 *     property pt_top1:
 *         def __get__(self):
 *             self.pt_top1_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_top1_value
 * 
 */
  (void)(__pyx_v_self->pt_top1_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3705
 *         def __get__(self):
 *             self.pt_top1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top1_value             # <<<<<<<<<<<<<<
 * 
 *     property pt_top2:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_top1_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3703
 * 
 *     property pt_top1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_top1_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top1_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_top1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3708
 * 
 *     property pt_top2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_top2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top2_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_7pt_top2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_7pt_top2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_7pt_top2___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_7pt_top2___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3709
 *     property pt_top2:
 *         def __get__(self):
 *             self.pt_top2_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.pt_top2_value
 * 
 */
  (void)(__pyx_v_self->pt_top2_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3710
 *         def __get__(self):
 *             self.pt_top2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top2_value             # <<<<<<<<<<<<<<
 * 
 *     property genweight:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->pt_top2_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3708
 * 
 *     property pt_top2:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.pt_top2_branch.GetEntry(self.localentry, 0)
 *             return self.pt_top2_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.pt_top2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3713
 * 
 *     property genweight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genweight_branch.GetEntry(self.localentry, 0)
 *             return self.genweight_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9genweight_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9genweight_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_9genweight___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_9genweight___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3714
 *     property genweight:
 *         def __get__(self):
 *             self.genweight_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.genweight_value
 * 
 */
  (void)(__pyx_v_self->genweight_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3715
 *         def __get__(self):
 *             self.genweight_branch.GetEntry(self.localentry, 0)
 *             return self.genweight_value             # <<<<<<<<<<<<<<
 * 
 *     property gen_Higgs_pt:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->genweight_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3713
 * 
 *     property genweight:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.genweight_branch.GetEntry(self.localentry, 0)
 *             return self.genweight_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.genweight.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3718
 * 
 *     property gen_Higgs_pt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_Higgs_pt_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_pt_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_12gen_Higgs_pt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_12gen_Higgs_pt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_12gen_Higgs_pt___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_12gen_Higgs_pt___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3719
 *     property gen_Higgs_pt:
 *         def __get__(self):
 *             self.gen_Higgs_pt_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.gen_Higgs_pt_value
 * 
 */
  (void)(__pyx_v_self->gen_Higgs_pt_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3720
 *         def __get__(self):
 *             self.gen_Higgs_pt_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_pt_value             # <<<<<<<<<<<<<<
 * 
 *     property gen_Higgs_mass:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->gen_Higgs_pt_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3718
 * 
 *     property gen_Higgs_pt:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_Higgs_pt_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_pt_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.gen_Higgs_pt.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":3723
 * 
 *     property gen_Higgs_mass:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_Higgs_mass_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_mass_value
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_14gen_Higgs_mass_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_14gen_Higgs_mass_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_14gen_Higgs_mass___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_14gen_Higgs_mass___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "EMTree.pyx":3724
 *     property gen_Higgs_mass:
 *         def __get__(self):
 *             self.gen_Higgs_mass_branch.GetEntry(self.localentry, 0)             # <<<<<<<<<<<<<<
 *             return self.gen_Higgs_mass_value
 * 
 */
  (void)(__pyx_v_self->gen_Higgs_mass_branch->GetEntry(__pyx_v_self->localentry, 0));

  /* "EMTree.pyx":3725
 *         def __get__(self):
 *             self.gen_Higgs_mass_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_mass_value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->gen_Higgs_mass_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "EMTree.pyx":3723
 * 
 *     property gen_Higgs_mass:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             self.gen_Higgs_mass_branch.GetEntry(self.localentry, 0)
 *             return self.gen_Higgs_mass_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.gen_Higgs_mass.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "EMTree.pyx":51
 *     cdef long localentry
 *     # Keep track of missing branches we have complained about.
 *     cdef public set complained             # <<<<<<<<<<<<<<
 * 
 *     # Branches and address for all
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_10complained_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_10complained_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10complained___get__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_10complained___get__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->complained);
  __pyx_r = __pyx_v_self->complained;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6EMTree_6EMTree_10complained_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6EMTree_6EMTree_10complained_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10complained_2__set__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6EMTree_6EMTree_10complained_2__set__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(PySet_CheckExact(__pyx_v_value))||((__pyx_v_value) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "set", Py_TYPE(__pyx_v_value)->tp_name), 0))) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->complained);
  __Pyx_DECREF(__pyx_v_self->complained);
  __pyx_v_self->complained = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.complained.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_6EMTree_6EMTree_10complained_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_6EMTree_6EMTree_10complained_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10complained_4__del__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6EMTree_6EMTree_10complained_4__del__(struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->complained);
  __Pyx_DECREF(__pyx_v_self->complained);
  __pyx_v_self->complained = ((PyObject*)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_8__reduce_cython__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6EMTree_EMTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__214, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6EMTree_6EMTree_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6EMTree_6EMTree_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6EMTree_6EMTree_10__setstate_cython__(((struct __pyx_obj_6EMTree_EMTree *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6EMTree_6EMTree_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6EMTree_EMTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__215, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("EMTree.EMTree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6EMTree_EMTree __pyx_vtable_6EMTree_EMTree;

static PyObject *__pyx_tp_new_6EMTree_EMTree(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6EMTree_EMTree *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6EMTree_EMTree *)o);
  p->__pyx_vtab = __pyx_vtabptr_6EMTree_EMTree;
  p->complained = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6EMTree_6EMTree_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6EMTree_EMTree(PyObject *o) {
  struct __pyx_obj_6EMTree_EMTree *p = (struct __pyx_obj_6EMTree_EMTree *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->complained);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6EMTree_EMTree(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6EMTree_EMTree *p = (struct __pyx_obj_6EMTree_EMTree *)o;
  if (p->complained) {
    e = (*v)(p->complained, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6EMTree_EMTree(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6EMTree_EMTree *p = (struct __pyx_obj_6EMTree_EMTree *)o;
  tmp = ((PyObject*)p->complained);
  p->complained = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_entry(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5entry_1__get__(o);
}

static int __pyx_setprop_6EMTree_6EMTree_entry(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6EMTree_6EMTree_5entry_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_run(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3run_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_lumi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_4lumi_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_evt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3evt_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genpX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5genpX_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genpY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5genpY_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genM(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_4genM_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genpT(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5genpT_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_vispX(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5vispX_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_vispY(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5vispY_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genpt_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_7genpt_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_geneta_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8geneta_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genpt_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_7genpt_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_geneta_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8geneta_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_VEta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_10Rivet_VEta_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_VPt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9Rivet_VPt_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_errorCode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15Rivet_errorCode_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_higgsEta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14Rivet_higgsEta_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_higgsPt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13Rivet_higgsPt_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_nJets25(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13Rivet_nJets25_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_nJets30(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13Rivet_nJets30_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_p4decay_VEta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18Rivet_p4decay_VEta_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_p4decay_VPt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17Rivet_p4decay_VPt_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_prodMode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14Rivet_prodMode_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_stage0_cat(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16Rivet_stage0_cat_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_stage1_1_fine_cat_pTjet30GeV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_34Rivet_stage1_1_fine_cat_pTjet30GeV_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Rivet_stage1_1_cat_pTjet30GeV(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_29Rivet_stage1_1_cat_pTjet30GeV_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_npv(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3npv_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_npu(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3npu_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_1_ScaleUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12pt_1_ScaleUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_1_ScaleDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14pt_1_ScaleDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_4pt_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_phi_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5phi_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_eta_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5eta_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_m_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3m_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_e_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3e_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_q_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3q_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_iso_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5iso_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_4pt_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_phi_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5phi_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_eta_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5eta_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_m_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3m_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_e_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3e_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_q_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3q_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_iso_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5iso_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_numGenJets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_10numGenJets_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bweight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_7bweight_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_ecalBadCalibReducedMINIAODFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_37Flag_ecalBadCalibReducedMINIAODFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_goodVertices(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17Flag_goodVertices_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_globalSuperTightHalo2016Filter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_35Flag_globalSuperTightHalo2016Filter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_eeBadScFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18Flag_eeBadScFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_ecalBadCalibFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23Flag_ecalBadCalibFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_badMuons(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13Flag_badMuons_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_duplicateMuons(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19Flag_duplicateMuons_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_HBHENoiseIsoFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23Flag_HBHENoiseIsoFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_HBHENoiseFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20Flag_HBHENoiseFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_EcalDeadCellTriggerPrimitiveFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_39Flag_EcalDeadCellTriggerPrimitiveFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_BadPFMuonFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20Flag_BadPFMuonFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_Flag_BadChargedCandidateFilter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_30Flag_BadChargedCandidateFilter_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3met_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metSig(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6metSig_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metcov00(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8metcov00_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metcov10(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8metcov10_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metcov11(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8metcov11_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metcov01(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_8metcov01_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6metphi_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_py(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6met_py_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_px(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6met_px_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_UESUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9met_UESUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_UESUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12metphi_UESUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_UESDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11met_UESDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_UESDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14metphi_UESDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17met_JetAbsoluteUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20metphi_JetAbsoluteUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19met_JetAbsoluteDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22metphi_JetAbsoluteDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21met_JetAbsoluteyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_24metphi_JetAbsoluteyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23met_JetAbsoluteyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_26metphi_JetAbsoluteyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetBBEC1Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14met_JetBBEC1Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17metphi_JetBBEC1Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetBBEC1Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16met_JetBBEC1Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19metphi_JetBBEC1Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetBBEC1yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18met_JetBBEC1yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21metphi_JetBBEC1yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetBBEC1yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20met_JetBBEC1yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23metphi_JetBBEC1yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetEC2Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12met_JetEC2Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetEC2Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15metphi_JetEC2Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetEC2Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14met_JetEC2Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetEC2Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17metphi_JetEC2Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetEC2yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16met_JetEC2yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetEC2yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19metphi_JetEC2yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetEC2yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18met_JetEC2yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetEC2yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21metphi_JetEC2yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetFlavorQCDUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18met_JetFlavorQCDUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetFlavorQCDUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21metphi_JetFlavorQCDUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetFlavorQCDDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20met_JetFlavorQCDDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetFlavorQCDDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23metphi_JetFlavorQCDDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetHFUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11met_JetHFUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetHFUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14metphi_JetHFUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetHFDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13met_JetHFDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetHFDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16metphi_JetHFDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetHFyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15met_JetHFyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetHFyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18metphi_JetHFyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetHFyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17met_JetHFyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetHFyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20metphi_JetHFyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetRelativeBalUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20met_JetRelativeBalUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeBalUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23metphi_JetRelativeBalUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetRelativeBalDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22met_JetRelativeBalDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeBalDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_25metphi_JetRelativeBalDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetRelativeSampleUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23met_JetRelativeSampleUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeSampleUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_26metphi_JetRelativeSampleUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JetRelativeSampleDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_25met_JetRelativeSampleDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeSampleDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_28metphi_JetRelativeSampleDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JERUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9met_JERUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JERUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12metphi_JERUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_JERDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11met_JERDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_JERDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14metphi_JERDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_responseUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14met_responseUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_responseDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16met_responseDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_resolutionUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16met_resolutionUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_met_resolutionDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18met_resolutionDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_responseUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17metphi_responseUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_responseDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19metphi_responseDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_resolutionUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19metphi_resolutionUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_metphi_resolutionDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21metphi_resolutionDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_3mjj_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17mjj_JetAbsoluteUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19mjj_JetAbsoluteDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21mjj_JetAbsoluteyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23mjj_JetAbsoluteyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14mjj_JetBBEC1Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16mjj_JetBBEC1Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18mjj_JetBBEC1yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20mjj_JetBBEC1yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetEC2Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12mjj_JetEC2Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetEC2Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14mjj_JetEC2Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetEC2yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16mjj_JetEC2yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetEC2yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18mjj_JetEC2yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetFlavorQCDUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18mjj_JetFlavorQCDUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetFlavorQCDDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20mjj_JetFlavorQCDDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetHFUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11mjj_JetHFUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetHFDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13mjj_JetHFDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetHFyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15mjj_JetHFyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetHFyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17mjj_JetHFyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeBalUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20mjj_JetRelativeBalUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeBalDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22mjj_JetRelativeBalDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeSampleUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23mjj_JetRelativeSampleUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeSampleDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_25mjj_JetRelativeSampleDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JERUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9mjj_JERUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_mjj_JERDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11mjj_JERDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_gen_match_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11gen_match_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_gen_match_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11gen_match_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_nbtag(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5nbtag_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_nbtagL(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6nbtagL_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5njets_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19njets_JetAbsoluteUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_21njets_JetAbsoluteDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_23njets_JetAbsoluteyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_25njets_JetAbsoluteyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16njets_JetBBEC1Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18njets_JetBBEC1Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20njets_JetBBEC1yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22njets_JetBBEC1yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetEC2Up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14njets_JetEC2Up_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetEC2Down(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_16njets_JetEC2Down_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetEC2yearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_18njets_JetEC2yearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetEC2yearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20njets_JetEC2yearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetFlavorQCDUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_20njets_JetFlavorQCDUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetFlavorQCDDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22njets_JetFlavorQCDDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetHFUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13njets_JetHFUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetHFDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15njets_JetHFDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetHFyearUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_17njets_JetHFyearUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetHFyearDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_19njets_JetHFyearDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetRelativeBalUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_22njets_JetRelativeBalUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetRelativeBalDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_24njets_JetRelativeBalDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetRelativeSampleUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_25njets_JetRelativeSampleUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JetRelativeSampleDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_27njets_JetRelativeSampleDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JERUp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11njets_JERUp_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_njets_JERDown(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13njets_JERDown_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jpt_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5jpt_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jeta_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jeta_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jcsv_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jcsv_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jphi_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jphi_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jpt_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5jpt_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jeta_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jeta_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jcsv_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jcsv_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_jphi_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6jphi_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bpt_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5bpt_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bflavor_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9bflavor_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_beta_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6beta_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bphi_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6bphi_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_passMu23E12(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_11passMu23E12_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_passMu8E23(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_10passMu8E23_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_matchMu23E12_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14matchMu23E12_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_matchMu8E23_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13matchMu8E23_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_filterMu23E12_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15filterMu23E12_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_filterMu8E23_1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14filterMu8E23_1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_matchMu23E12_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14matchMu23E12_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_matchMu8E23_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_13matchMu8E23_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_filterMu23E12_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_15filterMu23E12_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_filterMu8E23_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14filterMu8E23_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bpt_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_5bpt_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bflavor_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9bflavor_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_beta_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6beta_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_bphi_2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_6bphi_2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_top1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_7pt_top1_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_pt_top2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_7pt_top2_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_genweight(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_9genweight_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_gen_Higgs_pt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_12gen_Higgs_pt_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_gen_Higgs_mass(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_14gen_Higgs_mass_1__get__(o);
}

static PyObject *__pyx_getprop_6EMTree_6EMTree_complained(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6EMTree_6EMTree_10complained_1__get__(o);
}

static int __pyx_setprop_6EMTree_6EMTree_complained(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6EMTree_6EMTree_10complained_3__set__(o, v);
  }
  else {
    return __pyx_pw_6EMTree_6EMTree_10complained_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_6EMTree_EMTree[] = {
  {"where", (PyCFunction)__pyx_pw_6EMTree_6EMTree_6where, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6EMTree_6EMTree_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6EMTree_6EMTree_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6EMTree_EMTree[] = {
  {(char *)"entry", __pyx_getprop_6EMTree_6EMTree_entry, __pyx_setprop_6EMTree_6EMTree_entry, (char *)0, 0},
  {(char *)"run", __pyx_getprop_6EMTree_6EMTree_run, 0, (char *)0, 0},
  {(char *)"lumi", __pyx_getprop_6EMTree_6EMTree_lumi, 0, (char *)0, 0},
  {(char *)"evt", __pyx_getprop_6EMTree_6EMTree_evt, 0, (char *)0, 0},
  {(char *)"genpX", __pyx_getprop_6EMTree_6EMTree_genpX, 0, (char *)0, 0},
  {(char *)"genpY", __pyx_getprop_6EMTree_6EMTree_genpY, 0, (char *)0, 0},
  {(char *)"genM", __pyx_getprop_6EMTree_6EMTree_genM, 0, (char *)0, 0},
  {(char *)"genpT", __pyx_getprop_6EMTree_6EMTree_genpT, 0, (char *)0, 0},
  {(char *)"vispX", __pyx_getprop_6EMTree_6EMTree_vispX, 0, (char *)0, 0},
  {(char *)"vispY", __pyx_getprop_6EMTree_6EMTree_vispY, 0, (char *)0, 0},
  {(char *)"genpt_1", __pyx_getprop_6EMTree_6EMTree_genpt_1, 0, (char *)0, 0},
  {(char *)"geneta_1", __pyx_getprop_6EMTree_6EMTree_geneta_1, 0, (char *)0, 0},
  {(char *)"genpt_2", __pyx_getprop_6EMTree_6EMTree_genpt_2, 0, (char *)0, 0},
  {(char *)"geneta_2", __pyx_getprop_6EMTree_6EMTree_geneta_2, 0, (char *)0, 0},
  {(char *)"Rivet_VEta", __pyx_getprop_6EMTree_6EMTree_Rivet_VEta, 0, (char *)0, 0},
  {(char *)"Rivet_VPt", __pyx_getprop_6EMTree_6EMTree_Rivet_VPt, 0, (char *)0, 0},
  {(char *)"Rivet_errorCode", __pyx_getprop_6EMTree_6EMTree_Rivet_errorCode, 0, (char *)0, 0},
  {(char *)"Rivet_higgsEta", __pyx_getprop_6EMTree_6EMTree_Rivet_higgsEta, 0, (char *)0, 0},
  {(char *)"Rivet_higgsPt", __pyx_getprop_6EMTree_6EMTree_Rivet_higgsPt, 0, (char *)0, 0},
  {(char *)"Rivet_nJets25", __pyx_getprop_6EMTree_6EMTree_Rivet_nJets25, 0, (char *)0, 0},
  {(char *)"Rivet_nJets30", __pyx_getprop_6EMTree_6EMTree_Rivet_nJets30, 0, (char *)0, 0},
  {(char *)"Rivet_p4decay_VEta", __pyx_getprop_6EMTree_6EMTree_Rivet_p4decay_VEta, 0, (char *)0, 0},
  {(char *)"Rivet_p4decay_VPt", __pyx_getprop_6EMTree_6EMTree_Rivet_p4decay_VPt, 0, (char *)0, 0},
  {(char *)"Rivet_prodMode", __pyx_getprop_6EMTree_6EMTree_Rivet_prodMode, 0, (char *)0, 0},
  {(char *)"Rivet_stage0_cat", __pyx_getprop_6EMTree_6EMTree_Rivet_stage0_cat, 0, (char *)0, 0},
  {(char *)"Rivet_stage1_1_fine_cat_pTjet30GeV", __pyx_getprop_6EMTree_6EMTree_Rivet_stage1_1_fine_cat_pTjet30GeV, 0, (char *)0, 0},
  {(char *)"Rivet_stage1_1_cat_pTjet30GeV", __pyx_getprop_6EMTree_6EMTree_Rivet_stage1_1_cat_pTjet30GeV, 0, (char *)0, 0},
  {(char *)"npv", __pyx_getprop_6EMTree_6EMTree_npv, 0, (char *)0, 0},
  {(char *)"npu", __pyx_getprop_6EMTree_6EMTree_npu, 0, (char *)0, 0},
  {(char *)"pt_1_ScaleUp", __pyx_getprop_6EMTree_6EMTree_pt_1_ScaleUp, 0, (char *)0, 0},
  {(char *)"pt_1_ScaleDown", __pyx_getprop_6EMTree_6EMTree_pt_1_ScaleDown, 0, (char *)0, 0},
  {(char *)"pt_1", __pyx_getprop_6EMTree_6EMTree_pt_1, 0, (char *)0, 0},
  {(char *)"phi_1", __pyx_getprop_6EMTree_6EMTree_phi_1, 0, (char *)0, 0},
  {(char *)"eta_1", __pyx_getprop_6EMTree_6EMTree_eta_1, 0, (char *)0, 0},
  {(char *)"m_1", __pyx_getprop_6EMTree_6EMTree_m_1, 0, (char *)0, 0},
  {(char *)"e_1", __pyx_getprop_6EMTree_6EMTree_e_1, 0, (char *)0, 0},
  {(char *)"q_1", __pyx_getprop_6EMTree_6EMTree_q_1, 0, (char *)0, 0},
  {(char *)"iso_1", __pyx_getprop_6EMTree_6EMTree_iso_1, 0, (char *)0, 0},
  {(char *)"pt_2", __pyx_getprop_6EMTree_6EMTree_pt_2, 0, (char *)0, 0},
  {(char *)"phi_2", __pyx_getprop_6EMTree_6EMTree_phi_2, 0, (char *)0, 0},
  {(char *)"eta_2", __pyx_getprop_6EMTree_6EMTree_eta_2, 0, (char *)0, 0},
  {(char *)"m_2", __pyx_getprop_6EMTree_6EMTree_m_2, 0, (char *)0, 0},
  {(char *)"e_2", __pyx_getprop_6EMTree_6EMTree_e_2, 0, (char *)0, 0},
  {(char *)"q_2", __pyx_getprop_6EMTree_6EMTree_q_2, 0, (char *)0, 0},
  {(char *)"iso_2", __pyx_getprop_6EMTree_6EMTree_iso_2, 0, (char *)0, 0},
  {(char *)"numGenJets", __pyx_getprop_6EMTree_6EMTree_numGenJets, 0, (char *)0, 0},
  {(char *)"bweight", __pyx_getprop_6EMTree_6EMTree_bweight, 0, (char *)0, 0},
  {(char *)"Flag_ecalBadCalibReducedMINIAODFilter", __pyx_getprop_6EMTree_6EMTree_Flag_ecalBadCalibReducedMINIAODFilter, 0, (char *)0, 0},
  {(char *)"Flag_goodVertices", __pyx_getprop_6EMTree_6EMTree_Flag_goodVertices, 0, (char *)0, 0},
  {(char *)"Flag_globalSuperTightHalo2016Filter", __pyx_getprop_6EMTree_6EMTree_Flag_globalSuperTightHalo2016Filter, 0, (char *)0, 0},
  {(char *)"Flag_eeBadScFilter", __pyx_getprop_6EMTree_6EMTree_Flag_eeBadScFilter, 0, (char *)0, 0},
  {(char *)"Flag_ecalBadCalibFilter", __pyx_getprop_6EMTree_6EMTree_Flag_ecalBadCalibFilter, 0, (char *)0, 0},
  {(char *)"Flag_badMuons", __pyx_getprop_6EMTree_6EMTree_Flag_badMuons, 0, (char *)0, 0},
  {(char *)"Flag_duplicateMuons", __pyx_getprop_6EMTree_6EMTree_Flag_duplicateMuons, 0, (char *)0, 0},
  {(char *)"Flag_HBHENoiseIsoFilter", __pyx_getprop_6EMTree_6EMTree_Flag_HBHENoiseIsoFilter, 0, (char *)0, 0},
  {(char *)"Flag_HBHENoiseFilter", __pyx_getprop_6EMTree_6EMTree_Flag_HBHENoiseFilter, 0, (char *)0, 0},
  {(char *)"Flag_EcalDeadCellTriggerPrimitiveFilter", __pyx_getprop_6EMTree_6EMTree_Flag_EcalDeadCellTriggerPrimitiveFilter, 0, (char *)0, 0},
  {(char *)"Flag_BadPFMuonFilter", __pyx_getprop_6EMTree_6EMTree_Flag_BadPFMuonFilter, 0, (char *)0, 0},
  {(char *)"Flag_BadChargedCandidateFilter", __pyx_getprop_6EMTree_6EMTree_Flag_BadChargedCandidateFilter, 0, (char *)0, 0},
  {(char *)"met", __pyx_getprop_6EMTree_6EMTree_met, 0, (char *)0, 0},
  {(char *)"metSig", __pyx_getprop_6EMTree_6EMTree_metSig, 0, (char *)0, 0},
  {(char *)"metcov00", __pyx_getprop_6EMTree_6EMTree_metcov00, 0, (char *)0, 0},
  {(char *)"metcov10", __pyx_getprop_6EMTree_6EMTree_metcov10, 0, (char *)0, 0},
  {(char *)"metcov11", __pyx_getprop_6EMTree_6EMTree_metcov11, 0, (char *)0, 0},
  {(char *)"metcov01", __pyx_getprop_6EMTree_6EMTree_metcov01, 0, (char *)0, 0},
  {(char *)"metphi", __pyx_getprop_6EMTree_6EMTree_metphi, 0, (char *)0, 0},
  {(char *)"met_py", __pyx_getprop_6EMTree_6EMTree_met_py, 0, (char *)0, 0},
  {(char *)"met_px", __pyx_getprop_6EMTree_6EMTree_met_px, 0, (char *)0, 0},
  {(char *)"met_UESUp", __pyx_getprop_6EMTree_6EMTree_met_UESUp, 0, (char *)0, 0},
  {(char *)"metphi_UESUp", __pyx_getprop_6EMTree_6EMTree_metphi_UESUp, 0, (char *)0, 0},
  {(char *)"met_UESDown", __pyx_getprop_6EMTree_6EMTree_met_UESDown, 0, (char *)0, 0},
  {(char *)"metphi_UESDown", __pyx_getprop_6EMTree_6EMTree_metphi_UESDown, 0, (char *)0, 0},
  {(char *)"met_JetAbsoluteUp", __pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteUp, 0, (char *)0, 0},
  {(char *)"metphi_JetAbsoluteUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteUp, 0, (char *)0, 0},
  {(char *)"met_JetAbsoluteDown", __pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteDown, 0, (char *)0, 0},
  {(char *)"metphi_JetAbsoluteDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteDown, 0, (char *)0, 0},
  {(char *)"met_JetAbsoluteyearUp", __pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteyearUp, 0, (char *)0, 0},
  {(char *)"metphi_JetAbsoluteyearUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteyearUp, 0, (char *)0, 0},
  {(char *)"met_JetAbsoluteyearDown", __pyx_getprop_6EMTree_6EMTree_met_JetAbsoluteyearDown, 0, (char *)0, 0},
  {(char *)"metphi_JetAbsoluteyearDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetAbsoluteyearDown, 0, (char *)0, 0},
  {(char *)"met_JetBBEC1Up", __pyx_getprop_6EMTree_6EMTree_met_JetBBEC1Up, 0, (char *)0, 0},
  {(char *)"metphi_JetBBEC1Up", __pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1Up, 0, (char *)0, 0},
  {(char *)"met_JetBBEC1Down", __pyx_getprop_6EMTree_6EMTree_met_JetBBEC1Down, 0, (char *)0, 0},
  {(char *)"metphi_JetBBEC1Down", __pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1Down, 0, (char *)0, 0},
  {(char *)"met_JetBBEC1yearUp", __pyx_getprop_6EMTree_6EMTree_met_JetBBEC1yearUp, 0, (char *)0, 0},
  {(char *)"metphi_JetBBEC1yearUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1yearUp, 0, (char *)0, 0},
  {(char *)"met_JetBBEC1yearDown", __pyx_getprop_6EMTree_6EMTree_met_JetBBEC1yearDown, 0, (char *)0, 0},
  {(char *)"metphi_JetBBEC1yearDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetBBEC1yearDown, 0, (char *)0, 0},
  {(char *)"met_JetEC2Up", __pyx_getprop_6EMTree_6EMTree_met_JetEC2Up, 0, (char *)0, 0},
  {(char *)"metphi_JetEC2Up", __pyx_getprop_6EMTree_6EMTree_metphi_JetEC2Up, 0, (char *)0, 0},
  {(char *)"met_JetEC2Down", __pyx_getprop_6EMTree_6EMTree_met_JetEC2Down, 0, (char *)0, 0},
  {(char *)"metphi_JetEC2Down", __pyx_getprop_6EMTree_6EMTree_metphi_JetEC2Down, 0, (char *)0, 0},
  {(char *)"met_JetEC2yearUp", __pyx_getprop_6EMTree_6EMTree_met_JetEC2yearUp, 0, (char *)0, 0},
  {(char *)"metphi_JetEC2yearUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetEC2yearUp, 0, (char *)0, 0},
  {(char *)"met_JetEC2yearDown", __pyx_getprop_6EMTree_6EMTree_met_JetEC2yearDown, 0, (char *)0, 0},
  {(char *)"metphi_JetEC2yearDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetEC2yearDown, 0, (char *)0, 0},
  {(char *)"met_JetFlavorQCDUp", __pyx_getprop_6EMTree_6EMTree_met_JetFlavorQCDUp, 0, (char *)0, 0},
  {(char *)"metphi_JetFlavorQCDUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetFlavorQCDUp, 0, (char *)0, 0},
  {(char *)"met_JetFlavorQCDDown", __pyx_getprop_6EMTree_6EMTree_met_JetFlavorQCDDown, 0, (char *)0, 0},
  {(char *)"metphi_JetFlavorQCDDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetFlavorQCDDown, 0, (char *)0, 0},
  {(char *)"met_JetHFUp", __pyx_getprop_6EMTree_6EMTree_met_JetHFUp, 0, (char *)0, 0},
  {(char *)"metphi_JetHFUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetHFUp, 0, (char *)0, 0},
  {(char *)"met_JetHFDown", __pyx_getprop_6EMTree_6EMTree_met_JetHFDown, 0, (char *)0, 0},
  {(char *)"metphi_JetHFDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetHFDown, 0, (char *)0, 0},
  {(char *)"met_JetHFyearUp", __pyx_getprop_6EMTree_6EMTree_met_JetHFyearUp, 0, (char *)0, 0},
  {(char *)"metphi_JetHFyearUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetHFyearUp, 0, (char *)0, 0},
  {(char *)"met_JetHFyearDown", __pyx_getprop_6EMTree_6EMTree_met_JetHFyearDown, 0, (char *)0, 0},
  {(char *)"metphi_JetHFyearDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetHFyearDown, 0, (char *)0, 0},
  {(char *)"met_JetRelativeBalUp", __pyx_getprop_6EMTree_6EMTree_met_JetRelativeBalUp, 0, (char *)0, 0},
  {(char *)"metphi_JetRelativeBalUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeBalUp, 0, (char *)0, 0},
  {(char *)"met_JetRelativeBalDown", __pyx_getprop_6EMTree_6EMTree_met_JetRelativeBalDown, 0, (char *)0, 0},
  {(char *)"metphi_JetRelativeBalDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeBalDown, 0, (char *)0, 0},
  {(char *)"met_JetRelativeSampleUp", __pyx_getprop_6EMTree_6EMTree_met_JetRelativeSampleUp, 0, (char *)0, 0},
  {(char *)"metphi_JetRelativeSampleUp", __pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeSampleUp, 0, (char *)0, 0},
  {(char *)"met_JetRelativeSampleDown", __pyx_getprop_6EMTree_6EMTree_met_JetRelativeSampleDown, 0, (char *)0, 0},
  {(char *)"metphi_JetRelativeSampleDown", __pyx_getprop_6EMTree_6EMTree_metphi_JetRelativeSampleDown, 0, (char *)0, 0},
  {(char *)"met_JERUp", __pyx_getprop_6EMTree_6EMTree_met_JERUp, 0, (char *)0, 0},
  {(char *)"metphi_JERUp", __pyx_getprop_6EMTree_6EMTree_metphi_JERUp, 0, (char *)0, 0},
  {(char *)"met_JERDown", __pyx_getprop_6EMTree_6EMTree_met_JERDown, 0, (char *)0, 0},
  {(char *)"metphi_JERDown", __pyx_getprop_6EMTree_6EMTree_metphi_JERDown, 0, (char *)0, 0},
  {(char *)"met_responseUp", __pyx_getprop_6EMTree_6EMTree_met_responseUp, 0, (char *)0, 0},
  {(char *)"met_responseDown", __pyx_getprop_6EMTree_6EMTree_met_responseDown, 0, (char *)0, 0},
  {(char *)"met_resolutionUp", __pyx_getprop_6EMTree_6EMTree_met_resolutionUp, 0, (char *)0, 0},
  {(char *)"met_resolutionDown", __pyx_getprop_6EMTree_6EMTree_met_resolutionDown, 0, (char *)0, 0},
  {(char *)"metphi_responseUp", __pyx_getprop_6EMTree_6EMTree_metphi_responseUp, 0, (char *)0, 0},
  {(char *)"metphi_responseDown", __pyx_getprop_6EMTree_6EMTree_metphi_responseDown, 0, (char *)0, 0},
  {(char *)"metphi_resolutionUp", __pyx_getprop_6EMTree_6EMTree_metphi_resolutionUp, 0, (char *)0, 0},
  {(char *)"metphi_resolutionDown", __pyx_getprop_6EMTree_6EMTree_metphi_resolutionDown, 0, (char *)0, 0},
  {(char *)"mjj", __pyx_getprop_6EMTree_6EMTree_mjj, 0, (char *)0, 0},
  {(char *)"mjj_JetAbsoluteUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteUp, 0, (char *)0, 0},
  {(char *)"mjj_JetAbsoluteDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteDown, 0, (char *)0, 0},
  {(char *)"mjj_JetAbsoluteyearUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteyearUp, 0, (char *)0, 0},
  {(char *)"mjj_JetAbsoluteyearDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetAbsoluteyearDown, 0, (char *)0, 0},
  {(char *)"mjj_JetBBEC1Up", __pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1Up, 0, (char *)0, 0},
  {(char *)"mjj_JetBBEC1Down", __pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1Down, 0, (char *)0, 0},
  {(char *)"mjj_JetBBEC1yearUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1yearUp, 0, (char *)0, 0},
  {(char *)"mjj_JetBBEC1yearDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetBBEC1yearDown, 0, (char *)0, 0},
  {(char *)"mjj_JetEC2Up", __pyx_getprop_6EMTree_6EMTree_mjj_JetEC2Up, 0, (char *)0, 0},
  {(char *)"mjj_JetEC2Down", __pyx_getprop_6EMTree_6EMTree_mjj_JetEC2Down, 0, (char *)0, 0},
  {(char *)"mjj_JetEC2yearUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetEC2yearUp, 0, (char *)0, 0},
  {(char *)"mjj_JetEC2yearDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetEC2yearDown, 0, (char *)0, 0},
  {(char *)"mjj_JetFlavorQCDUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetFlavorQCDUp, 0, (char *)0, 0},
  {(char *)"mjj_JetFlavorQCDDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetFlavorQCDDown, 0, (char *)0, 0},
  {(char *)"mjj_JetHFUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetHFUp, 0, (char *)0, 0},
  {(char *)"mjj_JetHFDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetHFDown, 0, (char *)0, 0},
  {(char *)"mjj_JetHFyearUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetHFyearUp, 0, (char *)0, 0},
  {(char *)"mjj_JetHFyearDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetHFyearDown, 0, (char *)0, 0},
  {(char *)"mjj_JetRelativeBalUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeBalUp, 0, (char *)0, 0},
  {(char *)"mjj_JetRelativeBalDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeBalDown, 0, (char *)0, 0},
  {(char *)"mjj_JetRelativeSampleUp", __pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeSampleUp, 0, (char *)0, 0},
  {(char *)"mjj_JetRelativeSampleDown", __pyx_getprop_6EMTree_6EMTree_mjj_JetRelativeSampleDown, 0, (char *)0, 0},
  {(char *)"mjj_JERUp", __pyx_getprop_6EMTree_6EMTree_mjj_JERUp, 0, (char *)0, 0},
  {(char *)"mjj_JERDown", __pyx_getprop_6EMTree_6EMTree_mjj_JERDown, 0, (char *)0, 0},
  {(char *)"gen_match_1", __pyx_getprop_6EMTree_6EMTree_gen_match_1, 0, (char *)0, 0},
  {(char *)"gen_match_2", __pyx_getprop_6EMTree_6EMTree_gen_match_2, 0, (char *)0, 0},
  {(char *)"nbtag", __pyx_getprop_6EMTree_6EMTree_nbtag, 0, (char *)0, 0},
  {(char *)"nbtagL", __pyx_getprop_6EMTree_6EMTree_nbtagL, 0, (char *)0, 0},
  {(char *)"njets", __pyx_getprop_6EMTree_6EMTree_njets, 0, (char *)0, 0},
  {(char *)"njets_JetAbsoluteUp", __pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteUp, 0, (char *)0, 0},
  {(char *)"njets_JetAbsoluteDown", __pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteDown, 0, (char *)0, 0},
  {(char *)"njets_JetAbsoluteyearUp", __pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteyearUp, 0, (char *)0, 0},
  {(char *)"njets_JetAbsoluteyearDown", __pyx_getprop_6EMTree_6EMTree_njets_JetAbsoluteyearDown, 0, (char *)0, 0},
  {(char *)"njets_JetBBEC1Up", __pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1Up, 0, (char *)0, 0},
  {(char *)"njets_JetBBEC1Down", __pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1Down, 0, (char *)0, 0},
  {(char *)"njets_JetBBEC1yearUp", __pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1yearUp, 0, (char *)0, 0},
  {(char *)"njets_JetBBEC1yearDown", __pyx_getprop_6EMTree_6EMTree_njets_JetBBEC1yearDown, 0, (char *)0, 0},
  {(char *)"njets_JetEC2Up", __pyx_getprop_6EMTree_6EMTree_njets_JetEC2Up, 0, (char *)0, 0},
  {(char *)"njets_JetEC2Down", __pyx_getprop_6EMTree_6EMTree_njets_JetEC2Down, 0, (char *)0, 0},
  {(char *)"njets_JetEC2yearUp", __pyx_getprop_6EMTree_6EMTree_njets_JetEC2yearUp, 0, (char *)0, 0},
  {(char *)"njets_JetEC2yearDown", __pyx_getprop_6EMTree_6EMTree_njets_JetEC2yearDown, 0, (char *)0, 0},
  {(char *)"njets_JetFlavorQCDUp", __pyx_getprop_6EMTree_6EMTree_njets_JetFlavorQCDUp, 0, (char *)0, 0},
  {(char *)"njets_JetFlavorQCDDown", __pyx_getprop_6EMTree_6EMTree_njets_JetFlavorQCDDown, 0, (char *)0, 0},
  {(char *)"njets_JetHFUp", __pyx_getprop_6EMTree_6EMTree_njets_JetHFUp, 0, (char *)0, 0},
  {(char *)"njets_JetHFDown", __pyx_getprop_6EMTree_6EMTree_njets_JetHFDown, 0, (char *)0, 0},
  {(char *)"njets_JetHFyearUp", __pyx_getprop_6EMTree_6EMTree_njets_JetHFyearUp, 0, (char *)0, 0},
  {(char *)"njets_JetHFyearDown", __pyx_getprop_6EMTree_6EMTree_njets_JetHFyearDown, 0, (char *)0, 0},
  {(char *)"njets_JetRelativeBalUp", __pyx_getprop_6EMTree_6EMTree_njets_JetRelativeBalUp, 0, (char *)0, 0},
  {(char *)"njets_JetRelativeBalDown", __pyx_getprop_6EMTree_6EMTree_njets_JetRelativeBalDown, 0, (char *)0, 0},
  {(char *)"njets_JetRelativeSampleUp", __pyx_getprop_6EMTree_6EMTree_njets_JetRelativeSampleUp, 0, (char *)0, 0},
  {(char *)"njets_JetRelativeSampleDown", __pyx_getprop_6EMTree_6EMTree_njets_JetRelativeSampleDown, 0, (char *)0, 0},
  {(char *)"njets_JERUp", __pyx_getprop_6EMTree_6EMTree_njets_JERUp, 0, (char *)0, 0},
  {(char *)"njets_JERDown", __pyx_getprop_6EMTree_6EMTree_njets_JERDown, 0, (char *)0, 0},
  {(char *)"jpt_1", __pyx_getprop_6EMTree_6EMTree_jpt_1, 0, (char *)0, 0},
  {(char *)"jeta_1", __pyx_getprop_6EMTree_6EMTree_jeta_1, 0, (char *)0, 0},
  {(char *)"jcsv_1", __pyx_getprop_6EMTree_6EMTree_jcsv_1, 0, (char *)0, 0},
  {(char *)"jphi_1", __pyx_getprop_6EMTree_6EMTree_jphi_1, 0, (char *)0, 0},
  {(char *)"jpt_2", __pyx_getprop_6EMTree_6EMTree_jpt_2, 0, (char *)0, 0},
  {(char *)"jeta_2", __pyx_getprop_6EMTree_6EMTree_jeta_2, 0, (char *)0, 0},
  {(char *)"jcsv_2", __pyx_getprop_6EMTree_6EMTree_jcsv_2, 0, (char *)0, 0},
  {(char *)"jphi_2", __pyx_getprop_6EMTree_6EMTree_jphi_2, 0, (char *)0, 0},
  {(char *)"bpt_1", __pyx_getprop_6EMTree_6EMTree_bpt_1, 0, (char *)0, 0},
  {(char *)"bflavor_1", __pyx_getprop_6EMTree_6EMTree_bflavor_1, 0, (char *)0, 0},
  {(char *)"beta_1", __pyx_getprop_6EMTree_6EMTree_beta_1, 0, (char *)0, 0},
  {(char *)"bphi_1", __pyx_getprop_6EMTree_6EMTree_bphi_1, 0, (char *)0, 0},
  {(char *)"passMu23E12", __pyx_getprop_6EMTree_6EMTree_passMu23E12, 0, (char *)0, 0},
  {(char *)"passMu8E23", __pyx_getprop_6EMTree_6EMTree_passMu8E23, 0, (char *)0, 0},
  {(char *)"matchMu23E12_1", __pyx_getprop_6EMTree_6EMTree_matchMu23E12_1, 0, (char *)0, 0},
  {(char *)"matchMu8E23_1", __pyx_getprop_6EMTree_6EMTree_matchMu8E23_1, 0, (char *)0, 0},
  {(char *)"filterMu23E12_1", __pyx_getprop_6EMTree_6EMTree_filterMu23E12_1, 0, (char *)0, 0},
  {(char *)"filterMu8E23_1", __pyx_getprop_6EMTree_6EMTree_filterMu8E23_1, 0, (char *)0, 0},
  {(char *)"matchMu23E12_2", __pyx_getprop_6EMTree_6EMTree_matchMu23E12_2, 0, (char *)0, 0},
  {(char *)"matchMu8E23_2", __pyx_getprop_6EMTree_6EMTree_matchMu8E23_2, 0, (char *)0, 0},
  {(char *)"filterMu23E12_2", __pyx_getprop_6EMTree_6EMTree_filterMu23E12_2, 0, (char *)0, 0},
  {(char *)"filterMu8E23_2", __pyx_getprop_6EMTree_6EMTree_filterMu8E23_2, 0, (char *)0, 0},
  {(char *)"bpt_2", __pyx_getprop_6EMTree_6EMTree_bpt_2, 0, (char *)0, 0},
  {(char *)"bflavor_2", __pyx_getprop_6EMTree_6EMTree_bflavor_2, 0, (char *)0, 0},
  {(char *)"beta_2", __pyx_getprop_6EMTree_6EMTree_beta_2, 0, (char *)0, 0},
  {(char *)"bphi_2", __pyx_getprop_6EMTree_6EMTree_bphi_2, 0, (char *)0, 0},
  {(char *)"pt_top1", __pyx_getprop_6EMTree_6EMTree_pt_top1, 0, (char *)0, 0},
  {(char *)"pt_top2", __pyx_getprop_6EMTree_6EMTree_pt_top2, 0, (char *)0, 0},
  {(char *)"genweight", __pyx_getprop_6EMTree_6EMTree_genweight, 0, (char *)0, 0},
  {(char *)"gen_Higgs_pt", __pyx_getprop_6EMTree_6EMTree_gen_Higgs_pt, 0, (char *)0, 0},
  {(char *)"gen_Higgs_mass", __pyx_getprop_6EMTree_6EMTree_gen_Higgs_mass, 0, (char *)0, 0},
  {(char *)"complained", __pyx_getprop_6EMTree_6EMTree_complained, __pyx_setprop_6EMTree_6EMTree_complained, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6EMTree_EMTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "EMTree.EMTree", /*tp_name*/
  sizeof(struct __pyx_obj_6EMTree_EMTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6EMTree_EMTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6EMTree_EMTree, /*tp_traverse*/
  __pyx_tp_clear_6EMTree_EMTree, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6EMTree_6EMTree_3__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6EMTree_EMTree, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6EMTree_EMTree, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6EMTree_EMTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *__pyx_freelist_6EMTree___pyx_scope_struct____iter__[8];
static int __pyx_freecount_6EMTree___pyx_scope_struct____iter__ = 0;

static PyObject *__pyx_tp_new_6EMTree___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6EMTree___pyx_scope_struct____iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_freelist_6EMTree___pyx_scope_struct____iter__[--__pyx_freecount_6EMTree___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6EMTree___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *p = (struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6EMTree___pyx_scope_struct____iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct____iter__)))) {
    __pyx_freelist_6EMTree___pyx_scope_struct____iter__[__pyx_freecount_6EMTree___pyx_scope_struct____iter__++] = ((struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6EMTree___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *p = (struct __pyx_obj_6EMTree___pyx_scope_struct____iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6EMTree___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "EMTree.__pyx_scope_struct____iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6EMTree___pyx_scope_struct____iter__, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6EMTree___pyx_scope_struct____iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6EMTree___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *__pyx_freelist_6EMTree___pyx_scope_struct_1_where[8];
static int __pyx_freecount_6EMTree___pyx_scope_struct_1_where = 0;

static PyObject *__pyx_tp_new_6EMTree___pyx_scope_struct_1_where(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6EMTree___pyx_scope_struct_1_where > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct_1_where)))) {
    o = (PyObject*)__pyx_freelist_6EMTree___pyx_scope_struct_1_where[--__pyx_freecount_6EMTree___pyx_scope_struct_1_where];
    memset(o, 0, sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct_1_where));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6EMTree___pyx_scope_struct_1_where(PyObject *o) {
  struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *p = (struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_filter);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6EMTree___pyx_scope_struct_1_where < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct_1_where)))) {
    __pyx_freelist_6EMTree___pyx_scope_struct_1_where[__pyx_freecount_6EMTree___pyx_scope_struct_1_where++] = ((struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6EMTree___pyx_scope_struct_1_where(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *p = (struct __pyx_obj_6EMTree___pyx_scope_struct_1_where *)o;
  if (p->__pyx_v_filter) {
    e = (*v)(p->__pyx_v_filter, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6EMTree___pyx_scope_struct_1_where = {
  PyVarObject_HEAD_INIT(0, 0)
  "EMTree.__pyx_scope_struct_1_where", /*tp_name*/
  sizeof(struct __pyx_obj_6EMTree___pyx_scope_struct_1_where), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6EMTree___pyx_scope_struct_1_where, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6EMTree___pyx_scope_struct_1_where, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6EMTree___pyx_scope_struct_1_where, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_EMTree(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_EMTree},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "EMTree",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_AsCObject, __pyx_k_AsCObject, sizeof(__pyx_k_AsCObject), 0, 0, 1, 1},
  {&__pyx_n_s_EMTree, __pyx_k_EMTree, sizeof(__pyx_k_EMTree), 0, 0, 1, 1},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_BadC, __pyx_k_EMTree_Expected_branch_Flag_BadC, sizeof(__pyx_k_EMTree_Expected_branch_Flag_BadC), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_BadP, __pyx_k_EMTree_Expected_branch_Flag_BadP, sizeof(__pyx_k_EMTree_Expected_branch_Flag_BadP), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_Ecal, __pyx_k_EMTree_Expected_branch_Flag_Ecal, sizeof(__pyx_k_EMTree_Expected_branch_Flag_Ecal), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_HBHE, __pyx_k_EMTree_Expected_branch_Flag_HBHE, sizeof(__pyx_k_EMTree_Expected_branch_Flag_HBHE), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_HBHE_2, __pyx_k_EMTree_Expected_branch_Flag_HBHE_2, sizeof(__pyx_k_EMTree_Expected_branch_Flag_HBHE_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_badM, __pyx_k_EMTree_Expected_branch_Flag_badM, sizeof(__pyx_k_EMTree_Expected_branch_Flag_badM), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_dupl, __pyx_k_EMTree_Expected_branch_Flag_dupl, sizeof(__pyx_k_EMTree_Expected_branch_Flag_dupl), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_ecal, __pyx_k_EMTree_Expected_branch_Flag_ecal, sizeof(__pyx_k_EMTree_Expected_branch_Flag_ecal), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_ecal_2, __pyx_k_EMTree_Expected_branch_Flag_ecal_2, sizeof(__pyx_k_EMTree_Expected_branch_Flag_ecal_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_eeBa, __pyx_k_EMTree_Expected_branch_Flag_eeBa, sizeof(__pyx_k_EMTree_Expected_branch_Flag_eeBa), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_glob, __pyx_k_EMTree_Expected_branch_Flag_glob, sizeof(__pyx_k_EMTree_Expected_branch_Flag_glob), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Flag_good, __pyx_k_EMTree_Expected_branch_Flag_good, sizeof(__pyx_k_EMTree_Expected_branch_Flag_good), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_VEt, __pyx_k_EMTree_Expected_branch_Rivet_VEt, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_VEt), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_VPt, __pyx_k_EMTree_Expected_branch_Rivet_VPt, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_VPt), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_err, __pyx_k_EMTree_Expected_branch_Rivet_err, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_err), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_hig, __pyx_k_EMTree_Expected_branch_Rivet_hig, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_hig), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_hig_2, __pyx_k_EMTree_Expected_branch_Rivet_hig_2, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_hig_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_nJe, __pyx_k_EMTree_Expected_branch_Rivet_nJe, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_nJe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_nJe_2, __pyx_k_EMTree_Expected_branch_Rivet_nJe_2, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_nJe_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_p4d, __pyx_k_EMTree_Expected_branch_Rivet_p4d, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_p4d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_p4d_2, __pyx_k_EMTree_Expected_branch_Rivet_p4d_2, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_p4d_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_pro, __pyx_k_EMTree_Expected_branch_Rivet_pro, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_pro), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_sta, __pyx_k_EMTree_Expected_branch_Rivet_sta, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_sta), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_sta_2, __pyx_k_EMTree_Expected_branch_Rivet_sta_2, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_sta_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_Rivet_sta_3, __pyx_k_EMTree_Expected_branch_Rivet_sta_3, sizeof(__pyx_k_EMTree_Expected_branch_Rivet_sta_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_beta_1_do, __pyx_k_EMTree_Expected_branch_beta_1_do, sizeof(__pyx_k_EMTree_Expected_branch_beta_1_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_beta_2_do, __pyx_k_EMTree_Expected_branch_beta_2_do, sizeof(__pyx_k_EMTree_Expected_branch_beta_2_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bflavor_1, __pyx_k_EMTree_Expected_branch_bflavor_1, sizeof(__pyx_k_EMTree_Expected_branch_bflavor_1), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bflavor_2, __pyx_k_EMTree_Expected_branch_bflavor_2, sizeof(__pyx_k_EMTree_Expected_branch_bflavor_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bphi_1_do, __pyx_k_EMTree_Expected_branch_bphi_1_do, sizeof(__pyx_k_EMTree_Expected_branch_bphi_1_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bphi_2_do, __pyx_k_EMTree_Expected_branch_bphi_2_do, sizeof(__pyx_k_EMTree_Expected_branch_bphi_2_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bpt_1_doe, __pyx_k_EMTree_Expected_branch_bpt_1_doe, sizeof(__pyx_k_EMTree_Expected_branch_bpt_1_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bpt_2_doe, __pyx_k_EMTree_Expected_branch_bpt_2_doe, sizeof(__pyx_k_EMTree_Expected_branch_bpt_2_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_bweight_d, __pyx_k_EMTree_Expected_branch_bweight_d, sizeof(__pyx_k_EMTree_Expected_branch_bweight_d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_e_1_does, __pyx_k_EMTree_Expected_branch_e_1_does, sizeof(__pyx_k_EMTree_Expected_branch_e_1_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_e_2_does, __pyx_k_EMTree_Expected_branch_e_2_does, sizeof(__pyx_k_EMTree_Expected_branch_e_2_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_eta_1_doe, __pyx_k_EMTree_Expected_branch_eta_1_doe, sizeof(__pyx_k_EMTree_Expected_branch_eta_1_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_eta_2_doe, __pyx_k_EMTree_Expected_branch_eta_2_doe, sizeof(__pyx_k_EMTree_Expected_branch_eta_2_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_evt_does, __pyx_k_EMTree_Expected_branch_evt_does, sizeof(__pyx_k_EMTree_Expected_branch_evt_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_filterMu2, __pyx_k_EMTree_Expected_branch_filterMu2, sizeof(__pyx_k_EMTree_Expected_branch_filterMu2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_filterMu2_2, __pyx_k_EMTree_Expected_branch_filterMu2_2, sizeof(__pyx_k_EMTree_Expected_branch_filterMu2_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_filterMu8, __pyx_k_EMTree_Expected_branch_filterMu8, sizeof(__pyx_k_EMTree_Expected_branch_filterMu8), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_filterMu8_2, __pyx_k_EMTree_Expected_branch_filterMu8_2, sizeof(__pyx_k_EMTree_Expected_branch_filterMu8_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genM_does, __pyx_k_EMTree_Expected_branch_genM_does, sizeof(__pyx_k_EMTree_Expected_branch_genM_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_gen_Higgs, __pyx_k_EMTree_Expected_branch_gen_Higgs, sizeof(__pyx_k_EMTree_Expected_branch_gen_Higgs), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_gen_Higgs_2, __pyx_k_EMTree_Expected_branch_gen_Higgs_2, sizeof(__pyx_k_EMTree_Expected_branch_gen_Higgs_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_gen_match, __pyx_k_EMTree_Expected_branch_gen_match, sizeof(__pyx_k_EMTree_Expected_branch_gen_match), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_gen_match_2, __pyx_k_EMTree_Expected_branch_gen_match_2, sizeof(__pyx_k_EMTree_Expected_branch_gen_match_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_geneta_1, __pyx_k_EMTree_Expected_branch_geneta_1, sizeof(__pyx_k_EMTree_Expected_branch_geneta_1), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_geneta_2, __pyx_k_EMTree_Expected_branch_geneta_2, sizeof(__pyx_k_EMTree_Expected_branch_geneta_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genpT_doe, __pyx_k_EMTree_Expected_branch_genpT_doe, sizeof(__pyx_k_EMTree_Expected_branch_genpT_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genpX_doe, __pyx_k_EMTree_Expected_branch_genpX_doe, sizeof(__pyx_k_EMTree_Expected_branch_genpX_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genpY_doe, __pyx_k_EMTree_Expected_branch_genpY_doe, sizeof(__pyx_k_EMTree_Expected_branch_genpY_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genpt_1_d, __pyx_k_EMTree_Expected_branch_genpt_1_d, sizeof(__pyx_k_EMTree_Expected_branch_genpt_1_d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genpt_2_d, __pyx_k_EMTree_Expected_branch_genpt_2_d, sizeof(__pyx_k_EMTree_Expected_branch_genpt_2_d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_genweight, __pyx_k_EMTree_Expected_branch_genweight, sizeof(__pyx_k_EMTree_Expected_branch_genweight), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_iso_1_doe, __pyx_k_EMTree_Expected_branch_iso_1_doe, sizeof(__pyx_k_EMTree_Expected_branch_iso_1_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_iso_2_doe, __pyx_k_EMTree_Expected_branch_iso_2_doe, sizeof(__pyx_k_EMTree_Expected_branch_iso_2_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jcsv_1_do, __pyx_k_EMTree_Expected_branch_jcsv_1_do, sizeof(__pyx_k_EMTree_Expected_branch_jcsv_1_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jcsv_2_do, __pyx_k_EMTree_Expected_branch_jcsv_2_do, sizeof(__pyx_k_EMTree_Expected_branch_jcsv_2_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jeta_1_do, __pyx_k_EMTree_Expected_branch_jeta_1_do, sizeof(__pyx_k_EMTree_Expected_branch_jeta_1_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jeta_2_do, __pyx_k_EMTree_Expected_branch_jeta_2_do, sizeof(__pyx_k_EMTree_Expected_branch_jeta_2_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jphi_1_do, __pyx_k_EMTree_Expected_branch_jphi_1_do, sizeof(__pyx_k_EMTree_Expected_branch_jphi_1_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jphi_2_do, __pyx_k_EMTree_Expected_branch_jphi_2_do, sizeof(__pyx_k_EMTree_Expected_branch_jphi_2_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jpt_1_doe, __pyx_k_EMTree_Expected_branch_jpt_1_doe, sizeof(__pyx_k_EMTree_Expected_branch_jpt_1_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_jpt_2_doe, __pyx_k_EMTree_Expected_branch_jpt_2_doe, sizeof(__pyx_k_EMTree_Expected_branch_jpt_2_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_lumi_does, __pyx_k_EMTree_Expected_branch_lumi_does, sizeof(__pyx_k_EMTree_Expected_branch_lumi_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_m_1_does, __pyx_k_EMTree_Expected_branch_m_1_does, sizeof(__pyx_k_EMTree_Expected_branch_m_1_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_m_2_does, __pyx_k_EMTree_Expected_branch_m_2_does, sizeof(__pyx_k_EMTree_Expected_branch_m_2_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_matchMu23, __pyx_k_EMTree_Expected_branch_matchMu23, sizeof(__pyx_k_EMTree_Expected_branch_matchMu23), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_matchMu23_2, __pyx_k_EMTree_Expected_branch_matchMu23_2, sizeof(__pyx_k_EMTree_Expected_branch_matchMu23_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_matchMu8E, __pyx_k_EMTree_Expected_branch_matchMu8E, sizeof(__pyx_k_EMTree_Expected_branch_matchMu8E), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_matchMu8E_2, __pyx_k_EMTree_Expected_branch_matchMu8E_2, sizeof(__pyx_k_EMTree_Expected_branch_matchMu8E_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metSig_do, __pyx_k_EMTree_Expected_branch_metSig_do, sizeof(__pyx_k_EMTree_Expected_branch_metSig_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JERDo, __pyx_k_EMTree_Expected_branch_met_JERDo, sizeof(__pyx_k_EMTree_Expected_branch_met_JERDo), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JERUp, __pyx_k_EMTree_Expected_branch_met_JERUp, sizeof(__pyx_k_EMTree_Expected_branch_met_JERUp), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetAb, __pyx_k_EMTree_Expected_branch_met_JetAb, sizeof(__pyx_k_EMTree_Expected_branch_met_JetAb), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetAb_2, __pyx_k_EMTree_Expected_branch_met_JetAb_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetAb_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetAb_3, __pyx_k_EMTree_Expected_branch_met_JetAb_3, sizeof(__pyx_k_EMTree_Expected_branch_met_JetAb_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetAb_4, __pyx_k_EMTree_Expected_branch_met_JetAb_4, sizeof(__pyx_k_EMTree_Expected_branch_met_JetAb_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetBB, __pyx_k_EMTree_Expected_branch_met_JetBB, sizeof(__pyx_k_EMTree_Expected_branch_met_JetBB), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetBB_2, __pyx_k_EMTree_Expected_branch_met_JetBB_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetBB_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetBB_3, __pyx_k_EMTree_Expected_branch_met_JetBB_3, sizeof(__pyx_k_EMTree_Expected_branch_met_JetBB_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetBB_4, __pyx_k_EMTree_Expected_branch_met_JetBB_4, sizeof(__pyx_k_EMTree_Expected_branch_met_JetBB_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetEC, __pyx_k_EMTree_Expected_branch_met_JetEC, sizeof(__pyx_k_EMTree_Expected_branch_met_JetEC), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetEC_2, __pyx_k_EMTree_Expected_branch_met_JetEC_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetEC_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetEC_3, __pyx_k_EMTree_Expected_branch_met_JetEC_3, sizeof(__pyx_k_EMTree_Expected_branch_met_JetEC_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetEC_4, __pyx_k_EMTree_Expected_branch_met_JetEC_4, sizeof(__pyx_k_EMTree_Expected_branch_met_JetEC_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetFl, __pyx_k_EMTree_Expected_branch_met_JetFl, sizeof(__pyx_k_EMTree_Expected_branch_met_JetFl), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetFl_2, __pyx_k_EMTree_Expected_branch_met_JetFl_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetFl_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetHF, __pyx_k_EMTree_Expected_branch_met_JetHF, sizeof(__pyx_k_EMTree_Expected_branch_met_JetHF), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetHF_2, __pyx_k_EMTree_Expected_branch_met_JetHF_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetHF_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetHF_3, __pyx_k_EMTree_Expected_branch_met_JetHF_3, sizeof(__pyx_k_EMTree_Expected_branch_met_JetHF_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetHF_4, __pyx_k_EMTree_Expected_branch_met_JetHF_4, sizeof(__pyx_k_EMTree_Expected_branch_met_JetHF_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetRe, __pyx_k_EMTree_Expected_branch_met_JetRe, sizeof(__pyx_k_EMTree_Expected_branch_met_JetRe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetRe_2, __pyx_k_EMTree_Expected_branch_met_JetRe_2, sizeof(__pyx_k_EMTree_Expected_branch_met_JetRe_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetRe_3, __pyx_k_EMTree_Expected_branch_met_JetRe_3, sizeof(__pyx_k_EMTree_Expected_branch_met_JetRe_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_JetRe_4, __pyx_k_EMTree_Expected_branch_met_JetRe_4, sizeof(__pyx_k_EMTree_Expected_branch_met_JetRe_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_UESDo, __pyx_k_EMTree_Expected_branch_met_UESDo, sizeof(__pyx_k_EMTree_Expected_branch_met_UESDo), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_UESUp, __pyx_k_EMTree_Expected_branch_met_UESUp, sizeof(__pyx_k_EMTree_Expected_branch_met_UESUp), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_does, __pyx_k_EMTree_Expected_branch_met_does, sizeof(__pyx_k_EMTree_Expected_branch_met_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_px_do, __pyx_k_EMTree_Expected_branch_met_px_do, sizeof(__pyx_k_EMTree_Expected_branch_met_px_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_py_do, __pyx_k_EMTree_Expected_branch_met_py_do, sizeof(__pyx_k_EMTree_Expected_branch_met_py_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_resol, __pyx_k_EMTree_Expected_branch_met_resol, sizeof(__pyx_k_EMTree_Expected_branch_met_resol), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_resol_2, __pyx_k_EMTree_Expected_branch_met_resol_2, sizeof(__pyx_k_EMTree_Expected_branch_met_resol_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_respo, __pyx_k_EMTree_Expected_branch_met_respo, sizeof(__pyx_k_EMTree_Expected_branch_met_respo), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_met_respo_2, __pyx_k_EMTree_Expected_branch_met_respo_2, sizeof(__pyx_k_EMTree_Expected_branch_met_respo_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metcov00, __pyx_k_EMTree_Expected_branch_metcov00, sizeof(__pyx_k_EMTree_Expected_branch_metcov00), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metcov01, __pyx_k_EMTree_Expected_branch_metcov01, sizeof(__pyx_k_EMTree_Expected_branch_metcov01), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metcov10, __pyx_k_EMTree_Expected_branch_metcov10, sizeof(__pyx_k_EMTree_Expected_branch_metcov10), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metcov11, __pyx_k_EMTree_Expected_branch_metcov11, sizeof(__pyx_k_EMTree_Expected_branch_metcov11), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_JE, __pyx_k_EMTree_Expected_branch_metphi_JE, sizeof(__pyx_k_EMTree_Expected_branch_metphi_JE), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_JE_2, __pyx_k_EMTree_Expected_branch_metphi_JE_2, sizeof(__pyx_k_EMTree_Expected_branch_metphi_JE_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je, __pyx_k_EMTree_Expected_branch_metphi_Je, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_10, __pyx_k_EMTree_Expected_branch_metphi_Je_10, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_10), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_11, __pyx_k_EMTree_Expected_branch_metphi_Je_11, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_11), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_12, __pyx_k_EMTree_Expected_branch_metphi_Je_12, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_12), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_13, __pyx_k_EMTree_Expected_branch_metphi_Je_13, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_13), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_14, __pyx_k_EMTree_Expected_branch_metphi_Je_14, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_14), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_15, __pyx_k_EMTree_Expected_branch_metphi_Je_15, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_15), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_16, __pyx_k_EMTree_Expected_branch_metphi_Je_16, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_16), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_17, __pyx_k_EMTree_Expected_branch_metphi_Je_17, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_17), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_18, __pyx_k_EMTree_Expected_branch_metphi_Je_18, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_18), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_19, __pyx_k_EMTree_Expected_branch_metphi_Je_19, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_19), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_2, __pyx_k_EMTree_Expected_branch_metphi_Je_2, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_20, __pyx_k_EMTree_Expected_branch_metphi_Je_20, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_20), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_21, __pyx_k_EMTree_Expected_branch_metphi_Je_21, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_21), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_22, __pyx_k_EMTree_Expected_branch_metphi_Je_22, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_22), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_3, __pyx_k_EMTree_Expected_branch_metphi_Je_3, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_4, __pyx_k_EMTree_Expected_branch_metphi_Je_4, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_5, __pyx_k_EMTree_Expected_branch_metphi_Je_5, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_5), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_6, __pyx_k_EMTree_Expected_branch_metphi_Je_6, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_6), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_7, __pyx_k_EMTree_Expected_branch_metphi_Je_7, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_7), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_8, __pyx_k_EMTree_Expected_branch_metphi_Je_8, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_8), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_Je_9, __pyx_k_EMTree_Expected_branch_metphi_Je_9, sizeof(__pyx_k_EMTree_Expected_branch_metphi_Je_9), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_UE, __pyx_k_EMTree_Expected_branch_metphi_UE, sizeof(__pyx_k_EMTree_Expected_branch_metphi_UE), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_UE_2, __pyx_k_EMTree_Expected_branch_metphi_UE_2, sizeof(__pyx_k_EMTree_Expected_branch_metphi_UE_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_do, __pyx_k_EMTree_Expected_branch_metphi_do, sizeof(__pyx_k_EMTree_Expected_branch_metphi_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_re, __pyx_k_EMTree_Expected_branch_metphi_re, sizeof(__pyx_k_EMTree_Expected_branch_metphi_re), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_re_2, __pyx_k_EMTree_Expected_branch_metphi_re_2, sizeof(__pyx_k_EMTree_Expected_branch_metphi_re_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_re_3, __pyx_k_EMTree_Expected_branch_metphi_re_3, sizeof(__pyx_k_EMTree_Expected_branch_metphi_re_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_metphi_re_4, __pyx_k_EMTree_Expected_branch_metphi_re_4, sizeof(__pyx_k_EMTree_Expected_branch_metphi_re_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JERDo, __pyx_k_EMTree_Expected_branch_mjj_JERDo, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JERDo), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JERUp, __pyx_k_EMTree_Expected_branch_mjj_JERUp, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JERUp), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb, __pyx_k_EMTree_Expected_branch_mjj_JetAb, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetAb), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_2, __pyx_k_EMTree_Expected_branch_mjj_JetAb_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetAb_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_3, __pyx_k_EMTree_Expected_branch_mjj_JetAb_3, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetAb_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_4, __pyx_k_EMTree_Expected_branch_mjj_JetAb_4, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetAb_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB, __pyx_k_EMTree_Expected_branch_mjj_JetBB, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetBB), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_2, __pyx_k_EMTree_Expected_branch_mjj_JetBB_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetBB_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_3, __pyx_k_EMTree_Expected_branch_mjj_JetBB_3, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetBB_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_4, __pyx_k_EMTree_Expected_branch_mjj_JetBB_4, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetBB_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC, __pyx_k_EMTree_Expected_branch_mjj_JetEC, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetEC), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_2, __pyx_k_EMTree_Expected_branch_mjj_JetEC_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetEC_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_3, __pyx_k_EMTree_Expected_branch_mjj_JetEC_3, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetEC_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_4, __pyx_k_EMTree_Expected_branch_mjj_JetEC_4, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetEC_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetFl, __pyx_k_EMTree_Expected_branch_mjj_JetFl, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetFl), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetFl_2, __pyx_k_EMTree_Expected_branch_mjj_JetFl_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetFl_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF, __pyx_k_EMTree_Expected_branch_mjj_JetHF, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetHF), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_2, __pyx_k_EMTree_Expected_branch_mjj_JetHF_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetHF_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_3, __pyx_k_EMTree_Expected_branch_mjj_JetHF_3, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetHF_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_4, __pyx_k_EMTree_Expected_branch_mjj_JetHF_4, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetHF_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe, __pyx_k_EMTree_Expected_branch_mjj_JetRe, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetRe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_2, __pyx_k_EMTree_Expected_branch_mjj_JetRe_2, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetRe_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_3, __pyx_k_EMTree_Expected_branch_mjj_JetRe_3, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetRe_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_4, __pyx_k_EMTree_Expected_branch_mjj_JetRe_4, sizeof(__pyx_k_EMTree_Expected_branch_mjj_JetRe_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_mjj_does, __pyx_k_EMTree_Expected_branch_mjj_does, sizeof(__pyx_k_EMTree_Expected_branch_mjj_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_nbtagL_do, __pyx_k_EMTree_Expected_branch_nbtagL_do, sizeof(__pyx_k_EMTree_Expected_branch_nbtagL_do), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_nbtag_doe, __pyx_k_EMTree_Expected_branch_nbtag_doe, sizeof(__pyx_k_EMTree_Expected_branch_nbtag_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_JER, __pyx_k_EMTree_Expected_branch_njets_JER, sizeof(__pyx_k_EMTree_Expected_branch_njets_JER), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_JER_2, __pyx_k_EMTree_Expected_branch_njets_JER_2, sizeof(__pyx_k_EMTree_Expected_branch_njets_JER_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet, __pyx_k_EMTree_Expected_branch_njets_Jet, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_10, __pyx_k_EMTree_Expected_branch_njets_Jet_10, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_10), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_11, __pyx_k_EMTree_Expected_branch_njets_Jet_11, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_11), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_12, __pyx_k_EMTree_Expected_branch_njets_Jet_12, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_12), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_13, __pyx_k_EMTree_Expected_branch_njets_Jet_13, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_13), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_14, __pyx_k_EMTree_Expected_branch_njets_Jet_14, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_14), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_15, __pyx_k_EMTree_Expected_branch_njets_Jet_15, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_15), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_16, __pyx_k_EMTree_Expected_branch_njets_Jet_16, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_16), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_17, __pyx_k_EMTree_Expected_branch_njets_Jet_17, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_17), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_18, __pyx_k_EMTree_Expected_branch_njets_Jet_18, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_18), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_19, __pyx_k_EMTree_Expected_branch_njets_Jet_19, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_19), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_2, __pyx_k_EMTree_Expected_branch_njets_Jet_2, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_20, __pyx_k_EMTree_Expected_branch_njets_Jet_20, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_20), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_21, __pyx_k_EMTree_Expected_branch_njets_Jet_21, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_21), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_22, __pyx_k_EMTree_Expected_branch_njets_Jet_22, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_22), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_3, __pyx_k_EMTree_Expected_branch_njets_Jet_3, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_3), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_4, __pyx_k_EMTree_Expected_branch_njets_Jet_4, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_4), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_5, __pyx_k_EMTree_Expected_branch_njets_Jet_5, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_5), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_6, __pyx_k_EMTree_Expected_branch_njets_Jet_6, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_6), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_7, __pyx_k_EMTree_Expected_branch_njets_Jet_7, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_7), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_8, __pyx_k_EMTree_Expected_branch_njets_Jet_8, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_8), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_Jet_9, __pyx_k_EMTree_Expected_branch_njets_Jet_9, sizeof(__pyx_k_EMTree_Expected_branch_njets_Jet_9), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_njets_doe, __pyx_k_EMTree_Expected_branch_njets_doe, sizeof(__pyx_k_EMTree_Expected_branch_njets_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_npu_does, __pyx_k_EMTree_Expected_branch_npu_does, sizeof(__pyx_k_EMTree_Expected_branch_npu_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_npv_does, __pyx_k_EMTree_Expected_branch_npv_does, sizeof(__pyx_k_EMTree_Expected_branch_npv_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_numGenJet, __pyx_k_EMTree_Expected_branch_numGenJet, sizeof(__pyx_k_EMTree_Expected_branch_numGenJet), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_passMu23E, __pyx_k_EMTree_Expected_branch_passMu23E, sizeof(__pyx_k_EMTree_Expected_branch_passMu23E), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_passMu8E2, __pyx_k_EMTree_Expected_branch_passMu8E2, sizeof(__pyx_k_EMTree_Expected_branch_passMu8E2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_phi_1_doe, __pyx_k_EMTree_Expected_branch_phi_1_doe, sizeof(__pyx_k_EMTree_Expected_branch_phi_1_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_phi_2_doe, __pyx_k_EMTree_Expected_branch_phi_2_doe, sizeof(__pyx_k_EMTree_Expected_branch_phi_2_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_1_Scal, __pyx_k_EMTree_Expected_branch_pt_1_Scal, sizeof(__pyx_k_EMTree_Expected_branch_pt_1_Scal), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_1_Scal_2, __pyx_k_EMTree_Expected_branch_pt_1_Scal_2, sizeof(__pyx_k_EMTree_Expected_branch_pt_1_Scal_2), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_1_does, __pyx_k_EMTree_Expected_branch_pt_1_does, sizeof(__pyx_k_EMTree_Expected_branch_pt_1_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_2_does, __pyx_k_EMTree_Expected_branch_pt_2_does, sizeof(__pyx_k_EMTree_Expected_branch_pt_2_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_top1_d, __pyx_k_EMTree_Expected_branch_pt_top1_d, sizeof(__pyx_k_EMTree_Expected_branch_pt_top1_d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_pt_top2_d, __pyx_k_EMTree_Expected_branch_pt_top2_d, sizeof(__pyx_k_EMTree_Expected_branch_pt_top2_d), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_q_1_does, __pyx_k_EMTree_Expected_branch_q_1_does, sizeof(__pyx_k_EMTree_Expected_branch_q_1_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_q_2_does, __pyx_k_EMTree_Expected_branch_q_2_does, sizeof(__pyx_k_EMTree_Expected_branch_q_2_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_run_does, __pyx_k_EMTree_Expected_branch_run_does, sizeof(__pyx_k_EMTree_Expected_branch_run_does), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_vispX_doe, __pyx_k_EMTree_Expected_branch_vispX_doe, sizeof(__pyx_k_EMTree_Expected_branch_vispX_doe), 0, 0, 1, 0},
  {&__pyx_kp_s_EMTree_Expected_branch_vispY_doe, __pyx_k_EMTree_Expected_branch_vispY_doe, sizeof(__pyx_k_EMTree_Expected_branch_vispY_doe), 0, 0, 1, 0},
  {&__pyx_n_s_EMTree___iter, __pyx_k_EMTree___iter, sizeof(__pyx_k_EMTree___iter), 0, 0, 1, 1},
  {&__pyx_kp_s_EMTree_pyx, __pyx_k_EMTree_pyx, sizeof(__pyx_k_EMTree_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_EMTree_where, __pyx_k_EMTree_where, sizeof(__pyx_k_EMTree_where), 0, 0, 1, 1},
  {&__pyx_n_s_ROOT, __pyx_k_ROOT, sizeof(__pyx_k_ROOT), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_Warning, __pyx_k_Warning, sizeof(__pyx_k_Warning), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_category, __pyx_k_category, sizeof(__pyx_k_category), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_formatwarning, __pyx_k_formatwarning, sizeof(__pyx_k_formatwarning), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_lineno, __pyx_k_lineno, sizeof(__pyx_k_lineno), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_n_s_my_warning_format, __pyx_k_my_warning_format, sizeof(__pyx_k_my_warning_format), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_ttree, __pyx_k_ttree, sizeof(__pyx_k_ttree), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_where, __pyx_k_where, sizeof(__pyx_k_where), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_Warning = __Pyx_GetBuiltinName(__pyx_n_s_Warning); if (!__pyx_builtin_Warning) __PYX_ERR(0, 725, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "EMTree.pyx":725
 *         #if not self.run_branch and "run" not in self.complained:
 *         if not self.run_branch and "run":
 *             warnings.warn( "EMTree: Expected branch run does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("run")
 *         else:
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_run_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "EMTree.pyx":734
 *         #if not self.lumi_branch and "lumi" not in self.complained:
 *         if not self.lumi_branch and "lumi":
 *             warnings.warn( "EMTree: Expected branch lumi does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("lumi")
 *         else:
 */
  __pyx_tuple__3 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_lumi_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "EMTree.pyx":743
 *         #if not self.evt_branch and "evt" not in self.complained:
 *         if not self.evt_branch and "evt":
 *             warnings.warn( "EMTree: Expected branch evt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("evt")
 *         else:
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_evt_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "EMTree.pyx":752
 *         #if not self.genpX_branch and "genpX" not in self.complained:
 *         if not self.genpX_branch and "genpX":
 *             warnings.warn( "EMTree: Expected branch genpX does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpX")
 *         else:
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genpX_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 752, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "EMTree.pyx":761
 *         #if not self.genpY_branch and "genpY" not in self.complained:
 *         if not self.genpY_branch and "genpY":
 *             warnings.warn( "EMTree: Expected branch genpY does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpY")
 *         else:
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genpY_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "EMTree.pyx":770
 *         #if not self.genM_branch and "genM" not in self.complained:
 *         if not self.genM_branch and "genM":
 *             warnings.warn( "EMTree: Expected branch genM does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genM")
 *         else:
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genM_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "EMTree.pyx":779
 *         #if not self.genpT_branch and "genpT" not in self.complained:
 *         if not self.genpT_branch and "genpT":
 *             warnings.warn( "EMTree: Expected branch genpT does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpT")
 *         else:
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genpT_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "EMTree.pyx":788
 *         #if not self.vispX_branch and "vispX" not in self.complained:
 *         if not self.vispX_branch and "vispX":
 *             warnings.warn( "EMTree: Expected branch vispX does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("vispX")
 *         else:
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_vispX_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "EMTree.pyx":797
 *         #if not self.vispY_branch and "vispY" not in self.complained:
 *         if not self.vispY_branch and "vispY":
 *             warnings.warn( "EMTree: Expected branch vispY does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("vispY")
 *         else:
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_vispY_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "EMTree.pyx":806
 *         #if not self.genpt_1_branch and "genpt_1" not in self.complained:
 *         if not self.genpt_1_branch and "genpt_1":
 *             warnings.warn( "EMTree: Expected branch genpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpt_1")
 *         else:
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genpt_1_d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "EMTree.pyx":815
 *         #if not self.geneta_1_branch and "geneta_1" not in self.complained:
 *         if not self.geneta_1_branch and "geneta_1":
 *             warnings.warn( "EMTree: Expected branch geneta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("geneta_1")
 *         else:
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_geneta_1, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "EMTree.pyx":824
 *         #if not self.genpt_2_branch and "genpt_2" not in self.complained:
 *         if not self.genpt_2_branch and "genpt_2":
 *             warnings.warn( "EMTree: Expected branch genpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genpt_2")
 *         else:
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genpt_2_d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "EMTree.pyx":833
 *         #if not self.geneta_2_branch and "geneta_2" not in self.complained:
 *         if not self.geneta_2_branch and "geneta_2":
 *             warnings.warn( "EMTree: Expected branch geneta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("geneta_2")
 *         else:
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_geneta_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "EMTree.pyx":842
 *         #if not self.Rivet_VEta_branch and "Rivet_VEta" not in self.complained:
 *         if not self.Rivet_VEta_branch and "Rivet_VEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_VEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_VEta")
 *         else:
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_VEt, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "EMTree.pyx":851
 *         #if not self.Rivet_VPt_branch and "Rivet_VPt" not in self.complained:
 *         if not self.Rivet_VPt_branch and "Rivet_VPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_VPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_VPt")
 *         else:
 */
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_VPt, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "EMTree.pyx":860
 *         #if not self.Rivet_errorCode_branch and "Rivet_errorCode" not in self.complained:
 *         if not self.Rivet_errorCode_branch and "Rivet_errorCode":
 *             warnings.warn( "EMTree: Expected branch Rivet_errorCode does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_errorCode")
 *         else:
 */
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_err, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "EMTree.pyx":869
 *         #if not self.Rivet_higgsEta_branch and "Rivet_higgsEta" not in self.complained:
 *         if not self.Rivet_higgsEta_branch and "Rivet_higgsEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_higgsEta")
 *         else:
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_hig, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "EMTree.pyx":878
 *         #if not self.Rivet_higgsPt_branch and "Rivet_higgsPt" not in self.complained:
 *         if not self.Rivet_higgsPt_branch and "Rivet_higgsPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_higgsPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_higgsPt")
 *         else:
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_hig_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "EMTree.pyx":887
 *         #if not self.Rivet_nJets25_branch and "Rivet_nJets25" not in self.complained:
 *         if not self.Rivet_nJets25_branch and "Rivet_nJets25":
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets25 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_nJets25")
 *         else:
 */
  __pyx_tuple__20 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_nJe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "EMTree.pyx":896
 *         #if not self.Rivet_nJets30_branch and "Rivet_nJets30" not in self.complained:
 *         if not self.Rivet_nJets30_branch and "Rivet_nJets30":
 *             warnings.warn( "EMTree: Expected branch Rivet_nJets30 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_nJets30")
 *         else:
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_nJe_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "EMTree.pyx":905
 *         #if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta" not in self.complained:
 *         if not self.Rivet_p4decay_VEta_branch and "Rivet_p4decay_VEta":
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VEta does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_p4decay_VEta")
 *         else:
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_p4d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "EMTree.pyx":914
 *         #if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt" not in self.complained:
 *         if not self.Rivet_p4decay_VPt_branch and "Rivet_p4decay_VPt":
 *             warnings.warn( "EMTree: Expected branch Rivet_p4decay_VPt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_p4decay_VPt")
 *         else:
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_p4d_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "EMTree.pyx":923
 *         #if not self.Rivet_prodMode_branch and "Rivet_prodMode" not in self.complained:
 *         if not self.Rivet_prodMode_branch and "Rivet_prodMode":
 *             warnings.warn( "EMTree: Expected branch Rivet_prodMode does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_prodMode")
 *         else:
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_pro, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "EMTree.pyx":932
 *         #if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat" not in self.complained:
 *         if not self.Rivet_stage0_cat_branch and "Rivet_stage0_cat":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage0_cat does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage0_cat")
 *         else:
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_sta, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "EMTree.pyx":941
 *         #if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_fine_cat_pTjet30GeV_branch and "Rivet_stage1_1_fine_cat_pTjet30GeV":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_fine_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage1_1_fine_cat_pTjet30GeV")
 *         else:
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_sta_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "EMTree.pyx":950
 *         #if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV" not in self.complained:
 *         if not self.Rivet_stage1_1_cat_pTjet30GeV_branch and "Rivet_stage1_1_cat_pTjet30GeV":
 *             warnings.warn( "EMTree: Expected branch Rivet_stage1_1_cat_pTjet30GeV does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Rivet_stage1_1_cat_pTjet30GeV")
 *         else:
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Rivet_sta_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "EMTree.pyx":959
 *         #if not self.npv_branch and "npv" not in self.complained:
 *         if not self.npv_branch and "npv":
 *             warnings.warn( "EMTree: Expected branch npv does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("npv")
 *         else:
 */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_npv_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "EMTree.pyx":968
 *         #if not self.npu_branch and "npu" not in self.complained:
 *         if not self.npu_branch and "npu":
 *             warnings.warn( "EMTree: Expected branch npu does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("npu")
 *         else:
 */
  __pyx_tuple__29 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_npu_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "EMTree.pyx":977
 *         #if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp" not in self.complained:
 *         if not self.pt_1_ScaleUp_branch and "pt_1_ScaleUp":
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1_ScaleUp")
 *         else:
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_1_Scal, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "EMTree.pyx":986
 *         #if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown" not in self.complained:
 *         if not self.pt_1_ScaleDown_branch and "pt_1_ScaleDown":
 *             warnings.warn( "EMTree: Expected branch pt_1_ScaleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1_ScaleDown")
 *         else:
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_1_Scal_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "EMTree.pyx":995
 *         #if not self.pt_1_branch and "pt_1" not in self.complained:
 *         if not self.pt_1_branch and "pt_1":
 *             warnings.warn( "EMTree: Expected branch pt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_1")
 *         else:
 */
  __pyx_tuple__32 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_1_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "EMTree.pyx":1004
 *         #if not self.phi_1_branch and "phi_1" not in self.complained:
 *         if not self.phi_1_branch and "phi_1":
 *             warnings.warn( "EMTree: Expected branch phi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("phi_1")
 *         else:
 */
  __pyx_tuple__33 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_phi_1_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "EMTree.pyx":1013
 *         #if not self.eta_1_branch and "eta_1" not in self.complained:
 *         if not self.eta_1_branch and "eta_1":
 *             warnings.warn( "EMTree: Expected branch eta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("eta_1")
 *         else:
 */
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_eta_1_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "EMTree.pyx":1022
 *         #if not self.m_1_branch and "m_1" not in self.complained:
 *         if not self.m_1_branch and "m_1":
 *             warnings.warn( "EMTree: Expected branch m_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("m_1")
 *         else:
 */
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_m_1_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "EMTree.pyx":1031
 *         #if not self.e_1_branch and "e_1" not in self.complained:
 *         if not self.e_1_branch and "e_1":
 *             warnings.warn( "EMTree: Expected branch e_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("e_1")
 *         else:
 */
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_e_1_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "EMTree.pyx":1040
 *         #if not self.q_1_branch and "q_1" not in self.complained:
 *         if not self.q_1_branch and "q_1":
 *             warnings.warn( "EMTree: Expected branch q_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("q_1")
 *         else:
 */
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_q_1_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "EMTree.pyx":1049
 *         #if not self.iso_1_branch and "iso_1" not in self.complained:
 *         if not self.iso_1_branch and "iso_1":
 *             warnings.warn( "EMTree: Expected branch iso_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("iso_1")
 *         else:
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_iso_1_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "EMTree.pyx":1058
 *         #if not self.pt_2_branch and "pt_2" not in self.complained:
 *         if not self.pt_2_branch and "pt_2":
 *             warnings.warn( "EMTree: Expected branch pt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_2")
 *         else:
 */
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_2_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "EMTree.pyx":1067
 *         #if not self.phi_2_branch and "phi_2" not in self.complained:
 *         if not self.phi_2_branch and "phi_2":
 *             warnings.warn( "EMTree: Expected branch phi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("phi_2")
 *         else:
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_phi_2_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "EMTree.pyx":1076
 *         #if not self.eta_2_branch and "eta_2" not in self.complained:
 *         if not self.eta_2_branch and "eta_2":
 *             warnings.warn( "EMTree: Expected branch eta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("eta_2")
 *         else:
 */
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_eta_2_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "EMTree.pyx":1085
 *         #if not self.m_2_branch and "m_2" not in self.complained:
 *         if not self.m_2_branch and "m_2":
 *             warnings.warn( "EMTree: Expected branch m_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("m_2")
 *         else:
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_m_2_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "EMTree.pyx":1094
 *         #if not self.e_2_branch and "e_2" not in self.complained:
 *         if not self.e_2_branch and "e_2":
 *             warnings.warn( "EMTree: Expected branch e_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("e_2")
 *         else:
 */
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_e_2_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "EMTree.pyx":1103
 *         #if not self.q_2_branch and "q_2" not in self.complained:
 *         if not self.q_2_branch and "q_2":
 *             warnings.warn( "EMTree: Expected branch q_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("q_2")
 *         else:
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_q_2_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "EMTree.pyx":1112
 *         #if not self.iso_2_branch and "iso_2" not in self.complained:
 *         if not self.iso_2_branch and "iso_2":
 *             warnings.warn( "EMTree: Expected branch iso_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("iso_2")
 *         else:
 */
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_iso_2_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "EMTree.pyx":1121
 *         #if not self.numGenJets_branch and "numGenJets" not in self.complained:
 *         if not self.numGenJets_branch and "numGenJets":
 *             warnings.warn( "EMTree: Expected branch numGenJets does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("numGenJets")
 *         else:
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_numGenJet, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "EMTree.pyx":1130
 *         #if not self.bweight_branch and "bweight" not in self.complained:
 *         if not self.bweight_branch and "bweight":
 *             warnings.warn( "EMTree: Expected branch bweight does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bweight")
 *         else:
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bweight_d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "EMTree.pyx":1139
 *         #if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibReducedMINIAODFilter_branch and "Flag_ecalBadCalibReducedMINIAODFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibReducedMINIAODFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_ecalBadCalibReducedMINIAODFilter")
 *         else:
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_ecal, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "EMTree.pyx":1148
 *         #if not self.Flag_goodVertices_branch and "Flag_goodVertices" not in self.complained:
 *         if not self.Flag_goodVertices_branch and "Flag_goodVertices":
 *             warnings.warn( "EMTree: Expected branch Flag_goodVertices does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_goodVertices")
 *         else:
 */
  __pyx_tuple__49 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_good, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "EMTree.pyx":1157
 *         #if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter" not in self.complained:
 *         if not self.Flag_globalSuperTightHalo2016Filter_branch and "Flag_globalSuperTightHalo2016Filter":
 *             warnings.warn( "EMTree: Expected branch Flag_globalSuperTightHalo2016Filter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_globalSuperTightHalo2016Filter")
 *         else:
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_glob, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "EMTree.pyx":1166
 *         #if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter" not in self.complained:
 *         if not self.Flag_eeBadScFilter_branch and "Flag_eeBadScFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_eeBadScFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_eeBadScFilter")
 *         else:
 */
  __pyx_tuple__51 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_eeBa, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "EMTree.pyx":1175
 *         #if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter" not in self.complained:
 *         if not self.Flag_ecalBadCalibFilter_branch and "Flag_ecalBadCalibFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_ecalBadCalibFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_ecalBadCalibFilter")
 *         else:
 */
  __pyx_tuple__52 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_ecal_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "EMTree.pyx":1184
 *         #if not self.Flag_badMuons_branch and "Flag_badMuons" not in self.complained:
 *         if not self.Flag_badMuons_branch and "Flag_badMuons":
 *             warnings.warn( "EMTree: Expected branch Flag_badMuons does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_badMuons")
 *         else:
 */
  __pyx_tuple__53 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_badM, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "EMTree.pyx":1193
 *         #if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons" not in self.complained:
 *         if not self.Flag_duplicateMuons_branch and "Flag_duplicateMuons":
 *             warnings.warn( "EMTree: Expected branch Flag_duplicateMuons does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_duplicateMuons")
 *         else:
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_dupl, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "EMTree.pyx":1202
 *         #if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseIsoFilter_branch and "Flag_HBHENoiseIsoFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseIsoFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_HBHENoiseIsoFilter")
 *         else:
 */
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_HBHE, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "EMTree.pyx":1211
 *         #if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter" not in self.complained:
 *         if not self.Flag_HBHENoiseFilter_branch and "Flag_HBHENoiseFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_HBHENoiseFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_HBHENoiseFilter")
 *         else:
 */
  __pyx_tuple__56 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_HBHE_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "EMTree.pyx":1220
 *         #if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter" not in self.complained:
 *         if not self.Flag_EcalDeadCellTriggerPrimitiveFilter_branch and "Flag_EcalDeadCellTriggerPrimitiveFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_EcalDeadCellTriggerPrimitiveFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_EcalDeadCellTriggerPrimitiveFilter")
 *         else:
 */
  __pyx_tuple__57 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_Ecal, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "EMTree.pyx":1229
 *         #if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter" not in self.complained:
 *         if not self.Flag_BadPFMuonFilter_branch and "Flag_BadPFMuonFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_BadPFMuonFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_BadPFMuonFilter")
 *         else:
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_BadP, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "EMTree.pyx":1238
 *         #if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter" not in self.complained:
 *         if not self.Flag_BadChargedCandidateFilter_branch and "Flag_BadChargedCandidateFilter":
 *             warnings.warn( "EMTree: Expected branch Flag_BadChargedCandidateFilter does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("Flag_BadChargedCandidateFilter")
 *         else:
 */
  __pyx_tuple__59 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_Flag_BadC, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "EMTree.pyx":1247
 *         #if not self.met_branch and "met" not in self.complained:
 *         if not self.met_branch and "met":
 *             warnings.warn( "EMTree: Expected branch met does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met")
 *         else:
 */
  __pyx_tuple__60 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "EMTree.pyx":1256
 *         #if not self.metSig_branch and "metSig" not in self.complained:
 *         if not self.metSig_branch and "metSig":
 *             warnings.warn( "EMTree: Expected branch metSig does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metSig")
 *         else:
 */
  __pyx_tuple__61 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metSig_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "EMTree.pyx":1265
 *         #if not self.metcov00_branch and "metcov00" not in self.complained:
 *         if not self.metcov00_branch and "metcov00":
 *             warnings.warn( "EMTree: Expected branch metcov00 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov00")
 *         else:
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metcov00, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "EMTree.pyx":1274
 *         #if not self.metcov10_branch and "metcov10" not in self.complained:
 *         if not self.metcov10_branch and "metcov10":
 *             warnings.warn( "EMTree: Expected branch metcov10 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov10")
 *         else:
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metcov10, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "EMTree.pyx":1283
 *         #if not self.metcov11_branch and "metcov11" not in self.complained:
 *         if not self.metcov11_branch and "metcov11":
 *             warnings.warn( "EMTree: Expected branch metcov11 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov11")
 *         else:
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metcov11, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "EMTree.pyx":1292
 *         #if not self.metcov01_branch and "metcov01" not in self.complained:
 *         if not self.metcov01_branch and "metcov01":
 *             warnings.warn( "EMTree: Expected branch metcov01 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metcov01")
 *         else:
 */
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metcov01, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "EMTree.pyx":1301
 *         #if not self.metphi_branch and "metphi" not in self.complained:
 *         if not self.metphi_branch and "metphi":
 *             warnings.warn( "EMTree: Expected branch metphi does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi")
 *         else:
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "EMTree.pyx":1310
 *         #if not self.met_py_branch and "met_py" not in self.complained:
 *         if not self.met_py_branch and "met_py":
 *             warnings.warn( "EMTree: Expected branch met_py does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_py")
 *         else:
 */
  __pyx_tuple__67 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_py_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 1310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "EMTree.pyx":1319
 *         #if not self.met_px_branch and "met_px" not in self.complained:
 *         if not self.met_px_branch and "met_px":
 *             warnings.warn( "EMTree: Expected branch met_px does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_px")
 *         else:
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_px_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "EMTree.pyx":1328
 *         #if not self.met_UESUp_branch and "met_UESUp" not in self.complained:
 *         if not self.met_UESUp_branch and "met_UESUp":
 *             warnings.warn( "EMTree: Expected branch met_UESUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_UESUp")
 *         else:
 */
  __pyx_tuple__69 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_UESUp, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "EMTree.pyx":1337
 *         #if not self.metphi_UESUp_branch and "metphi_UESUp" not in self.complained:
 *         if not self.metphi_UESUp_branch and "metphi_UESUp":
 *             warnings.warn( "EMTree: Expected branch metphi_UESUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_UESUp")
 *         else:
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_UE, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "EMTree.pyx":1346
 *         #if not self.met_UESDown_branch and "met_UESDown" not in self.complained:
 *         if not self.met_UESDown_branch and "met_UESDown":
 *             warnings.warn( "EMTree: Expected branch met_UESDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_UESDown")
 *         else:
 */
  __pyx_tuple__71 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_UESDo, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 1346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "EMTree.pyx":1355
 *         #if not self.metphi_UESDown_branch and "metphi_UESDown" not in self.complained:
 *         if not self.metphi_UESDown_branch and "metphi_UESDown":
 *             warnings.warn( "EMTree: Expected branch metphi_UESDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_UESDown")
 *         else:
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_UE_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 1355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "EMTree.pyx":1364
 *         #if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp" not in self.complained:
 *         if not self.met_JetAbsoluteUp_branch and "met_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteUp")
 *         else:
 */
  __pyx_tuple__73 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetAb, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 1364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "EMTree.pyx":1373
 *         #if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteUp_branch and "metphi_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteUp")
 *         else:
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 1373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "EMTree.pyx":1382
 *         #if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown" not in self.complained:
 *         if not self.met_JetAbsoluteDown_branch and "met_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteDown")
 *         else:
 */
  __pyx_tuple__75 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetAb_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "EMTree.pyx":1391
 *         #if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteDown_branch and "metphi_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteDown")
 *         else:
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "EMTree.pyx":1400
 *         #if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp" not in self.complained:
 *         if not self.met_JetAbsoluteyearUp_branch and "met_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteyearUp")
 *         else:
 */
  __pyx_tuple__77 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetAb_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "EMTree.pyx":1409
 *         #if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearUp_branch and "metphi_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteyearUp")
 *         else:
 */
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 1409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "EMTree.pyx":1418
 *         #if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown" not in self.complained:
 *         if not self.met_JetAbsoluteyearDown_branch and "met_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetAbsoluteyearDown")
 *         else:
 */
  __pyx_tuple__79 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetAb_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "EMTree.pyx":1427
 *         #if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown" not in self.complained:
 *         if not self.metphi_JetAbsoluteyearDown_branch and "metphi_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetAbsoluteyearDown")
 *         else:
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "EMTree.pyx":1436
 *         #if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up" not in self.complained:
 *         if not self.met_JetBBEC1Up_branch and "met_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1Up")
 *         else:
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetBB, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 1436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "EMTree.pyx":1445
 *         #if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up" not in self.complained:
 *         if not self.metphi_JetBBEC1Up_branch and "metphi_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1Up")
 *         else:
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_5, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "EMTree.pyx":1454
 *         #if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down" not in self.complained:
 *         if not self.met_JetBBEC1Down_branch and "met_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1Down")
 *         else:
 */
  __pyx_tuple__83 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetBB_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "EMTree.pyx":1463
 *         #if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down" not in self.complained:
 *         if not self.metphi_JetBBEC1Down_branch and "metphi_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1Down")
 *         else:
 */
  __pyx_tuple__84 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_6, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "EMTree.pyx":1472
 *         #if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp" not in self.complained:
 *         if not self.met_JetBBEC1yearUp_branch and "met_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1yearUp")
 *         else:
 */
  __pyx_tuple__85 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetBB_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "EMTree.pyx":1481
 *         #if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp" not in self.complained:
 *         if not self.metphi_JetBBEC1yearUp_branch and "metphi_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1yearUp")
 *         else:
 */
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_7, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "EMTree.pyx":1490
 *         #if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown" not in self.complained:
 *         if not self.met_JetBBEC1yearDown_branch and "met_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetBBEC1yearDown")
 *         else:
 */
  __pyx_tuple__87 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetBB_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "EMTree.pyx":1499
 *         #if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown" not in self.complained:
 *         if not self.metphi_JetBBEC1yearDown_branch and "metphi_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetBBEC1yearDown")
 *         else:
 */
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_8, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 1499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "EMTree.pyx":1508
 *         #if not self.met_JetEC2Up_branch and "met_JetEC2Up" not in self.complained:
 *         if not self.met_JetEC2Up_branch and "met_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2Up")
 *         else:
 */
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetEC, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 1508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "EMTree.pyx":1517
 *         #if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up" not in self.complained:
 *         if not self.metphi_JetEC2Up_branch and "metphi_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2Up")
 *         else:
 */
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_9, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "EMTree.pyx":1526
 *         #if not self.met_JetEC2Down_branch and "met_JetEC2Down" not in self.complained:
 *         if not self.met_JetEC2Down_branch and "met_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2Down")
 *         else:
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetEC_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "EMTree.pyx":1535
 *         #if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down" not in self.complained:
 *         if not self.metphi_JetEC2Down_branch and "metphi_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2Down")
 *         else:
 */
  __pyx_tuple__92 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_10, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "EMTree.pyx":1544
 *         #if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp" not in self.complained:
 *         if not self.met_JetEC2yearUp_branch and "met_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2yearUp")
 *         else:
 */
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetEC_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 1544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "EMTree.pyx":1553
 *         #if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp" not in self.complained:
 *         if not self.metphi_JetEC2yearUp_branch and "metphi_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2yearUp")
 *         else:
 */
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_11, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "EMTree.pyx":1562
 *         #if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown" not in self.complained:
 *         if not self.met_JetEC2yearDown_branch and "met_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetEC2yearDown")
 *         else:
 */
  __pyx_tuple__95 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetEC_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "EMTree.pyx":1571
 *         #if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown" not in self.complained:
 *         if not self.metphi_JetEC2yearDown_branch and "metphi_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetEC2yearDown")
 *         else:
 */
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_12, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "EMTree.pyx":1580
 *         #if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp" not in self.complained:
 *         if not self.met_JetFlavorQCDUp_branch and "met_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetFlavorQCDUp")
 *         else:
 */
  __pyx_tuple__97 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetFl, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 1580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "EMTree.pyx":1589
 *         #if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp" not in self.complained:
 *         if not self.metphi_JetFlavorQCDUp_branch and "metphi_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetFlavorQCDUp")
 *         else:
 */
  __pyx_tuple__98 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_13, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "EMTree.pyx":1598
 *         #if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown" not in self.complained:
 *         if not self.met_JetFlavorQCDDown_branch and "met_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch met_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetFlavorQCDDown")
 *         else:
 */
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetFl_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "EMTree.pyx":1607
 *         #if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown" not in self.complained:
 *         if not self.metphi_JetFlavorQCDDown_branch and "metphi_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetFlavorQCDDown")
 *         else:
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_14, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "EMTree.pyx":1616
 *         #if not self.met_JetHFUp_branch and "met_JetHFUp" not in self.complained:
 *         if not self.met_JetHFUp_branch and "met_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch met_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFUp")
 *         else:
 */
  __pyx_tuple__101 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetHF, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 1616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "EMTree.pyx":1625
 *         #if not self.metphi_JetHFUp_branch and "metphi_JetHFUp" not in self.complained:
 *         if not self.metphi_JetHFUp_branch and "metphi_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFUp")
 *         else:
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_15, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "EMTree.pyx":1634
 *         #if not self.met_JetHFDown_branch and "met_JetHFDown" not in self.complained:
 *         if not self.met_JetHFDown_branch and "met_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch met_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFDown")
 *         else:
 */
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetHF_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 1634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "EMTree.pyx":1643
 *         #if not self.metphi_JetHFDown_branch and "metphi_JetHFDown" not in self.complained:
 *         if not self.metphi_JetHFDown_branch and "metphi_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFDown")
 *         else:
 */
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_16, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "EMTree.pyx":1652
 *         #if not self.met_JetHFyearUp_branch and "met_JetHFyearUp" not in self.complained:
 *         if not self.met_JetHFyearUp_branch and "met_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFyearUp")
 *         else:
 */
  __pyx_tuple__105 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetHF_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "EMTree.pyx":1661
 *         #if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp" not in self.complained:
 *         if not self.metphi_JetHFyearUp_branch and "metphi_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFyearUp")
 *         else:
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_17, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "EMTree.pyx":1670
 *         #if not self.met_JetHFyearDown_branch and "met_JetHFyearDown" not in self.complained:
 *         if not self.met_JetHFyearDown_branch and "met_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch met_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetHFyearDown")
 *         else:
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetHF_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 1670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "EMTree.pyx":1679
 *         #if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown" not in self.complained:
 *         if not self.metphi_JetHFyearDown_branch and "metphi_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetHFyearDown")
 *         else:
 */
  __pyx_tuple__108 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_18, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 1679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "EMTree.pyx":1688
 *         #if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp" not in self.complained:
 *         if not self.met_JetRelativeBalUp_branch and "met_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeBalUp")
 *         else:
 */
  __pyx_tuple__109 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetRe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "EMTree.pyx":1697
 *         #if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp" not in self.complained:
 *         if not self.metphi_JetRelativeBalUp_branch and "metphi_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeBalUp")
 *         else:
 */
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_19, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "EMTree.pyx":1706
 *         #if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown" not in self.complained:
 *         if not self.met_JetRelativeBalDown_branch and "met_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeBalDown")
 *         else:
 */
  __pyx_tuple__111 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetRe_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "EMTree.pyx":1715
 *         #if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown" not in self.complained:
 *         if not self.metphi_JetRelativeBalDown_branch and "metphi_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeBalDown")
 *         else:
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_20, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 1715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "EMTree.pyx":1724
 *         #if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp" not in self.complained:
 *         if not self.met_JetRelativeSampleUp_branch and "met_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeSampleUp")
 *         else:
 */
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetRe_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 1724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "EMTree.pyx":1733
 *         #if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp" not in self.complained:
 *         if not self.metphi_JetRelativeSampleUp_branch and "metphi_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeSampleUp")
 *         else:
 */
  __pyx_tuple__114 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_21, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "EMTree.pyx":1742
 *         #if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown" not in self.complained:
 *         if not self.met_JetRelativeSampleDown_branch and "met_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch met_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JetRelativeSampleDown")
 *         else:
 */
  __pyx_tuple__115 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JetRe_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "EMTree.pyx":1751
 *         #if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown" not in self.complained:
 *         if not self.metphi_JetRelativeSampleDown_branch and "metphi_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JetRelativeSampleDown")
 *         else:
 */
  __pyx_tuple__116 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_Je_22, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "EMTree.pyx":1760
 *         #if not self.met_JERUp_branch and "met_JERUp" not in self.complained:
 *         if not self.met_JERUp_branch and "met_JERUp":
 *             warnings.warn( "EMTree: Expected branch met_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JERUp")
 *         else:
 */
  __pyx_tuple__117 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JERUp, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 1760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "EMTree.pyx":1769
 *         #if not self.metphi_JERUp_branch and "metphi_JERUp" not in self.complained:
 *         if not self.metphi_JERUp_branch and "metphi_JERUp":
 *             warnings.warn( "EMTree: Expected branch metphi_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JERUp")
 *         else:
 */
  __pyx_tuple__118 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_JE, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 1769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "EMTree.pyx":1778
 *         #if not self.met_JERDown_branch and "met_JERDown" not in self.complained:
 *         if not self.met_JERDown_branch and "met_JERDown":
 *             warnings.warn( "EMTree: Expected branch met_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_JERDown")
 *         else:
 */
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_JERDo, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "EMTree.pyx":1787
 *         #if not self.metphi_JERDown_branch and "metphi_JERDown" not in self.complained:
 *         if not self.metphi_JERDown_branch and "metphi_JERDown":
 *             warnings.warn( "EMTree: Expected branch metphi_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_JERDown")
 *         else:
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_JE_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 1787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "EMTree.pyx":1796
 *         #if not self.met_responseUp_branch and "met_responseUp" not in self.complained:
 *         if not self.met_responseUp_branch and "met_responseUp":
 *             warnings.warn( "EMTree: Expected branch met_responseUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_responseUp")
 *         else:
 */
  __pyx_tuple__121 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_respo, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "EMTree.pyx":1805
 *         #if not self.met_responseDown_branch and "met_responseDown" not in self.complained:
 *         if not self.met_responseDown_branch and "met_responseDown":
 *             warnings.warn( "EMTree: Expected branch met_responseDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_responseDown")
 *         else:
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_respo_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "EMTree.pyx":1814
 *         #if not self.met_resolutionUp_branch and "met_resolutionUp" not in self.complained:
 *         if not self.met_resolutionUp_branch and "met_resolutionUp":
 *             warnings.warn( "EMTree: Expected branch met_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_resolutionUp")
 *         else:
 */
  __pyx_tuple__123 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_resol, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "EMTree.pyx":1823
 *         #if not self.met_resolutionDown_branch and "met_resolutionDown" not in self.complained:
 *         if not self.met_resolutionDown_branch and "met_resolutionDown":
 *             warnings.warn( "EMTree: Expected branch met_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("met_resolutionDown")
 *         else:
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_met_resol_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 1823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "EMTree.pyx":1832
 *         #if not self.metphi_responseUp_branch and "metphi_responseUp" not in self.complained:
 *         if not self.metphi_responseUp_branch and "metphi_responseUp":
 *             warnings.warn( "EMTree: Expected branch metphi_responseUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_responseUp")
 *         else:
 */
  __pyx_tuple__125 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_re, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "EMTree.pyx":1841
 *         #if not self.metphi_responseDown_branch and "metphi_responseDown" not in self.complained:
 *         if not self.metphi_responseDown_branch and "metphi_responseDown":
 *             warnings.warn( "EMTree: Expected branch metphi_responseDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_responseDown")
 *         else:
 */
  __pyx_tuple__126 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_re_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "EMTree.pyx":1850
 *         #if not self.metphi_resolutionUp_branch and "metphi_resolutionUp" not in self.complained:
 *         if not self.metphi_resolutionUp_branch and "metphi_resolutionUp":
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_resolutionUp")
 *         else:
 */
  __pyx_tuple__127 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_re_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "EMTree.pyx":1859
 *         #if not self.metphi_resolutionDown_branch and "metphi_resolutionDown" not in self.complained:
 *         if not self.metphi_resolutionDown_branch and "metphi_resolutionDown":
 *             warnings.warn( "EMTree: Expected branch metphi_resolutionDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("metphi_resolutionDown")
 *         else:
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_metphi_re_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "EMTree.pyx":1868
 *         #if not self.mjj_branch and "mjj" not in self.complained:
 *         if not self.mjj_branch and "mjj":
 *             warnings.warn( "EMTree: Expected branch mjj does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj")
 *         else:
 */
  __pyx_tuple__129 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_does, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "EMTree.pyx":1877
 *         #if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteUp_branch and "mjj_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteUp")
 *         else:
 */
  __pyx_tuple__130 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetAb, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 1877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "EMTree.pyx":1886
 *         #if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteDown_branch and "mjj_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteDown")
 *         else:
 */
  __pyx_tuple__131 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 1886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "EMTree.pyx":1895
 *         #if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearUp_branch and "mjj_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteyearUp")
 *         else:
 */
  __pyx_tuple__132 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "EMTree.pyx":1904
 *         #if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown" not in self.complained:
 *         if not self.mjj_JetAbsoluteyearDown_branch and "mjj_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetAbsoluteyearDown")
 *         else:
 */
  __pyx_tuple__133 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetAb_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "EMTree.pyx":1913
 *         #if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up" not in self.complained:
 *         if not self.mjj_JetBBEC1Up_branch and "mjj_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1Up")
 *         else:
 */
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetBB, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "EMTree.pyx":1922
 *         #if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down" not in self.complained:
 *         if not self.mjj_JetBBEC1Down_branch and "mjj_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1Down")
 *         else:
 */
  __pyx_tuple__135 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "EMTree.pyx":1931
 *         #if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp" not in self.complained:
 *         if not self.mjj_JetBBEC1yearUp_branch and "mjj_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1yearUp")
 *         else:
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 1931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "EMTree.pyx":1940
 *         #if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown" not in self.complained:
 *         if not self.mjj_JetBBEC1yearDown_branch and "mjj_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetBBEC1yearDown")
 *         else:
 */
  __pyx_tuple__137 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetBB_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "EMTree.pyx":1949
 *         #if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up" not in self.complained:
 *         if not self.mjj_JetEC2Up_branch and "mjj_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2Up")
 *         else:
 */
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetEC, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 1949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "EMTree.pyx":1958
 *         #if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down" not in self.complained:
 *         if not self.mjj_JetEC2Down_branch and "mjj_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2Down")
 *         else:
 */
  __pyx_tuple__139 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(0, 1958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "EMTree.pyx":1967
 *         #if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp" not in self.complained:
 *         if not self.mjj_JetEC2yearUp_branch and "mjj_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2yearUp")
 *         else:
 */
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 1967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "EMTree.pyx":1976
 *         #if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown" not in self.complained:
 *         if not self.mjj_JetEC2yearDown_branch and "mjj_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetEC2yearDown")
 *         else:
 */
  __pyx_tuple__141 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetEC_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "EMTree.pyx":1985
 *         #if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp" not in self.complained:
 *         if not self.mjj_JetFlavorQCDUp_branch and "mjj_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetFlavorQCDUp")
 *         else:
 */
  __pyx_tuple__142 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetFl, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 1985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "EMTree.pyx":1994
 *         #if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown" not in self.complained:
 *         if not self.mjj_JetFlavorQCDDown_branch and "mjj_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetFlavorQCDDown")
 *         else:
 */
  __pyx_tuple__143 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetFl_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "EMTree.pyx":2003
 *         #if not self.mjj_JetHFUp_branch and "mjj_JetHFUp" not in self.complained:
 *         if not self.mjj_JetHFUp_branch and "mjj_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFUp")
 *         else:
 */
  __pyx_tuple__144 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetHF, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 2003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "EMTree.pyx":2012
 *         #if not self.mjj_JetHFDown_branch and "mjj_JetHFDown" not in self.complained:
 *         if not self.mjj_JetHFDown_branch and "mjj_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFDown")
 *         else:
 */
  __pyx_tuple__145 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(0, 2012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "EMTree.pyx":2021
 *         #if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp" not in self.complained:
 *         if not self.mjj_JetHFyearUp_branch and "mjj_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFyearUp")
 *         else:
 */
  __pyx_tuple__146 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "EMTree.pyx":2030
 *         #if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown" not in self.complained:
 *         if not self.mjj_JetHFyearDown_branch and "mjj_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetHFyearDown")
 *         else:
 */
  __pyx_tuple__147 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetHF_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "EMTree.pyx":2039
 *         #if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp" not in self.complained:
 *         if not self.mjj_JetRelativeBalUp_branch and "mjj_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeBalUp")
 *         else:
 */
  __pyx_tuple__148 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetRe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "EMTree.pyx":2048
 *         #if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown" not in self.complained:
 *         if not self.mjj_JetRelativeBalDown_branch and "mjj_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeBalDown")
 *         else:
 */
  __pyx_tuple__149 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "EMTree.pyx":2057
 *         #if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp" not in self.complained:
 *         if not self.mjj_JetRelativeSampleUp_branch and "mjj_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeSampleUp")
 *         else:
 */
  __pyx_tuple__150 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "EMTree.pyx":2066
 *         #if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown" not in self.complained:
 *         if not self.mjj_JetRelativeSampleDown_branch and "mjj_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JetRelativeSampleDown")
 *         else:
 */
  __pyx_tuple__151 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JetRe_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "EMTree.pyx":2075
 *         #if not self.mjj_JERUp_branch and "mjj_JERUp" not in self.complained:
 *         if not self.mjj_JERUp_branch and "mjj_JERUp":
 *             warnings.warn( "EMTree: Expected branch mjj_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JERUp")
 *         else:
 */
  __pyx_tuple__152 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JERUp, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "EMTree.pyx":2084
 *         #if not self.mjj_JERDown_branch and "mjj_JERDown" not in self.complained:
 *         if not self.mjj_JERDown_branch and "mjj_JERDown":
 *             warnings.warn( "EMTree: Expected branch mjj_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("mjj_JERDown")
 *         else:
 */
  __pyx_tuple__153 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_mjj_JERDo, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "EMTree.pyx":2093
 *         #if not self.gen_match_1_branch and "gen_match_1" not in self.complained:
 *         if not self.gen_match_1_branch and "gen_match_1":
 *             warnings.warn( "EMTree: Expected branch gen_match_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_match_1")
 *         else:
 */
  __pyx_tuple__154 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_gen_match, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 2093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "EMTree.pyx":2102
 *         #if not self.gen_match_2_branch and "gen_match_2" not in self.complained:
 *         if not self.gen_match_2_branch and "gen_match_2":
 *             warnings.warn( "EMTree: Expected branch gen_match_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_match_2")
 *         else:
 */
  __pyx_tuple__155 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_gen_match_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(0, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);

  /* "EMTree.pyx":2111
 *         #if not self.nbtag_branch and "nbtag" not in self.complained:
 *         if not self.nbtag_branch and "nbtag":
 *             warnings.warn( "EMTree: Expected branch nbtag does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("nbtag")
 *         else:
 */
  __pyx_tuple__156 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_nbtag_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);

  /* "EMTree.pyx":2120
 *         #if not self.nbtagL_branch and "nbtagL" not in self.complained:
 *         if not self.nbtagL_branch and "nbtagL":
 *             warnings.warn( "EMTree: Expected branch nbtagL does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("nbtagL")
 *         else:
 */
  __pyx_tuple__157 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_nbtagL_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(0, 2120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);

  /* "EMTree.pyx":2129
 *         #if not self.njets_branch and "njets" not in self.complained:
 *         if not self.njets_branch and "njets":
 *             warnings.warn( "EMTree: Expected branch njets does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets")
 *         else:
 */
  __pyx_tuple__158 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);

  /* "EMTree.pyx":2138
 *         #if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp" not in self.complained:
 *         if not self.njets_JetAbsoluteUp_branch and "njets_JetAbsoluteUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteUp")
 *         else:
 */
  __pyx_tuple__159 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);

  /* "EMTree.pyx":2147
 *         #if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown" not in self.complained:
 *         if not self.njets_JetAbsoluteDown_branch and "njets_JetAbsoluteDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteDown")
 *         else:
 */
  __pyx_tuple__160 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(0, 2147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);

  /* "EMTree.pyx":2156
 *         #if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp" not in self.complained:
 *         if not self.njets_JetAbsoluteyearUp_branch and "njets_JetAbsoluteyearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteyearUp")
 *         else:
 */
  __pyx_tuple__161 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_3, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);

  /* "EMTree.pyx":2165
 *         #if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown" not in self.complained:
 *         if not self.njets_JetAbsoluteyearDown_branch and "njets_JetAbsoluteyearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetAbsoluteyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetAbsoluteyearDown")
 *         else:
 */
  __pyx_tuple__162 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_4, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);

  /* "EMTree.pyx":2174
 *         #if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up" not in self.complained:
 *         if not self.njets_JetBBEC1Up_branch and "njets_JetBBEC1Up":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1Up")
 *         else:
 */
  __pyx_tuple__163 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_5, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 2174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "EMTree.pyx":2183
 *         #if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down" not in self.complained:
 *         if not self.njets_JetBBEC1Down_branch and "njets_JetBBEC1Down":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1Down")
 *         else:
 */
  __pyx_tuple__164 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_6, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(0, 2183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);

  /* "EMTree.pyx":2192
 *         #if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp" not in self.complained:
 *         if not self.njets_JetBBEC1yearUp_branch and "njets_JetBBEC1yearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1yearUp")
 *         else:
 */
  __pyx_tuple__165 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_7, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "EMTree.pyx":2201
 *         #if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown" not in self.complained:
 *         if not self.njets_JetBBEC1yearDown_branch and "njets_JetBBEC1yearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetBBEC1yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetBBEC1yearDown")
 *         else:
 */
  __pyx_tuple__166 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_8, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(0, 2201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);

  /* "EMTree.pyx":2210
 *         #if not self.njets_JetEC2Up_branch and "njets_JetEC2Up" not in self.complained:
 *         if not self.njets_JetEC2Up_branch and "njets_JetEC2Up":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Up does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2Up")
 *         else:
 */
  __pyx_tuple__167 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_9, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 2210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "EMTree.pyx":2219
 *         #if not self.njets_JetEC2Down_branch and "njets_JetEC2Down" not in self.complained:
 *         if not self.njets_JetEC2Down_branch and "njets_JetEC2Down":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2Down does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2Down")
 *         else:
 */
  __pyx_tuple__168 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_10, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(0, 2219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);

  /* "EMTree.pyx":2228
 *         #if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp" not in self.complained:
 *         if not self.njets_JetEC2yearUp_branch and "njets_JetEC2yearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2yearUp")
 *         else:
 */
  __pyx_tuple__169 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_11, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 2228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);

  /* "EMTree.pyx":2237
 *         #if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown" not in self.complained:
 *         if not self.njets_JetEC2yearDown_branch and "njets_JetEC2yearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetEC2yearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetEC2yearDown")
 *         else:
 */
  __pyx_tuple__170 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_12, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(0, 2237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);

  /* "EMTree.pyx":2246
 *         #if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp" not in self.complained:
 *         if not self.njets_JetFlavorQCDUp_branch and "njets_JetFlavorQCDUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetFlavorQCDUp")
 *         else:
 */
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_13, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "EMTree.pyx":2255
 *         #if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown" not in self.complained:
 *         if not self.njets_JetFlavorQCDDown_branch and "njets_JetFlavorQCDDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetFlavorQCDDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetFlavorQCDDown")
 *         else:
 */
  __pyx_tuple__172 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_14, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(0, 2255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "EMTree.pyx":2264
 *         #if not self.njets_JetHFUp_branch and "njets_JetHFUp" not in self.complained:
 *         if not self.njets_JetHFUp_branch and "njets_JetHFUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFUp")
 *         else:
 */
  __pyx_tuple__173 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_15, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 2264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "EMTree.pyx":2273
 *         #if not self.njets_JetHFDown_branch and "njets_JetHFDown" not in self.complained:
 *         if not self.njets_JetHFDown_branch and "njets_JetHFDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFDown")
 *         else:
 */
  __pyx_tuple__174 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_16, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(0, 2273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);

  /* "EMTree.pyx":2282
 *         #if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp" not in self.complained:
 *         if not self.njets_JetHFyearUp_branch and "njets_JetHFyearUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFyearUp")
 *         else:
 */
  __pyx_tuple__175 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_17, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "EMTree.pyx":2291
 *         #if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown" not in self.complained:
 *         if not self.njets_JetHFyearDown_branch and "njets_JetHFyearDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetHFyearDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetHFyearDown")
 *         else:
 */
  __pyx_tuple__176 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_18, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);

  /* "EMTree.pyx":2300
 *         #if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp" not in self.complained:
 *         if not self.njets_JetRelativeBalUp_branch and "njets_JetRelativeBalUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeBalUp")
 *         else:
 */
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_19, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);

  /* "EMTree.pyx":2309
 *         #if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown" not in self.complained:
 *         if not self.njets_JetRelativeBalDown_branch and "njets_JetRelativeBalDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeBalDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeBalDown")
 *         else:
 */
  __pyx_tuple__178 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_20, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);

  /* "EMTree.pyx":2318
 *         #if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp" not in self.complained:
 *         if not self.njets_JetRelativeSampleUp_branch and "njets_JetRelativeSampleUp":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeSampleUp")
 *         else:
 */
  __pyx_tuple__179 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_21, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "EMTree.pyx":2327
 *         #if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown" not in self.complained:
 *         if not self.njets_JetRelativeSampleDown_branch and "njets_JetRelativeSampleDown":
 *             warnings.warn( "EMTree: Expected branch njets_JetRelativeSampleDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JetRelativeSampleDown")
 *         else:
 */
  __pyx_tuple__180 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_Jet_22, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 2327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "EMTree.pyx":2336
 *         #if not self.njets_JERUp_branch and "njets_JERUp" not in self.complained:
 *         if not self.njets_JERUp_branch and "njets_JERUp":
 *             warnings.warn( "EMTree: Expected branch njets_JERUp does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JERUp")
 *         else:
 */
  __pyx_tuple__181 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_JER, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "EMTree.pyx":2345
 *         #if not self.njets_JERDown_branch and "njets_JERDown" not in self.complained:
 *         if not self.njets_JERDown_branch and "njets_JERDown":
 *             warnings.warn( "EMTree: Expected branch njets_JERDown does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("njets_JERDown")
 *         else:
 */
  __pyx_tuple__182 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_njets_JER_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 2345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);

  /* "EMTree.pyx":2354
 *         #if not self.jpt_1_branch and "jpt_1" not in self.complained:
 *         if not self.jpt_1_branch and "jpt_1":
 *             warnings.warn( "EMTree: Expected branch jpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jpt_1")
 *         else:
 */
  __pyx_tuple__183 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jpt_1_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(0, 2354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);

  /* "EMTree.pyx":2363
 *         #if not self.jeta_1_branch and "jeta_1" not in self.complained:
 *         if not self.jeta_1_branch and "jeta_1":
 *             warnings.warn( "EMTree: Expected branch jeta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jeta_1")
 *         else:
 */
  __pyx_tuple__184 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jeta_1_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 2363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "EMTree.pyx":2372
 *         #if not self.jcsv_1_branch and "jcsv_1" not in self.complained:
 *         if not self.jcsv_1_branch and "jcsv_1":
 *             warnings.warn( "EMTree: Expected branch jcsv_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jcsv_1")
 *         else:
 */
  __pyx_tuple__185 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jcsv_1_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(0, 2372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "EMTree.pyx":2381
 *         #if not self.jphi_1_branch and "jphi_1" not in self.complained:
 *         if not self.jphi_1_branch and "jphi_1":
 *             warnings.warn( "EMTree: Expected branch jphi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jphi_1")
 *         else:
 */
  __pyx_tuple__186 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jphi_1_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);

  /* "EMTree.pyx":2390
 *         #if not self.jpt_2_branch and "jpt_2" not in self.complained:
 *         if not self.jpt_2_branch and "jpt_2":
 *             warnings.warn( "EMTree: Expected branch jpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jpt_2")
 *         else:
 */
  __pyx_tuple__187 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jpt_2_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(0, 2390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);

  /* "EMTree.pyx":2399
 *         #if not self.jeta_2_branch and "jeta_2" not in self.complained:
 *         if not self.jeta_2_branch and "jeta_2":
 *             warnings.warn( "EMTree: Expected branch jeta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jeta_2")
 *         else:
 */
  __pyx_tuple__188 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jeta_2_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "EMTree.pyx":2408
 *         #if not self.jcsv_2_branch and "jcsv_2" not in self.complained:
 *         if not self.jcsv_2_branch and "jcsv_2":
 *             warnings.warn( "EMTree: Expected branch jcsv_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jcsv_2")
 *         else:
 */
  __pyx_tuple__189 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jcsv_2_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(0, 2408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);

  /* "EMTree.pyx":2417
 *         #if not self.jphi_2_branch and "jphi_2" not in self.complained:
 *         if not self.jphi_2_branch and "jphi_2":
 *             warnings.warn( "EMTree: Expected branch jphi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("jphi_2")
 *         else:
 */
  __pyx_tuple__190 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_jphi_2_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(0, 2417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);

  /* "EMTree.pyx":2426
 *         #if not self.bpt_1_branch and "bpt_1" not in self.complained:
 *         if not self.bpt_1_branch and "bpt_1":
 *             warnings.warn( "EMTree: Expected branch bpt_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bpt_1")
 *         else:
 */
  __pyx_tuple__191 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bpt_1_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(0, 2426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "EMTree.pyx":2435
 *         #if not self.bflavor_1_branch and "bflavor_1" not in self.complained:
 *         if not self.bflavor_1_branch and "bflavor_1":
 *             warnings.warn( "EMTree: Expected branch bflavor_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bflavor_1")
 *         else:
 */
  __pyx_tuple__192 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bflavor_1, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(0, 2435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);

  /* "EMTree.pyx":2444
 *         #if not self.beta_1_branch and "beta_1" not in self.complained:
 *         if not self.beta_1_branch and "beta_1":
 *             warnings.warn( "EMTree: Expected branch beta_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("beta_1")
 *         else:
 */
  __pyx_tuple__193 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_beta_1_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(0, 2444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);

  /* "EMTree.pyx":2453
 *         #if not self.bphi_1_branch and "bphi_1" not in self.complained:
 *         if not self.bphi_1_branch and "bphi_1":
 *             warnings.warn( "EMTree: Expected branch bphi_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bphi_1")
 *         else:
 */
  __pyx_tuple__194 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bphi_1_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__194)) __PYX_ERR(0, 2453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);

  /* "EMTree.pyx":2462
 *         #if not self.passMu23E12_branch and "passMu23E12" not in self.complained:
 *         if not self.passMu23E12_branch and "passMu23E12":
 *             warnings.warn( "EMTree: Expected branch passMu23E12 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("passMu23E12")
 *         else:
 */
  __pyx_tuple__195 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_passMu23E, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 2462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "EMTree.pyx":2471
 *         #if not self.passMu8E23_branch and "passMu8E23" not in self.complained:
 *         if not self.passMu8E23_branch and "passMu8E23":
 *             warnings.warn( "EMTree: Expected branch passMu8E23 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("passMu8E23")
 *         else:
 */
  __pyx_tuple__196 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_passMu8E2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(0, 2471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);

  /* "EMTree.pyx":2480
 *         #if not self.matchMu23E12_1_branch and "matchMu23E12_1" not in self.complained:
 *         if not self.matchMu23E12_1_branch and "matchMu23E12_1":
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu23E12_1")
 *         else:
 */
  __pyx_tuple__197 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_matchMu23, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 2480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);

  /* "EMTree.pyx":2489
 *         #if not self.matchMu8E23_1_branch and "matchMu8E23_1" not in self.complained:
 *         if not self.matchMu8E23_1_branch and "matchMu8E23_1":
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu8E23_1")
 *         else:
 */
  __pyx_tuple__198 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_matchMu8E, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(0, 2489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);

  /* "EMTree.pyx":2498
 *         #if not self.filterMu23E12_1_branch and "filterMu23E12_1" not in self.complained:
 *         if not self.filterMu23E12_1_branch and "filterMu23E12_1":
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu23E12_1")
 *         else:
 */
  __pyx_tuple__199 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_filterMu2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 2498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);

  /* "EMTree.pyx":2507
 *         #if not self.filterMu8E23_1_branch and "filterMu8E23_1" not in self.complained:
 *         if not self.filterMu8E23_1_branch and "filterMu8E23_1":
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu8E23_1")
 *         else:
 */
  __pyx_tuple__200 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_filterMu8, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);

  /* "EMTree.pyx":2516
 *         #if not self.matchMu23E12_2_branch and "matchMu23E12_2" not in self.complained:
 *         if not self.matchMu23E12_2_branch and "matchMu23E12_2":
 *             warnings.warn( "EMTree: Expected branch matchMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu23E12_2")
 *         else:
 */
  __pyx_tuple__201 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_matchMu23_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 2516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);

  /* "EMTree.pyx":2525
 *         #if not self.matchMu8E23_2_branch and "matchMu8E23_2" not in self.complained:
 *         if not self.matchMu8E23_2_branch and "matchMu8E23_2":
 *             warnings.warn( "EMTree: Expected branch matchMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("matchMu8E23_2")
 *         else:
 */
  __pyx_tuple__202 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_matchMu8E_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(0, 2525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);

  /* "EMTree.pyx":2534
 *         #if not self.filterMu23E12_2_branch and "filterMu23E12_2" not in self.complained:
 *         if not self.filterMu23E12_2_branch and "filterMu23E12_2":
 *             warnings.warn( "EMTree: Expected branch filterMu23E12_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu23E12_2")
 *         else:
 */
  __pyx_tuple__203 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_filterMu2_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 2534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);

  /* "EMTree.pyx":2543
 *         #if not self.filterMu8E23_2_branch and "filterMu8E23_2" not in self.complained:
 *         if not self.filterMu8E23_2_branch and "filterMu8E23_2":
 *             warnings.warn( "EMTree: Expected branch filterMu8E23_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("filterMu8E23_2")
 *         else:
 */
  __pyx_tuple__204 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_filterMu8_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(0, 2543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);

  /* "EMTree.pyx":2552
 *         #if not self.bpt_2_branch and "bpt_2" not in self.complained:
 *         if not self.bpt_2_branch and "bpt_2":
 *             warnings.warn( "EMTree: Expected branch bpt_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bpt_2")
 *         else:
 */
  __pyx_tuple__205 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bpt_2_doe, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);

  /* "EMTree.pyx":2561
 *         #if not self.bflavor_2_branch and "bflavor_2" not in self.complained:
 *         if not self.bflavor_2_branch and "bflavor_2":
 *             warnings.warn( "EMTree: Expected branch bflavor_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bflavor_2")
 *         else:
 */
  __pyx_tuple__206 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bflavor_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(0, 2561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);

  /* "EMTree.pyx":2570
 *         #if not self.beta_2_branch and "beta_2" not in self.complained:
 *         if not self.beta_2_branch and "beta_2":
 *             warnings.warn( "EMTree: Expected branch beta_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("beta_2")
 *         else:
 */
  __pyx_tuple__207 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_beta_2_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 2570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);

  /* "EMTree.pyx":2579
 *         #if not self.bphi_2_branch and "bphi_2" not in self.complained:
 *         if not self.bphi_2_branch and "bphi_2":
 *             warnings.warn( "EMTree: Expected branch bphi_2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("bphi_2")
 *         else:
 */
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_bphi_2_do, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(0, 2579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);

  /* "EMTree.pyx":2588
 *         #if not self.pt_top1_branch and "pt_top1" not in self.complained:
 *         if not self.pt_top1_branch and "pt_top1":
 *             warnings.warn( "EMTree: Expected branch pt_top1 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_top1")
 *         else:
 */
  __pyx_tuple__209 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_top1_d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);

  /* "EMTree.pyx":2597
 *         #if not self.pt_top2_branch and "pt_top2" not in self.complained:
 *         if not self.pt_top2_branch and "pt_top2":
 *             warnings.warn( "EMTree: Expected branch pt_top2 does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("pt_top2")
 *         else:
 */
  __pyx_tuple__210 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_pt_top2_d, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(0, 2597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);

  /* "EMTree.pyx":2606
 *         #if not self.genweight_branch and "genweight" not in self.complained:
 *         if not self.genweight_branch and "genweight":
 *             warnings.warn( "EMTree: Expected branch genweight does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("genweight")
 *         else:
 */
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_genweight, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 2606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);

  /* "EMTree.pyx":2615
 *         #if not self.gen_Higgs_pt_branch and "gen_Higgs_pt" not in self.complained:
 *         if not self.gen_Higgs_pt_branch and "gen_Higgs_pt":
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_pt does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_Higgs_pt")
 *         else:
 */
  __pyx_tuple__212 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_gen_Higgs, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(0, 2615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);

  /* "EMTree.pyx":2624
 *         #if not self.gen_Higgs_mass_branch and "gen_Higgs_mass" not in self.complained:
 *         if not self.gen_Higgs_mass_branch and "gen_Higgs_mass":
 *             warnings.warn( "EMTree: Expected branch gen_Higgs_mass does not exist!"                " It will crash if you try and use it!",Warning)             # <<<<<<<<<<<<<<
 *             #self.complained.add("gen_Higgs_mass")
 *         else:
 */
  __pyx_tuple__213 = PyTuple_Pack(2, __pyx_kp_s_EMTree_Expected_branch_gen_Higgs_2, __pyx_builtin_Warning); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 2624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__214 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__214)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__214);
  __Pyx_GIVEREF(__pyx_tuple__214);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__215 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);

  /* "EMTree.pyx":38
 * from cpython cimport PyCObject_AsVoidPtr
 * import warnings
 * def my_warning_format(message, category, filename, lineno, line=""):             # <<<<<<<<<<<<<<
 *     return "%s:%s\n" % (category.__name__, message)
 * warnings.formatwarning = my_warning_format
 */
  __pyx_tuple__216 = PyTuple_Pack(5, __pyx_n_s_message, __pyx_n_s_category, __pyx_n_s_filename, __pyx_n_s_lineno, __pyx_n_s_line); if (unlikely(!__pyx_tuple__216)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__216);
  __Pyx_GIVEREF(__pyx_tuple__216);
  __pyx_codeobj__217 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__216, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_EMTree_pyx, __pyx_n_s_my_warning_format, 38, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__217)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 3, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6EMTree_EMTree = &__pyx_vtable_6EMTree_EMTree;
  __pyx_vtable_6EMTree_EMTree.load_entry = (PyObject *(*)(struct __pyx_obj_6EMTree_EMTree *, long))__pyx_f_6EMTree_6EMTree_load_entry;
  __pyx_vtable_6EMTree_EMTree.setup_branches = (PyObject *(*)(struct __pyx_obj_6EMTree_EMTree *, TTree *))__pyx_f_6EMTree_6EMTree_setup_branches;
  if (PyType_Ready(&__pyx_type_6EMTree_EMTree) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_type_6EMTree_EMTree.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6EMTree_EMTree.tp_dictoffset && __pyx_type_6EMTree_EMTree.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6EMTree_EMTree.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6EMTree_EMTree.tp_dict, __pyx_vtabptr_6EMTree_EMTree) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "EMTree", (PyObject *)&__pyx_type_6EMTree_EMTree) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6EMTree_EMTree) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_ptype_6EMTree_EMTree = &__pyx_type_6EMTree_EMTree;
  if (PyType_Ready(&__pyx_type_6EMTree___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 2631, __pyx_L1_error)
  __pyx_type_6EMTree___pyx_scope_struct____iter__.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6EMTree___pyx_scope_struct____iter__.tp_dictoffset && __pyx_type_6EMTree___pyx_scope_struct____iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6EMTree___pyx_scope_struct____iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6EMTree___pyx_scope_struct____iter__ = &__pyx_type_6EMTree___pyx_scope_struct____iter__;
  if (PyType_Ready(&__pyx_type_6EMTree___pyx_scope_struct_1_where) < 0) __PYX_ERR(0, 2639, __pyx_L1_error)
  __pyx_type_6EMTree___pyx_scope_struct_1_where.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6EMTree___pyx_scope_struct_1_where.tp_dictoffset && __pyx_type_6EMTree___pyx_scope_struct_1_where.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6EMTree___pyx_scope_struct_1_where.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6EMTree___pyx_scope_struct_1_where = &__pyx_type_6EMTree___pyx_scope_struct_1_where;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initEMTree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initEMTree(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_EMTree(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_EMTree(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_EMTree(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_EMTree(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 3, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("EMTree", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 3, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 3, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 3, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 3, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_EMTree) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 3, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "EMTree")) {
      if (unlikely(PyDict_SetItemString(modules, "EMTree", __pyx_m) < 0)) __PYX_ERR(0, 3, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  #endif

  /* "EMTree.pyx":37
 * 
 * from cpython cimport PyCObject_AsVoidPtr
 * import warnings             # <<<<<<<<<<<<<<
 * def my_warning_format(message, category, filename, lineno, line=""):
 *     return "%s:%s\n" % (category.__name__, message)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EMTree.pyx":38
 * from cpython cimport PyCObject_AsVoidPtr
 * import warnings
 * def my_warning_format(message, category, filename, lineno, line=""):             # <<<<<<<<<<<<<<
 *     return "%s:%s\n" % (category.__name__, message)
 * warnings.formatwarning = my_warning_format
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6EMTree_1my_warning_format, NULL, __pyx_n_s_EMTree); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_my_warning_format, __pyx_t_1) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "EMTree.pyx":40
 * def my_warning_format(message, category, filename, lineno, line=""):
 *     return "%s:%s\n" % (category.__name__, message)
 * warnings.formatwarning = my_warning_format             # <<<<<<<<<<<<<<
 * 
 * cdef class EMTree:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_my_warning_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_formatwarning, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "EMTree.pyx":3
 * 
 * 
 * # Load relevant ROOT C++ headers             # <<<<<<<<<<<<<<
 * cdef extern from "TObject.h":
 *     cdef cppclass TObject:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init EMTree", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init EMTree");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyObjectSetAttrStr */
    #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Print */
    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* CoroutineBase */
    #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
        static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
        #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
        static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
        #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
        #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
